
Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f7a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  00002f7a  0000300e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  0080008c  0080008c  0000303a  2**0
                  ALLOC
  3 .stab         00002ebc  00000000  00000000  0000303c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000339e  00000000  00000000  00005ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00009296  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000093d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00009546  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000b18f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000c07a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ce28  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000cf88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000d215  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d9e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 39 15 	jmp	0x2a72	; 0x2a72 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 06 15 	jmp	0x2a0c	; 0x2a0c <__vector_9>
      28:	0c 94 2c 14 	jmp	0x2858	; 0x2858 <__vector_10>
      2c:	0c 94 f9 13 	jmp	0x27f2	; 0x27f2 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e7       	ldi	r30, 0x7A	; 122
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e8       	ldi	r26, 0x8C	; 140
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 39       	cpi	r26, 0x95	; 149
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 bb 17 	jmp	0x2f76	; 0x2f76 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 84 17 	jmp	0x2f08	; 0x2f08 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a0 17 	jmp	0x2f40	; 0x2f40 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 90 17 	jmp	0x2f20	; 0x2f20 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ac 17 	jmp	0x2f58	; 0x2f58 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 90 17 	jmp	0x2f20	; 0x2f20 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ac 17 	jmp	0x2f58	; 0x2f58 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 84 17 	jmp	0x2f08	; 0x2f08 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a0 17 	jmp	0x2f40	; 0x2f40 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 90 17 	jmp	0x2f20	; 0x2f20 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ac 17 	jmp	0x2f58	; 0x2f58 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 90 17 	jmp	0x2f20	; 0x2f20 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ac 17 	jmp	0x2f58	; 0x2f58 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 90 17 	jmp	0x2f20	; 0x2f20 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ac 17 	jmp	0x2f58	; 0x2f58 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 94 17 	jmp	0x2f28	; 0x2f28 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 b0 17 	jmp	0x2f60	; 0x2f60 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
 *                                Main Funciton                                *
 *******************************************************************************/


int main()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	af 97       	sbiw	r28, 0x2f	; 47
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	 * twiConfig	--->	  configuration of I2C
	 * uartConfig	--->	  configuration of UART
	 */
	uint8 option;

	TWI_ConfigType twiConfig = {PRESCALER_0, 0x01,0x02};
     b5a:	9e 01       	movw	r18, r28
     b5c:	2e 5f       	subi	r18, 0xFE	; 254
     b5e:	3f 4f       	sbci	r19, 0xFF	; 255
     b60:	3d 8f       	std	Y+29, r19	; 0x1d
     b62:	2c 8f       	std	Y+28, r18	; 0x1c
     b64:	8b e7       	ldi	r24, 0x7B	; 123
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	9f 8f       	std	Y+31, r25	; 0x1f
     b6a:	8e 8f       	std	Y+30, r24	; 0x1e
     b6c:	95 e0       	ldi	r25, 0x05	; 5
     b6e:	98 a3       	std	Y+32, r25	; 0x20
     b70:	ee 8d       	ldd	r30, Y+30	; 0x1e
     b72:	ff 8d       	ldd	r31, Y+31	; 0x1f
     b74:	00 80       	ld	r0, Z
     b76:	2e 8d       	ldd	r18, Y+30	; 0x1e
     b78:	3f 8d       	ldd	r19, Y+31	; 0x1f
     b7a:	2f 5f       	subi	r18, 0xFF	; 255
     b7c:	3f 4f       	sbci	r19, 0xFF	; 255
     b7e:	3f 8f       	std	Y+31, r19	; 0x1f
     b80:	2e 8f       	std	Y+30, r18	; 0x1e
     b82:	ec 8d       	ldd	r30, Y+28	; 0x1c
     b84:	fd 8d       	ldd	r31, Y+29	; 0x1d
     b86:	00 82       	st	Z, r0
     b88:	2c 8d       	ldd	r18, Y+28	; 0x1c
     b8a:	3d 8d       	ldd	r19, Y+29	; 0x1d
     b8c:	2f 5f       	subi	r18, 0xFF	; 255
     b8e:	3f 4f       	sbci	r19, 0xFF	; 255
     b90:	3d 8f       	std	Y+29, r19	; 0x1d
     b92:	2c 8f       	std	Y+28, r18	; 0x1c
     b94:	38 a1       	ldd	r19, Y+32	; 0x20
     b96:	31 50       	subi	r19, 0x01	; 1
     b98:	38 a3       	std	Y+32, r19	; 0x20
     b9a:	88 a1       	ldd	r24, Y+32	; 0x20
     b9c:	88 23       	and	r24, r24
     b9e:	41 f7       	brne	.-48     	; 0xb70 <main+0x2a>

	UART_CONFIG_TYPE uartConfig = {DISABLE_PARITY, _1BIT, _8BIT, 9600};
     ba0:	fe 01       	movw	r30, r28
     ba2:	37 96       	adiw	r30, 0x07	; 7
     ba4:	fa a3       	std	Y+34, r31	; 0x22
     ba6:	e9 a3       	std	Y+33, r30	; 0x21
     ba8:	24 e7       	ldi	r18, 0x74	; 116
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	3c a3       	std	Y+36, r19	; 0x24
     bae:	2b a3       	std	Y+35, r18	; 0x23
     bb0:	37 e0       	ldi	r19, 0x07	; 7
     bb2:	3d a3       	std	Y+37, r19	; 0x25
     bb4:	eb a1       	ldd	r30, Y+35	; 0x23
     bb6:	fc a1       	ldd	r31, Y+36	; 0x24
     bb8:	00 80       	ld	r0, Z
     bba:	2b a1       	ldd	r18, Y+35	; 0x23
     bbc:	3c a1       	ldd	r19, Y+36	; 0x24
     bbe:	2f 5f       	subi	r18, 0xFF	; 255
     bc0:	3f 4f       	sbci	r19, 0xFF	; 255
     bc2:	3c a3       	std	Y+36, r19	; 0x24
     bc4:	2b a3       	std	Y+35, r18	; 0x23
     bc6:	e9 a1       	ldd	r30, Y+33	; 0x21
     bc8:	fa a1       	ldd	r31, Y+34	; 0x22
     bca:	00 82       	st	Z, r0
     bcc:	29 a1       	ldd	r18, Y+33	; 0x21
     bce:	3a a1       	ldd	r19, Y+34	; 0x22
     bd0:	2f 5f       	subi	r18, 0xFF	; 255
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	3a a3       	std	Y+34, r19	; 0x22
     bd6:	29 a3       	std	Y+33, r18	; 0x21
     bd8:	3d a1       	ldd	r19, Y+37	; 0x25
     bda:	31 50       	subi	r19, 0x01	; 1
     bdc:	3d a3       	std	Y+37, r19	; 0x25
     bde:	8d a1       	ldd	r24, Y+37	; 0x25
     be0:	88 23       	and	r24, r24
     be2:	41 f7       	brne	.-48     	; 0xbb4 <main+0x6e>

	/* initializing UART with certain configurations*/
	UART_init(&uartConfig);
     be4:	ce 01       	movw	r24, r28
     be6:	07 96       	adiw	r24, 0x07	; 7
     be8:	0e 94 24 16 	call	0x2c48	; 0x2c48 <UART_init>

	/* initializing I2C with certain configurations*/
	TWI_init(&twiConfig);
     bec:	ce 01       	movw	r24, r28
     bee:	02 96       	adiw	r24, 0x02	; 2
     bf0:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <TWI_init>

	/* initializing DC-Motor */
	DcMotor_Init();
     bf4:	0e 94 8d 09 	call	0x131a	; 0x131a <DcMotor_Init>

	/* initializing Buzzer */
	BUZZER_init();
     bf8:	0e 94 64 09 	call	0x12c8	; 0x12c8 <BUZZER_init>

	/* enabling Global interrupt mask bit */
	SREG_REG.Bits.I_Bit = 1;
     bfc:	ef e5       	ldi	r30, 0x5F	; 95
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	80 81       	ld	r24, Z
     c02:	80 68       	ori	r24, 0x80	; 128
     c04:	80 83       	st	Z, r24

	while(1)
	{
		/* ECU2 asks ECU1 and waits for its
		 * response then sends current state*/
		UART_sendByte(MC2_ASK);
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <UART_sendByte>
		while(UART_recieveByte() != MC1_READY);
     c0c:	0e 94 03 17 	call	0x2e06	; 0x2e06 <UART_recieveByte>
     c10:	82 30       	cpi	r24, 0x02	; 2
     c12:	e1 f7       	brne	.-8      	; 0xc0c <main+0xc6>
		UART_sendByte(state);
     c14:	80 91 8e 00 	lds	r24, 0x008E
     c18:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <UART_sendByte>

		switch(state)
     c1c:	80 91 8e 00 	lds	r24, 0x008E
     c20:	e8 2f       	mov	r30, r24
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	fb 8f       	std	Y+27, r31	; 0x1b
     c26:	ea 8f       	std	Y+26, r30	; 0x1a
     c28:	2a 8d       	ldd	r18, Y+26	; 0x1a
     c2a:	3b 8d       	ldd	r19, Y+27	; 0x1b
     c2c:	22 30       	cpi	r18, 0x02	; 2
     c2e:	31 05       	cpc	r19, r1
     c30:	e9 f1       	breq	.+122    	; 0xcac <main+0x166>
     c32:	8a 8d       	ldd	r24, Y+26	; 0x1a
     c34:	9b 8d       	ldd	r25, Y+27	; 0x1b
     c36:	83 30       	cpi	r24, 0x03	; 3
     c38:	91 05       	cpc	r25, r1
     c3a:	54 f4       	brge	.+20     	; 0xc50 <main+0x10a>
     c3c:	ea 8d       	ldd	r30, Y+26	; 0x1a
     c3e:	fb 8d       	ldd	r31, Y+27	; 0x1b
     c40:	30 97       	sbiw	r30, 0x00	; 0
     c42:	c1 f0       	breq	.+48     	; 0xc74 <main+0x12e>
     c44:	2a 8d       	ldd	r18, Y+26	; 0x1a
     c46:	3b 8d       	ldd	r19, Y+27	; 0x1b
     c48:	21 30       	cpi	r18, 0x01	; 1
     c4a:	31 05       	cpc	r19, r1
     c4c:	b1 f0       	breq	.+44     	; 0xc7a <main+0x134>
     c4e:	db cf       	rjmp	.-74     	; 0xc06 <main+0xc0>
     c50:	8a 8d       	ldd	r24, Y+26	; 0x1a
     c52:	9b 8d       	ldd	r25, Y+27	; 0x1b
     c54:	84 30       	cpi	r24, 0x04	; 4
     c56:	91 05       	cpc	r25, r1
     c58:	09 f4       	brne	.+2      	; 0xc5c <main+0x116>
     c5a:	41 c0       	rjmp	.+130    	; 0xcde <main+0x198>
     c5c:	ea 8d       	ldd	r30, Y+26	; 0x1a
     c5e:	fb 8d       	ldd	r31, Y+27	; 0x1b
     c60:	e4 30       	cpi	r30, 0x04	; 4
     c62:	f1 05       	cpc	r31, r1
     c64:	84 f1       	brlt	.+96     	; 0xcc6 <main+0x180>
     c66:	2a 8d       	ldd	r18, Y+26	; 0x1a
     c68:	3b 8d       	ldd	r19, Y+27	; 0x1b
     c6a:	25 30       	cpi	r18, 0x05	; 5
     c6c:	31 05       	cpc	r19, r1
     c6e:	09 f4       	brne	.+2      	; 0xc72 <main+0x12c>
     c70:	6b c0       	rjmp	.+214    	; 0xd48 <main+0x202>
     c72:	c9 cf       	rjmp	.-110    	; 0xc06 <main+0xc0>
		{
		case CREATE_PASS:
			createPass();
     c74:	0e 94 6f 08 	call	0x10de	; 0x10de <createPass>
     c78:	c6 cf       	rjmp	.-116    	; 0xc06 <main+0xc0>

		case MAIN_SCREEN:
		{
			/* ECU2 waits for ECU1 to ask it then respond
			 * then receive the pressed key */
			while(UART_recieveByte() != MC1_ASK);
     c7a:	0e 94 03 17 	call	0x2e06	; 0x2e06 <UART_recieveByte>
     c7e:	83 30       	cpi	r24, 0x03	; 3
     c80:	e1 f7       	brne	.-8      	; 0xc7a <main+0x134>
			UART_sendByte(MC2_READY);
     c82:	84 e0       	ldi	r24, 0x04	; 4
     c84:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <UART_sendByte>
			option = UART_recieveByte();
     c88:	0e 94 03 17 	call	0x2e06	; 0x2e06 <UART_recieveByte>
     c8c:	89 83       	std	Y+1, r24	; 0x01

			if(option == '+')
     c8e:	89 81       	ldd	r24, Y+1	; 0x01
     c90:	8b 32       	cpi	r24, 0x2B	; 43
     c92:	21 f4       	brne	.+8      	; 0xc9c <main+0x156>
			{
				/* change state of application to open door */
				state = OPEN_DOOR;
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	80 93 8e 00 	sts	0x008E, r24
     c9a:	b5 cf       	rjmp	.-150    	; 0xc06 <main+0xc0>
			}
			else if(option == '-')
     c9c:	89 81       	ldd	r24, Y+1	; 0x01
     c9e:	8d 32       	cpi	r24, 0x2D	; 45
     ca0:	09 f0       	breq	.+2      	; 0xca4 <main+0x15e>
     ca2:	b1 cf       	rjmp	.-158    	; 0xc06 <main+0xc0>
			{
				/* change state of application to change password */
				state = CHANGE_PASS;
     ca4:	83 e0       	ldi	r24, 0x03	; 3
     ca6:	80 93 8e 00 	sts	0x008E, r24
     caa:	ad cf       	rjmp	.-166    	; 0xc06 <main+0xc0>
		break;

		case OPEN_DOOR:
		{
			/* receiving password from ECU1 */
			if(getPass() == TRUE)
     cac:	0e 94 a1 07 	call	0xf42	; 0xf42 <getPass>
     cb0:	81 30       	cpi	r24, 0x01	; 1
     cb2:	31 f4       	brne	.+12     	; 0xcc0 <main+0x17a>
			{
				/* changing state of application to door unlocking */
				state = DOOR_UNLOCKING;
     cb4:	84 e0       	ldi	r24, 0x04	; 4
     cb6:	80 93 8e 00 	sts	0x008E, r24

				wrongPassCounter = 0;	/* clearing wrong pass counter */
     cba:	10 92 8c 00 	sts	0x008C, r1
     cbe:	a3 cf       	rjmp	.-186    	; 0xc06 <main+0xc0>
			}
			else
			{
				wrongPass();
     cc0:	0e 94 8c 07 	call	0xf18	; 0xf18 <wrongPass>
     cc4:	a0 cf       	rjmp	.-192    	; 0xc06 <main+0xc0>
		break;

		case CHANGE_PASS:
		{
			/* receiving password from ECU1 */
			if(getPass() == TRUE)
     cc6:	0e 94 a1 07 	call	0xf42	; 0xf42 <getPass>
     cca:	81 30       	cpi	r24, 0x01	; 1
     ccc:	29 f4       	brne	.+10     	; 0xcd8 <main+0x192>
			{
				/* changing state of application to create password */
				state = CREATE_PASS;
     cce:	10 92 8e 00 	sts	0x008E, r1
				wrongPassCounter = 0;	/* clearing wrong pass counter */
     cd2:	10 92 8c 00 	sts	0x008C, r1
     cd6:	97 cf       	rjmp	.-210    	; 0xc06 <main+0xc0>
			}
			else
			{
				wrongPass();
     cd8:	0e 94 8c 07 	call	0xf18	; 0xf18 <wrongPass>
     cdc:	94 cf       	rjmp	.-216    	; 0xc06 <main+0xc0>

		case DOOR_UNLOCKING:
		{
			/* setting a freeze flag to hold application
			 * while door is opening and closing */
			freezeFlag = 1;
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	80 93 8d 00 	sts	0x008D, r24

			Timer1_ConfigType timer1Config = {0, 10, F_CPU_1024, TIMER1_COMPARE};
     ce4:	ce 01       	movw	r24, r28
     ce6:	0e 96       	adiw	r24, 0x0e	; 14
     ce8:	9f a3       	std	Y+39, r25	; 0x27
     cea:	8e a3       	std	Y+38, r24	; 0x26
     cec:	ee e6       	ldi	r30, 0x6E	; 110
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	f9 a7       	std	Y+41, r31	; 0x29
     cf2:	e8 a7       	std	Y+40, r30	; 0x28
     cf4:	f6 e0       	ldi	r31, 0x06	; 6
     cf6:	fa a7       	std	Y+42, r31	; 0x2a
     cf8:	e8 a5       	ldd	r30, Y+40	; 0x28
     cfa:	f9 a5       	ldd	r31, Y+41	; 0x29
     cfc:	00 80       	ld	r0, Z
     cfe:	28 a5       	ldd	r18, Y+40	; 0x28
     d00:	39 a5       	ldd	r19, Y+41	; 0x29
     d02:	2f 5f       	subi	r18, 0xFF	; 255
     d04:	3f 4f       	sbci	r19, 0xFF	; 255
     d06:	39 a7       	std	Y+41, r19	; 0x29
     d08:	28 a7       	std	Y+40, r18	; 0x28
     d0a:	ee a1       	ldd	r30, Y+38	; 0x26
     d0c:	ff a1       	ldd	r31, Y+39	; 0x27
     d0e:	00 82       	st	Z, r0
     d10:	2e a1       	ldd	r18, Y+38	; 0x26
     d12:	3f a1       	ldd	r19, Y+39	; 0x27
     d14:	2f 5f       	subi	r18, 0xFF	; 255
     d16:	3f 4f       	sbci	r19, 0xFF	; 255
     d18:	3f a3       	std	Y+39, r19	; 0x27
     d1a:	2e a3       	std	Y+38, r18	; 0x26
     d1c:	3a a5       	ldd	r19, Y+42	; 0x2a
     d1e:	31 50       	subi	r19, 0x01	; 1
     d20:	3a a7       	std	Y+42, r19	; 0x2a
     d22:	8a a5       	ldd	r24, Y+42	; 0x2a
     d24:	88 23       	and	r24, r24
     d26:	41 f7       	brne	.-48     	; 0xcf8 <main+0x1b2>
			TIMER1_setCallBack(openDoorCallBackFunction);
     d28:	89 ed       	ldi	r24, 0xD9	; 217
     d2a:	96 e0       	ldi	r25, 0x06	; 6
     d2c:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <TIMER1_setCallBack>

			/* initializing time with specific configurations */
			TIMER1_init(&timer1Config);
     d30:	ce 01       	movw	r24, r28
     d32:	0e 96       	adiw	r24, 0x0e	; 14
     d34:	0e 94 5f 14 	call	0x28be	; 0x28be <TIMER1_init>

			/* loop until door activity is complete */
			while(freezeFlag == 1);
     d38:	80 91 8d 00 	lds	r24, 0x008D
     d3c:	81 30       	cpi	r24, 0x01	; 1
     d3e:	e1 f3       	breq	.-8      	; 0xd38 <main+0x1f2>

			/* setting state of application to the main state */
			state = MAIN_SCREEN;
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	80 93 8e 00 	sts	0x008E, r24
     d46:	5f cf       	rjmp	.-322    	; 0xc06 <main+0xc0>

		case ALARM:
		{
			/* setting a freeze flag to hold application
			 * while alarm is on */
			freezeFlag = 1;
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	80 93 8d 00 	sts	0x008D, r24
			Timer1_ConfigType timer1Config = {65525, 0, F_CPU_1024, TIMER1_OVERFLOW};
     d4e:	fe 01       	movw	r30, r28
     d50:	74 96       	adiw	r30, 0x14	; 20
     d52:	fc a7       	std	Y+44, r31	; 0x2c
     d54:	eb a7       	std	Y+43, r30	; 0x2b
     d56:	28 e6       	ldi	r18, 0x68	; 104
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	3e a7       	std	Y+46, r19	; 0x2e
     d5c:	2d a7       	std	Y+45, r18	; 0x2d
     d5e:	36 e0       	ldi	r19, 0x06	; 6
     d60:	3f a7       	std	Y+47, r19	; 0x2f
     d62:	ed a5       	ldd	r30, Y+45	; 0x2d
     d64:	fe a5       	ldd	r31, Y+46	; 0x2e
     d66:	00 80       	ld	r0, Z
     d68:	2d a5       	ldd	r18, Y+45	; 0x2d
     d6a:	3e a5       	ldd	r19, Y+46	; 0x2e
     d6c:	2f 5f       	subi	r18, 0xFF	; 255
     d6e:	3f 4f       	sbci	r19, 0xFF	; 255
     d70:	3e a7       	std	Y+46, r19	; 0x2e
     d72:	2d a7       	std	Y+45, r18	; 0x2d
     d74:	eb a5       	ldd	r30, Y+43	; 0x2b
     d76:	fc a5       	ldd	r31, Y+44	; 0x2c
     d78:	00 82       	st	Z, r0
     d7a:	2b a5       	ldd	r18, Y+43	; 0x2b
     d7c:	3c a5       	ldd	r19, Y+44	; 0x2c
     d7e:	2f 5f       	subi	r18, 0xFF	; 255
     d80:	3f 4f       	sbci	r19, 0xFF	; 255
     d82:	3c a7       	std	Y+44, r19	; 0x2c
     d84:	2b a7       	std	Y+43, r18	; 0x2b
     d86:	3f a5       	ldd	r19, Y+47	; 0x2f
     d88:	31 50       	subi	r19, 0x01	; 1
     d8a:	3f a7       	std	Y+47, r19	; 0x2f
     d8c:	8f a5       	ldd	r24, Y+47	; 0x2f
     d8e:	88 23       	and	r24, r24
     d90:	41 f7       	brne	.-48     	; 0xd62 <main+0x21c>
			TIMER1_setCallBack(alarmCallBackFunction);
     d92:	8e e3       	ldi	r24, 0x3E	; 62
     d94:	97 e0       	ldi	r25, 0x07	; 7
     d96:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <TIMER1_setCallBack>

			/* initializing time with specific configurations */
			TIMER1_init(&timer1Config);
     d9a:	ce 01       	movw	r24, r28
     d9c:	44 96       	adiw	r24, 0x14	; 20
     d9e:	0e 94 5f 14 	call	0x28be	; 0x28be <TIMER1_init>

			/* loop until alarm activity is complete */
			while(freezeFlag == 1);
     da2:	80 91 8d 00 	lds	r24, 0x008D
     da6:	81 30       	cpi	r24, 0x01	; 1
     da8:	e1 f3       	breq	.-8      	; 0xda2 <main+0x25c>

			/* setting state of application to the main state */
			state = MAIN_SCREEN;
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	80 93 8e 00 	sts	0x008E, r24
     db0:	2a cf       	rjmp	.-428    	; 0xc06 <main+0xc0>

00000db2 <openDoorCallBackFunction>:
 *                             Functions Definitions                           *
 *******************************************************************************/


void openDoorCallBackFunction(void)
{
     db2:	df 93       	push	r29
     db4:	cf 93       	push	r28
     db6:	cd b7       	in	r28, 0x3d	; 61
     db8:	de b7       	in	r29, 0x3e	; 62
     dba:	2b 97       	sbiw	r28, 0x0b	; 11
     dbc:	0f b6       	in	r0, 0x3f	; 63
     dbe:	f8 94       	cli
     dc0:	de bf       	out	0x3e, r29	; 62
     dc2:	0f be       	out	0x3f, r0	; 63
     dc4:	cd bf       	out	0x3d, r28	; 61
	static uint8 tick = 0;
	tick++;		/* Increment interrupt counter */
     dc6:	80 91 8f 00 	lds	r24, 0x008F
     dca:	8f 5f       	subi	r24, 0xFF	; 255
     dcc:	80 93 8f 00 	sts	0x008F, r24

	if(tick == 1)
     dd0:	80 91 8f 00 	lds	r24, 0x008F
     dd4:	81 30       	cpi	r24, 0x01	; 1
     dd6:	49 f5       	brne	.+82     	; 0xe2a <openDoorCallBackFunction+0x78>
	{
		/* configuring timer with compare mood to
		 * generate an interrupt request every 3 seconds */
		Timer1_ConfigType timer1Config = {0, 23438, F_CPU_1024, TIMER1_COMPARE};
     dd8:	ce 01       	movw	r24, r28
     dda:	01 96       	adiw	r24, 0x01	; 1
     ddc:	98 87       	std	Y+8, r25	; 0x08
     dde:	8f 83       	std	Y+7, r24	; 0x07
     de0:	e0 e8       	ldi	r30, 0x80	; 128
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	fa 87       	std	Y+10, r31	; 0x0a
     de6:	e9 87       	std	Y+9, r30	; 0x09
     de8:	f6 e0       	ldi	r31, 0x06	; 6
     dea:	fb 87       	std	Y+11, r31	; 0x0b
     dec:	e9 85       	ldd	r30, Y+9	; 0x09
     dee:	fa 85       	ldd	r31, Y+10	; 0x0a
     df0:	00 80       	ld	r0, Z
     df2:	89 85       	ldd	r24, Y+9	; 0x09
     df4:	9a 85       	ldd	r25, Y+10	; 0x0a
     df6:	01 96       	adiw	r24, 0x01	; 1
     df8:	9a 87       	std	Y+10, r25	; 0x0a
     dfa:	89 87       	std	Y+9, r24	; 0x09
     dfc:	ef 81       	ldd	r30, Y+7	; 0x07
     dfe:	f8 85       	ldd	r31, Y+8	; 0x08
     e00:	00 82       	st	Z, r0
     e02:	8f 81       	ldd	r24, Y+7	; 0x07
     e04:	98 85       	ldd	r25, Y+8	; 0x08
     e06:	01 96       	adiw	r24, 0x01	; 1
     e08:	98 87       	std	Y+8, r25	; 0x08
     e0a:	8f 83       	std	Y+7, r24	; 0x07
     e0c:	9b 85       	ldd	r25, Y+11	; 0x0b
     e0e:	91 50       	subi	r25, 0x01	; 1
     e10:	9b 87       	std	Y+11, r25	; 0x0b
     e12:	eb 85       	ldd	r30, Y+11	; 0x0b
     e14:	ee 23       	and	r30, r30
     e16:	51 f7       	brne	.-44     	; 0xdec <openDoorCallBackFunction+0x3a>
		TIMER1_init(&timer1Config);
     e18:	ce 01       	movw	r24, r28
     e1a:	01 96       	adiw	r24, 0x01	; 1
     e1c:	0e 94 5f 14 	call	0x28be	; 0x28be <TIMER1_init>

		DcMotor_Rotate(DC_MOTOR_CW,100);	/* motor rotating clockwise with maximum speed */
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	64 e6       	ldi	r22, 0x64	; 100
     e24:	0e 94 a8 09 	call	0x1350	; 0x1350 <DcMotor_Rotate>
     e28:	20 c0       	rjmp	.+64     	; 0xe6a <openDoorCallBackFunction+0xb8>
	}
	else if(tick == 6)
     e2a:	80 91 8f 00 	lds	r24, 0x008F
     e2e:	86 30       	cpi	r24, 0x06	; 6
     e30:	29 f4       	brne	.+10     	; 0xe3c <openDoorCallBackFunction+0x8a>
	{
		DcMotor_Rotate(DC_MOTOR_STOP,0);	/* motor stop */
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	60 e0       	ldi	r22, 0x00	; 0
     e36:	0e 94 a8 09 	call	0x1350	; 0x1350 <DcMotor_Rotate>
     e3a:	17 c0       	rjmp	.+46     	; 0xe6a <openDoorCallBackFunction+0xb8>
	}
	else if(tick == 7)
     e3c:	80 91 8f 00 	lds	r24, 0x008F
     e40:	87 30       	cpi	r24, 0x07	; 7
     e42:	29 f4       	brne	.+10     	; 0xe4e <openDoorCallBackFunction+0x9c>
	{
		DcMotor_Rotate(DC_MOTOR_CCW,100);	/* motor rotating counter clockwise with maximum speed */
     e44:	82 e0       	ldi	r24, 0x02	; 2
     e46:	64 e6       	ldi	r22, 0x64	; 100
     e48:	0e 94 a8 09 	call	0x1350	; 0x1350 <DcMotor_Rotate>
     e4c:	0e c0       	rjmp	.+28     	; 0xe6a <openDoorCallBackFunction+0xb8>
	}
	else if(tick == 12)
     e4e:	80 91 8f 00 	lds	r24, 0x008F
     e52:	8c 30       	cpi	r24, 0x0C	; 12
     e54:	51 f4       	brne	.+20     	; 0xe6a <openDoorCallBackFunction+0xb8>
	{
		DcMotor_Rotate(DC_MOTOR_STOP,0);	/* motor stop */
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	60 e0       	ldi	r22, 0x00	; 0
     e5a:	0e 94 a8 09 	call	0x1350	; 0x1350 <DcMotor_Rotate>

		tick = 0;				/* clear interrupt counter */
     e5e:	10 92 8f 00 	sts	0x008F, r1

		freezeFlag = 0;			/* clear freeze flag */
     e62:	10 92 8d 00 	sts	0x008D, r1

		TIMER1_deInit();		/* de-initializing timer */
     e66:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <TIMER1_deInit>
	}
}
     e6a:	2b 96       	adiw	r28, 0x0b	; 11
     e6c:	0f b6       	in	r0, 0x3f	; 63
     e6e:	f8 94       	cli
     e70:	de bf       	out	0x3e, r29	; 62
     e72:	0f be       	out	0x3f, r0	; 63
     e74:	cd bf       	out	0x3d, r28	; 61
     e76:	cf 91       	pop	r28
     e78:	df 91       	pop	r29
     e7a:	08 95       	ret

00000e7c <alarmCallBackFunction>:

/********************************************************************************/

void alarmCallBackFunction(void)
{
     e7c:	df 93       	push	r29
     e7e:	cf 93       	push	r28
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62
     e84:	2b 97       	sbiw	r28, 0x0b	; 11
     e86:	0f b6       	in	r0, 0x3f	; 63
     e88:	f8 94       	cli
     e8a:	de bf       	out	0x3e, r29	; 62
     e8c:	0f be       	out	0x3f, r0	; 63
     e8e:	cd bf       	out	0x3d, r28	; 61
	static uint8 tick = 0;
	tick++;		/* Increment interrupt counter */
     e90:	80 91 90 00 	lds	r24, 0x0090
     e94:	8f 5f       	subi	r24, 0xFF	; 255
     e96:	80 93 90 00 	sts	0x0090, r24

	if(tick == 1)
     e9a:	80 91 90 00 	lds	r24, 0x0090
     e9e:	81 30       	cpi	r24, 0x01	; 1
     ea0:	31 f5       	brne	.+76     	; 0xeee <alarmCallBackFunction+0x72>
	{
		/* configuring timer with compare mood to
		 * generate an interrupt request every 8 seconds */
		Timer1_ConfigType timer1Config = {0, 0, F_CPU_1024, TIMER1_OVERFLOW};
     ea2:	ce 01       	movw	r24, r28
     ea4:	01 96       	adiw	r24, 0x01	; 1
     ea6:	98 87       	std	Y+8, r25	; 0x08
     ea8:	8f 83       	std	Y+7, r24	; 0x07
     eaa:	e6 e8       	ldi	r30, 0x86	; 134
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	fa 87       	std	Y+10, r31	; 0x0a
     eb0:	e9 87       	std	Y+9, r30	; 0x09
     eb2:	f6 e0       	ldi	r31, 0x06	; 6
     eb4:	fb 87       	std	Y+11, r31	; 0x0b
     eb6:	e9 85       	ldd	r30, Y+9	; 0x09
     eb8:	fa 85       	ldd	r31, Y+10	; 0x0a
     eba:	00 80       	ld	r0, Z
     ebc:	89 85       	ldd	r24, Y+9	; 0x09
     ebe:	9a 85       	ldd	r25, Y+10	; 0x0a
     ec0:	01 96       	adiw	r24, 0x01	; 1
     ec2:	9a 87       	std	Y+10, r25	; 0x0a
     ec4:	89 87       	std	Y+9, r24	; 0x09
     ec6:	ef 81       	ldd	r30, Y+7	; 0x07
     ec8:	f8 85       	ldd	r31, Y+8	; 0x08
     eca:	00 82       	st	Z, r0
     ecc:	8f 81       	ldd	r24, Y+7	; 0x07
     ece:	98 85       	ldd	r25, Y+8	; 0x08
     ed0:	01 96       	adiw	r24, 0x01	; 1
     ed2:	98 87       	std	Y+8, r25	; 0x08
     ed4:	8f 83       	std	Y+7, r24	; 0x07
     ed6:	9b 85       	ldd	r25, Y+11	; 0x0b
     ed8:	91 50       	subi	r25, 0x01	; 1
     eda:	9b 87       	std	Y+11, r25	; 0x0b
     edc:	eb 85       	ldd	r30, Y+11	; 0x0b
     ede:	ee 23       	and	r30, r30
     ee0:	51 f7       	brne	.-44     	; 0xeb6 <alarmCallBackFunction+0x3a>
		TIMER1_init(&timer1Config);
     ee2:	ce 01       	movw	r24, r28
     ee4:	01 96       	adiw	r24, 0x01	; 1
     ee6:	0e 94 5f 14 	call	0x28be	; 0x28be <TIMER1_init>

		BUZZER_on();	/* enabling buzzer */
     eea:	0e 94 75 09 	call	0x12ea	; 0x12ea <BUZZER_on>
	}
	if(tick == 7)
     eee:	80 91 90 00 	lds	r24, 0x0090
     ef2:	87 30       	cpi	r24, 0x07	; 7
     ef4:	41 f4       	brne	.+16     	; 0xf06 <alarmCallBackFunction+0x8a>
	{
		BUZZER_off();			/* disabling buzzer */
     ef6:	0e 94 81 09 	call	0x1302	; 0x1302 <BUZZER_off>

		tick = 0;				/* clear interrupt counter */
     efa:	10 92 90 00 	sts	0x0090, r1

		freezeFlag = 0;			/* clear freeze flag */
     efe:	10 92 8d 00 	sts	0x008D, r1

		TIMER1_deInit();		/* de-initializing timer */
     f02:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <TIMER1_deInit>
	}
}
     f06:	2b 96       	adiw	r28, 0x0b	; 11
     f08:	0f b6       	in	r0, 0x3f	; 63
     f0a:	f8 94       	cli
     f0c:	de bf       	out	0x3e, r29	; 62
     f0e:	0f be       	out	0x3f, r0	; 63
     f10:	cd bf       	out	0x3d, r28	; 61
     f12:	cf 91       	pop	r28
     f14:	df 91       	pop	r29
     f16:	08 95       	ret

00000f18 <wrongPass>:

/********************************************************************************/

void wrongPass(void)
{
     f18:	df 93       	push	r29
     f1a:	cf 93       	push	r28
     f1c:	cd b7       	in	r28, 0x3d	; 61
     f1e:	de b7       	in	r29, 0x3e	; 62
	wrongPassCounter++;		/* Incrementing wrong password counter */
     f20:	80 91 8c 00 	lds	r24, 0x008C
     f24:	8f 5f       	subi	r24, 0xFF	; 255
     f26:	80 93 8c 00 	sts	0x008C, r24

	/* if counter reaches 3 which is the maximum number
	 * of wrong password input change state into alarm state */
	if(wrongPassCounter == 3)
     f2a:	80 91 8c 00 	lds	r24, 0x008C
     f2e:	83 30       	cpi	r24, 0x03	; 3
     f30:	29 f4       	brne	.+10     	; 0xf3c <wrongPass+0x24>
	{
		state = ALARM;
     f32:	85 e0       	ldi	r24, 0x05	; 5
     f34:	80 93 8e 00 	sts	0x008E, r24
		wrongPassCounter = 0;
     f38:	10 92 8c 00 	sts	0x008C, r1
	}
}
     f3c:	cf 91       	pop	r28
     f3e:	df 91       	pop	r29
     f40:	08 95       	ret

00000f42 <getPass>:

/********************************************************************************/

uint8 getPass (void)
{
     f42:	0f 93       	push	r16
     f44:	1f 93       	push	r17
     f46:	df 93       	push	r29
     f48:	cf 93       	push	r28
     f4a:	cd b7       	in	r28, 0x3d	; 61
     f4c:	de b7       	in	r29, 0x3e	; 62
     f4e:	6a 97       	sbiw	r28, 0x1a	; 26
     f50:	0f b6       	in	r0, 0x3f	; 63
     f52:	f8 94       	cli
     f54:	de bf       	out	0x3e, r29	; 62
     f56:	0f be       	out	0x3f, r0	; 63
     f58:	cd bf       	out	0x3d, r28	; 61
	/*variable decelerations
	 * pass		---> to store password received from used
	 * real		---> to store real password fetched from EEPROM memory
	 * passwordMatch	---> flag of password match
	 */
	uint8 pass[5],real[5],passwordMatch = TRUE;
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	88 8b       	std	Y+16, r24	; 0x10
	for(uint8 i = 0; i < 5; i++)
     f5e:	1f 86       	std	Y+15, r1	; 0x0f
     f60:	ae c0       	rjmp	.+348    	; 0x10be <getPass+0x17c>
	{
		/* ECU2 waits for ECU1 to ask it then respond
		 * then receive the two passwords */
		while(UART_recieveByte() != MC1_ASK);
     f62:	0e 94 03 17 	call	0x2e06	; 0x2e06 <UART_recieveByte>
     f66:	83 30       	cpi	r24, 0x03	; 3
     f68:	e1 f7       	brne	.-8      	; 0xf62 <getPass+0x20>
		UART_sendByte(MC2_READY);
     f6a:	84 e0       	ldi	r24, 0x04	; 4
     f6c:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <UART_sendByte>
		pass[i] = UART_recieveByte();
     f70:	8f 85       	ldd	r24, Y+15	; 0x0f
     f72:	08 2f       	mov	r16, r24
     f74:	10 e0       	ldi	r17, 0x00	; 0
     f76:	0e 94 03 17 	call	0x2e06	; 0x2e06 <UART_recieveByte>
     f7a:	28 2f       	mov	r18, r24
     f7c:	ce 01       	movw	r24, r28
     f7e:	41 96       	adiw	r24, 0x11	; 17
     f80:	fc 01       	movw	r30, r24
     f82:	e0 0f       	add	r30, r16
     f84:	f1 1f       	adc	r31, r17
     f86:	20 83       	st	Z, r18

		/* get saved password from memory */
		EEPROM_readByte(MEMORY_ADDRESS+i,&real[i]);
     f88:	8f 85       	ldd	r24, Y+15	; 0x0f
     f8a:	88 2f       	mov	r24, r24
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	01 96       	adiw	r24, 0x01	; 1
     f90:	ac 01       	movw	r20, r24
     f92:	8f 85       	ldd	r24, Y+15	; 0x0f
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	9e 01       	movw	r18, r28
     f9a:	2a 5e       	subi	r18, 0xEA	; 234
     f9c:	3f 4f       	sbci	r19, 0xFF	; 255
     f9e:	28 0f       	add	r18, r24
     fa0:	39 1f       	adc	r19, r25
     fa2:	ca 01       	movw	r24, r20
     fa4:	b9 01       	movw	r22, r18
     fa6:	0e 94 41 0a 	call	0x1482	; 0x1482 <EEPROM_readByte>
     faa:	80 e0       	ldi	r24, 0x00	; 0
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	a0 e7       	ldi	r26, 0x70	; 112
     fb0:	b1 e4       	ldi	r27, 0x41	; 65
     fb2:	8b 87       	std	Y+11, r24	; 0x0b
     fb4:	9c 87       	std	Y+12, r25	; 0x0c
     fb6:	ad 87       	std	Y+13, r26	; 0x0d
     fb8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fba:	6b 85       	ldd	r22, Y+11	; 0x0b
     fbc:	7c 85       	ldd	r23, Y+12	; 0x0c
     fbe:	8d 85       	ldd	r24, Y+13	; 0x0d
     fc0:	9e 85       	ldd	r25, Y+14	; 0x0e
     fc2:	20 e0       	ldi	r18, 0x00	; 0
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	4a ef       	ldi	r20, 0xFA	; 250
     fc8:	54 e4       	ldi	r21, 0x44	; 68
     fca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fce:	dc 01       	movw	r26, r24
     fd0:	cb 01       	movw	r24, r22
     fd2:	8f 83       	std	Y+7, r24	; 0x07
     fd4:	98 87       	std	Y+8, r25	; 0x08
     fd6:	a9 87       	std	Y+9, r26	; 0x09
     fd8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fda:	6f 81       	ldd	r22, Y+7	; 0x07
     fdc:	78 85       	ldd	r23, Y+8	; 0x08
     fde:	89 85       	ldd	r24, Y+9	; 0x09
     fe0:	9a 85       	ldd	r25, Y+10	; 0x0a
     fe2:	20 e0       	ldi	r18, 0x00	; 0
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	40 e8       	ldi	r20, 0x80	; 128
     fe8:	5f e3       	ldi	r21, 0x3F	; 63
     fea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fee:	88 23       	and	r24, r24
     ff0:	2c f4       	brge	.+10     	; 0xffc <getPass+0xba>
		__ticks = 1;
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	9e 83       	std	Y+6, r25	; 0x06
     ff8:	8d 83       	std	Y+5, r24	; 0x05
     ffa:	3f c0       	rjmp	.+126    	; 0x107a <getPass+0x138>
	else if (__tmp > 65535)
     ffc:	6f 81       	ldd	r22, Y+7	; 0x07
     ffe:	78 85       	ldd	r23, Y+8	; 0x08
    1000:	89 85       	ldd	r24, Y+9	; 0x09
    1002:	9a 85       	ldd	r25, Y+10	; 0x0a
    1004:	20 e0       	ldi	r18, 0x00	; 0
    1006:	3f ef       	ldi	r19, 0xFF	; 255
    1008:	4f e7       	ldi	r20, 0x7F	; 127
    100a:	57 e4       	ldi	r21, 0x47	; 71
    100c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1010:	18 16       	cp	r1, r24
    1012:	4c f5       	brge	.+82     	; 0x1066 <getPass+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1014:	6b 85       	ldd	r22, Y+11	; 0x0b
    1016:	7c 85       	ldd	r23, Y+12	; 0x0c
    1018:	8d 85       	ldd	r24, Y+13	; 0x0d
    101a:	9e 85       	ldd	r25, Y+14	; 0x0e
    101c:	20 e0       	ldi	r18, 0x00	; 0
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	40 e2       	ldi	r20, 0x20	; 32
    1022:	51 e4       	ldi	r21, 0x41	; 65
    1024:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1028:	dc 01       	movw	r26, r24
    102a:	cb 01       	movw	r24, r22
    102c:	bc 01       	movw	r22, r24
    102e:	cd 01       	movw	r24, r26
    1030:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1034:	dc 01       	movw	r26, r24
    1036:	cb 01       	movw	r24, r22
    1038:	9e 83       	std	Y+6, r25	; 0x06
    103a:	8d 83       	std	Y+5, r24	; 0x05
    103c:	0f c0       	rjmp	.+30     	; 0x105c <getPass+0x11a>
    103e:	88 ec       	ldi	r24, 0xC8	; 200
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	9c 83       	std	Y+4, r25	; 0x04
    1044:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1046:	8b 81       	ldd	r24, Y+3	; 0x03
    1048:	9c 81       	ldd	r25, Y+4	; 0x04
    104a:	01 97       	sbiw	r24, 0x01	; 1
    104c:	f1 f7       	brne	.-4      	; 0x104a <getPass+0x108>
    104e:	9c 83       	std	Y+4, r25	; 0x04
    1050:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1052:	8d 81       	ldd	r24, Y+5	; 0x05
    1054:	9e 81       	ldd	r25, Y+6	; 0x06
    1056:	01 97       	sbiw	r24, 0x01	; 1
    1058:	9e 83       	std	Y+6, r25	; 0x06
    105a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    105c:	8d 81       	ldd	r24, Y+5	; 0x05
    105e:	9e 81       	ldd	r25, Y+6	; 0x06
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	69 f7       	brne	.-38     	; 0x103e <getPass+0xfc>
    1064:	14 c0       	rjmp	.+40     	; 0x108e <getPass+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1066:	6f 81       	ldd	r22, Y+7	; 0x07
    1068:	78 85       	ldd	r23, Y+8	; 0x08
    106a:	89 85       	ldd	r24, Y+9	; 0x09
    106c:	9a 85       	ldd	r25, Y+10	; 0x0a
    106e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1072:	dc 01       	movw	r26, r24
    1074:	cb 01       	movw	r24, r22
    1076:	9e 83       	std	Y+6, r25	; 0x06
    1078:	8d 83       	std	Y+5, r24	; 0x05
    107a:	8d 81       	ldd	r24, Y+5	; 0x05
    107c:	9e 81       	ldd	r25, Y+6	; 0x06
    107e:	9a 83       	std	Y+2, r25	; 0x02
    1080:	89 83       	std	Y+1, r24	; 0x01
    1082:	89 81       	ldd	r24, Y+1	; 0x01
    1084:	9a 81       	ldd	r25, Y+2	; 0x02
    1086:	01 97       	sbiw	r24, 0x01	; 1
    1088:	f1 f7       	brne	.-4      	; 0x1086 <getPass+0x144>
    108a:	9a 83       	std	Y+2, r25	; 0x02
    108c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(15);

		if(real[i] != pass[i])	/* comparing two passwords */
    108e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1090:	28 2f       	mov	r18, r24
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	ce 01       	movw	r24, r28
    1096:	46 96       	adiw	r24, 0x16	; 22
    1098:	fc 01       	movw	r30, r24
    109a:	e2 0f       	add	r30, r18
    109c:	f3 1f       	adc	r31, r19
    109e:	40 81       	ld	r20, Z
    10a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    10a2:	28 2f       	mov	r18, r24
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	ce 01       	movw	r24, r28
    10a8:	41 96       	adiw	r24, 0x11	; 17
    10aa:	fc 01       	movw	r30, r24
    10ac:	e2 0f       	add	r30, r18
    10ae:	f3 1f       	adc	r31, r19
    10b0:	80 81       	ld	r24, Z
    10b2:	48 17       	cp	r20, r24
    10b4:	09 f0       	breq	.+2      	; 0x10b8 <getPass+0x176>
		{
			passwordMatch = FALSE;
    10b6:	18 8a       	std	Y+16, r1	; 0x10
	 * pass		---> to store password received from used
	 * real		---> to store real password fetched from EEPROM memory
	 * passwordMatch	---> flag of password match
	 */
	uint8 pass[5],real[5],passwordMatch = TRUE;
	for(uint8 i = 0; i < 5; i++)
    10b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    10ba:	8f 5f       	subi	r24, 0xFF	; 255
    10bc:	8f 87       	std	Y+15, r24	; 0x0f
    10be:	8f 85       	ldd	r24, Y+15	; 0x0f
    10c0:	85 30       	cpi	r24, 0x05	; 5
    10c2:	08 f4       	brcc	.+2      	; 0x10c6 <getPass+0x184>
    10c4:	4e cf       	rjmp	.-356    	; 0xf62 <getPass+0x20>
		if(real[i] != pass[i])	/* comparing two passwords */
		{
			passwordMatch = FALSE;
		}
	}
	return passwordMatch;
    10c6:	88 89       	ldd	r24, Y+16	; 0x10
}
    10c8:	6a 96       	adiw	r28, 0x1a	; 26
    10ca:	0f b6       	in	r0, 0x3f	; 63
    10cc:	f8 94       	cli
    10ce:	de bf       	out	0x3e, r29	; 62
    10d0:	0f be       	out	0x3f, r0	; 63
    10d2:	cd bf       	out	0x3d, r28	; 61
    10d4:	cf 91       	pop	r28
    10d6:	df 91       	pop	r29
    10d8:	1f 91       	pop	r17
    10da:	0f 91       	pop	r16
    10dc:	08 95       	ret

000010de <createPass>:

/********************************************************************************/

void createPass(void)
{
    10de:	0f 93       	push	r16
    10e0:	1f 93       	push	r17
    10e2:	df 93       	push	r29
    10e4:	cf 93       	push	r28
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62
    10ea:	6b 97       	sbiw	r28, 0x1b	; 27
    10ec:	0f b6       	in	r0, 0x3f	; 63
    10ee:	f8 94       	cli
    10f0:	de bf       	out	0x3e, r29	; 62
    10f2:	0f be       	out	0x3f, r0	; 63
    10f4:	cd bf       	out	0x3d, r28	; 61
	/* variable declerations
	 * pass 		---> 	  to store password sent from user
	 * repass		--->	  to store re-entred password sent from user
	 * unMatch		--->	  flag that is set when password don't match
	 */
	uint8 pass[5],repass[5],unMatch = FALSE;;
    10f6:	19 8a       	std	Y+17, r1	; 0x11
	for(uint8 i = 0; i < 5; i++){
    10f8:	18 8a       	std	Y+16, r1	; 0x10
    10fa:	3f c0       	rjmp	.+126    	; 0x117a <createPass+0x9c>
		/* ECU2 waits for ECU1 to ask it then respond
		 * then receive the two passwords */
		while(UART_recieveByte() != MC1_ASK);
    10fc:	0e 94 03 17 	call	0x2e06	; 0x2e06 <UART_recieveByte>
    1100:	83 30       	cpi	r24, 0x03	; 3
    1102:	e1 f7       	brne	.-8      	; 0x10fc <createPass+0x1e>
		UART_sendByte(MC2_READY);
    1104:	84 e0       	ldi	r24, 0x04	; 4
    1106:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <UART_sendByte>
		pass[i] = UART_recieveByte();
    110a:	88 89       	ldd	r24, Y+16	; 0x10
    110c:	08 2f       	mov	r16, r24
    110e:	10 e0       	ldi	r17, 0x00	; 0
    1110:	0e 94 03 17 	call	0x2e06	; 0x2e06 <UART_recieveByte>
    1114:	28 2f       	mov	r18, r24
    1116:	ce 01       	movw	r24, r28
    1118:	42 96       	adiw	r24, 0x12	; 18
    111a:	fc 01       	movw	r30, r24
    111c:	e0 0f       	add	r30, r16
    111e:	f1 1f       	adc	r31, r17
    1120:	20 83       	st	Z, r18

		while(UART_recieveByte() != MC1_ASK);
    1122:	0e 94 03 17 	call	0x2e06	; 0x2e06 <UART_recieveByte>
    1126:	83 30       	cpi	r24, 0x03	; 3
    1128:	e1 f7       	brne	.-8      	; 0x1122 <createPass+0x44>
		UART_sendByte(MC2_READY);
    112a:	84 e0       	ldi	r24, 0x04	; 4
    112c:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <UART_sendByte>
		repass[i] = UART_recieveByte();
    1130:	88 89       	ldd	r24, Y+16	; 0x10
    1132:	08 2f       	mov	r16, r24
    1134:	10 e0       	ldi	r17, 0x00	; 0
    1136:	0e 94 03 17 	call	0x2e06	; 0x2e06 <UART_recieveByte>
    113a:	28 2f       	mov	r18, r24
    113c:	ce 01       	movw	r24, r28
    113e:	47 96       	adiw	r24, 0x17	; 23
    1140:	fc 01       	movw	r30, r24
    1142:	e0 0f       	add	r30, r16
    1144:	f1 1f       	adc	r31, r17
    1146:	20 83       	st	Z, r18

		/* check if two password don't match */
		if(repass[i] != pass[i])
    1148:	88 89       	ldd	r24, Y+16	; 0x10
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	ce 01       	movw	r24, r28
    1150:	47 96       	adiw	r24, 0x17	; 23
    1152:	fc 01       	movw	r30, r24
    1154:	e2 0f       	add	r30, r18
    1156:	f3 1f       	adc	r31, r19
    1158:	40 81       	ld	r20, Z
    115a:	88 89       	ldd	r24, Y+16	; 0x10
    115c:	28 2f       	mov	r18, r24
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	ce 01       	movw	r24, r28
    1162:	42 96       	adiw	r24, 0x12	; 18
    1164:	fc 01       	movw	r30, r24
    1166:	e2 0f       	add	r30, r18
    1168:	f3 1f       	adc	r31, r19
    116a:	80 81       	ld	r24, Z
    116c:	48 17       	cp	r20, r24
    116e:	11 f0       	breq	.+4      	; 0x1174 <createPass+0x96>
		{
			unMatch = TRUE;	 /* setting un-match flag */
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	89 8b       	std	Y+17, r24	; 0x11
	 * pass 		---> 	  to store password sent from user
	 * repass		--->	  to store re-entred password sent from user
	 * unMatch		--->	  flag that is set when password don't match
	 */
	uint8 pass[5],repass[5],unMatch = FALSE;;
	for(uint8 i = 0; i < 5; i++){
    1174:	88 89       	ldd	r24, Y+16	; 0x10
    1176:	8f 5f       	subi	r24, 0xFF	; 255
    1178:	88 8b       	std	Y+16, r24	; 0x10
    117a:	88 89       	ldd	r24, Y+16	; 0x10
    117c:	85 30       	cpi	r24, 0x05	; 5
    117e:	08 f4       	brcc	.+2      	; 0x1182 <createPass+0xa4>
    1180:	bd cf       	rjmp	.-134    	; 0x10fc <createPass+0x1e>
		{
			unMatch = TRUE;	 /* setting un-match flag */
		}
	}
	/* check on state of match flag */
	if(unMatch == FALSE)
    1182:	89 89       	ldd	r24, Y+17	; 0x11
    1184:	88 23       	and	r24, r24
    1186:	09 f0       	breq	.+2      	; 0x118a <createPass+0xac>
    1188:	91 c0       	rjmp	.+290    	; 0x12ac <createPass+0x1ce>
	{
		/* if match save password in
		 * external memory and set state to main */
		for(uint8 i = 0; i < 5; i++)
    118a:	1f 86       	std	Y+15, r1	; 0x0f
    118c:	87 c0       	rjmp	.+270    	; 0x129c <createPass+0x1be>
		{
			EEPROM_writeByte(MEMORY_ADDRESS+i,pass[i]);
    118e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1190:	88 2f       	mov	r24, r24
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	01 96       	adiw	r24, 0x01	; 1
    1196:	ac 01       	movw	r20, r24
    1198:	8f 85       	ldd	r24, Y+15	; 0x0f
    119a:	28 2f       	mov	r18, r24
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	ce 01       	movw	r24, r28
    11a0:	42 96       	adiw	r24, 0x12	; 18
    11a2:	fc 01       	movw	r30, r24
    11a4:	e2 0f       	add	r30, r18
    11a6:	f3 1f       	adc	r31, r19
    11a8:	20 81       	ld	r18, Z
    11aa:	ca 01       	movw	r24, r20
    11ac:	62 2f       	mov	r22, r18
    11ae:	0e 94 00 0a 	call	0x1400	; 0x1400 <EEPROM_writeByte>
    11b2:	80 e0       	ldi	r24, 0x00	; 0
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	a0 e7       	ldi	r26, 0x70	; 112
    11b8:	b1 e4       	ldi	r27, 0x41	; 65
    11ba:	8b 87       	std	Y+11, r24	; 0x0b
    11bc:	9c 87       	std	Y+12, r25	; 0x0c
    11be:	ad 87       	std	Y+13, r26	; 0x0d
    11c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    11c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    11c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    11c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    11ca:	20 e0       	ldi	r18, 0x00	; 0
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	4a ef       	ldi	r20, 0xFA	; 250
    11d0:	54 e4       	ldi	r21, 0x44	; 68
    11d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11d6:	dc 01       	movw	r26, r24
    11d8:	cb 01       	movw	r24, r22
    11da:	8f 83       	std	Y+7, r24	; 0x07
    11dc:	98 87       	std	Y+8, r25	; 0x08
    11de:	a9 87       	std	Y+9, r26	; 0x09
    11e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11e2:	6f 81       	ldd	r22, Y+7	; 0x07
    11e4:	78 85       	ldd	r23, Y+8	; 0x08
    11e6:	89 85       	ldd	r24, Y+9	; 0x09
    11e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ea:	20 e0       	ldi	r18, 0x00	; 0
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	40 e8       	ldi	r20, 0x80	; 128
    11f0:	5f e3       	ldi	r21, 0x3F	; 63
    11f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11f6:	88 23       	and	r24, r24
    11f8:	2c f4       	brge	.+10     	; 0x1204 <createPass+0x126>
		__ticks = 1;
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	9e 83       	std	Y+6, r25	; 0x06
    1200:	8d 83       	std	Y+5, r24	; 0x05
    1202:	3f c0       	rjmp	.+126    	; 0x1282 <createPass+0x1a4>
	else if (__tmp > 65535)
    1204:	6f 81       	ldd	r22, Y+7	; 0x07
    1206:	78 85       	ldd	r23, Y+8	; 0x08
    1208:	89 85       	ldd	r24, Y+9	; 0x09
    120a:	9a 85       	ldd	r25, Y+10	; 0x0a
    120c:	20 e0       	ldi	r18, 0x00	; 0
    120e:	3f ef       	ldi	r19, 0xFF	; 255
    1210:	4f e7       	ldi	r20, 0x7F	; 127
    1212:	57 e4       	ldi	r21, 0x47	; 71
    1214:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1218:	18 16       	cp	r1, r24
    121a:	4c f5       	brge	.+82     	; 0x126e <createPass+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    121c:	6b 85       	ldd	r22, Y+11	; 0x0b
    121e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1220:	8d 85       	ldd	r24, Y+13	; 0x0d
    1222:	9e 85       	ldd	r25, Y+14	; 0x0e
    1224:	20 e0       	ldi	r18, 0x00	; 0
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	40 e2       	ldi	r20, 0x20	; 32
    122a:	51 e4       	ldi	r21, 0x41	; 65
    122c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1230:	dc 01       	movw	r26, r24
    1232:	cb 01       	movw	r24, r22
    1234:	bc 01       	movw	r22, r24
    1236:	cd 01       	movw	r24, r26
    1238:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    123c:	dc 01       	movw	r26, r24
    123e:	cb 01       	movw	r24, r22
    1240:	9e 83       	std	Y+6, r25	; 0x06
    1242:	8d 83       	std	Y+5, r24	; 0x05
    1244:	0f c0       	rjmp	.+30     	; 0x1264 <createPass+0x186>
    1246:	88 ec       	ldi	r24, 0xC8	; 200
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	9c 83       	std	Y+4, r25	; 0x04
    124c:	8b 83       	std	Y+3, r24	; 0x03
    124e:	8b 81       	ldd	r24, Y+3	; 0x03
    1250:	9c 81       	ldd	r25, Y+4	; 0x04
    1252:	01 97       	sbiw	r24, 0x01	; 1
    1254:	f1 f7       	brne	.-4      	; 0x1252 <createPass+0x174>
    1256:	9c 83       	std	Y+4, r25	; 0x04
    1258:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    125a:	8d 81       	ldd	r24, Y+5	; 0x05
    125c:	9e 81       	ldd	r25, Y+6	; 0x06
    125e:	01 97       	sbiw	r24, 0x01	; 1
    1260:	9e 83       	std	Y+6, r25	; 0x06
    1262:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1264:	8d 81       	ldd	r24, Y+5	; 0x05
    1266:	9e 81       	ldd	r25, Y+6	; 0x06
    1268:	00 97       	sbiw	r24, 0x00	; 0
    126a:	69 f7       	brne	.-38     	; 0x1246 <createPass+0x168>
    126c:	14 c0       	rjmp	.+40     	; 0x1296 <createPass+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    126e:	6f 81       	ldd	r22, Y+7	; 0x07
    1270:	78 85       	ldd	r23, Y+8	; 0x08
    1272:	89 85       	ldd	r24, Y+9	; 0x09
    1274:	9a 85       	ldd	r25, Y+10	; 0x0a
    1276:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    127a:	dc 01       	movw	r26, r24
    127c:	cb 01       	movw	r24, r22
    127e:	9e 83       	std	Y+6, r25	; 0x06
    1280:	8d 83       	std	Y+5, r24	; 0x05
    1282:	8d 81       	ldd	r24, Y+5	; 0x05
    1284:	9e 81       	ldd	r25, Y+6	; 0x06
    1286:	9a 83       	std	Y+2, r25	; 0x02
    1288:	89 83       	std	Y+1, r24	; 0x01
    128a:	89 81       	ldd	r24, Y+1	; 0x01
    128c:	9a 81       	ldd	r25, Y+2	; 0x02
    128e:	01 97       	sbiw	r24, 0x01	; 1
    1290:	f1 f7       	brne	.-4      	; 0x128e <createPass+0x1b0>
    1292:	9a 83       	std	Y+2, r25	; 0x02
    1294:	89 83       	std	Y+1, r24	; 0x01
	/* check on state of match flag */
	if(unMatch == FALSE)
	{
		/* if match save password in
		 * external memory and set state to main */
		for(uint8 i = 0; i < 5; i++)
    1296:	8f 85       	ldd	r24, Y+15	; 0x0f
    1298:	8f 5f       	subi	r24, 0xFF	; 255
    129a:	8f 87       	std	Y+15, r24	; 0x0f
    129c:	8f 85       	ldd	r24, Y+15	; 0x0f
    129e:	85 30       	cpi	r24, 0x05	; 5
    12a0:	08 f4       	brcc	.+2      	; 0x12a4 <createPass+0x1c6>
    12a2:	75 cf       	rjmp	.-278    	; 0x118e <createPass+0xb0>
		{
			EEPROM_writeByte(MEMORY_ADDRESS+i,pass[i]);
			_delay_ms(15);
		}

		state = MAIN_SCREEN;
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	80 93 8e 00 	sts	0x008E, r24
    12aa:	03 c0       	rjmp	.+6      	; 0x12b2 <createPass+0x1d4>
	}
	else
	{
		/* begin the create password process from the beginning */
		state = CREATE_PASS;
    12ac:	10 92 8e 00 	sts	0x008E, r1

		unMatch = FALSE;	/* clearing flag*/
    12b0:	19 8a       	std	Y+17, r1	; 0x11
	}
}
    12b2:	6b 96       	adiw	r28, 0x1b	; 27
    12b4:	0f b6       	in	r0, 0x3f	; 63
    12b6:	f8 94       	cli
    12b8:	de bf       	out	0x3e, r29	; 62
    12ba:	0f be       	out	0x3f, r0	; 63
    12bc:	cd bf       	out	0x3d, r28	; 61
    12be:	cf 91       	pop	r28
    12c0:	df 91       	pop	r29
    12c2:	1f 91       	pop	r17
    12c4:	0f 91       	pop	r16
    12c6:	08 95       	ret

000012c8 <BUZZER_init>:
#include "buzzer.h"
#include "gpio.h"


void BUZZER_init(void)
{
    12c8:	df 93       	push	r29
    12ca:	cf 93       	push	r28
    12cc:	cd b7       	in	r28, 0x3d	; 61
    12ce:	de b7       	in	r29, 0x3e	; 62
	/* setting buzzer pin as output pin */
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	60 e0       	ldi	r22, 0x00	; 0
    12d4:	41 e0       	ldi	r20, 0x01	; 1
    12d6:	0e 94 a1 0a 	call	0x1542	; 0x1542 <GPIO_setupPinDirection>

	/* disabling buzzer at first */
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, BUZZER_OFF);
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	60 e0       	ldi	r22, 0x00	; 0
    12de:	40 e0       	ldi	r20, 0x00	; 0
    12e0:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <GPIO_writePin>
}
    12e4:	cf 91       	pop	r28
    12e6:	df 91       	pop	r29
    12e8:	08 95       	ret

000012ea <BUZZER_on>:

void BUZZER_on(void)
{
    12ea:	df 93       	push	r29
    12ec:	cf 93       	push	r28
    12ee:	cd b7       	in	r28, 0x3d	; 61
    12f0:	de b7       	in	r29, 0x3e	; 62
	/* enable buzzer */
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, BUZZER_ON);
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	60 e0       	ldi	r22, 0x00	; 0
    12f6:	41 e0       	ldi	r20, 0x01	; 1
    12f8:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <GPIO_writePin>
}
    12fc:	cf 91       	pop	r28
    12fe:	df 91       	pop	r29
    1300:	08 95       	ret

00001302 <BUZZER_off>:

void BUZZER_off(void)
{
    1302:	df 93       	push	r29
    1304:	cf 93       	push	r28
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
	/* disable buzzer */
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, BUZZER_OFF);
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	60 e0       	ldi	r22, 0x00	; 0
    130e:	40 e0       	ldi	r20, 0x00	; 0
    1310:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <GPIO_writePin>
}
    1314:	cf 91       	pop	r28
    1316:	df 91       	pop	r29
    1318:	08 95       	ret

0000131a <DcMotor_Init>:
#include "avr_registers.h"
#include "timer0.h"


void DcMotor_Init(void)
{
    131a:	df 93       	push	r29
    131c:	cf 93       	push	r28
    131e:	cd b7       	in	r28, 0x3d	; 61
    1320:	de b7       	in	r29, 0x3e	; 62
	/* setting two control pins of motor as output pins */
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID, DC_MOTOR_IN1_PIN_ID, PIN_OUTPUT);
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	64 e0       	ldi	r22, 0x04	; 4
    1326:	41 e0       	ldi	r20, 0x01	; 1
    1328:	0e 94 a1 0a 	call	0x1542	; 0x1542 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID, DC_MOTOR_IN2_PIN_ID, PIN_OUTPUT);
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	65 e0       	ldi	r22, 0x05	; 5
    1330:	41 e0       	ldi	r20, 0x01	; 1
    1332:	0e 94 a1 0a 	call	0x1542	; 0x1542 <GPIO_setupPinDirection>

	/* stopping the motor at first */
	GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN1_PIN_ID, DC_MOTOR_STOP);
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	64 e0       	ldi	r22, 0x04	; 4
    133a:	40 e0       	ldi	r20, 0x00	; 0
    133c:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN2_PIN_ID, DC_MOTOR_STOP);
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	65 e0       	ldi	r22, 0x05	; 5
    1344:	40 e0       	ldi	r20, 0x00	; 0
    1346:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <GPIO_writePin>
}
    134a:	cf 91       	pop	r28
    134c:	df 91       	pop	r29
    134e:	08 95       	ret

00001350 <DcMotor_Rotate>:


void DcMotor_Rotate(DcMotor_State state, uint8 speed)
{
    1350:	df 93       	push	r29
    1352:	cf 93       	push	r28
    1354:	cd b7       	in	r28, 0x3d	; 61
    1356:	de b7       	in	r29, 0x3e	; 62
    1358:	2a 97       	sbiw	r28, 0x0a	; 10
    135a:	0f b6       	in	r0, 0x3f	; 63
    135c:	f8 94       	cli
    135e:	de bf       	out	0x3e, r29	; 62
    1360:	0f be       	out	0x3f, r0	; 63
    1362:	cd bf       	out	0x3d, r28	; 61
    1364:	8f 83       	std	Y+7, r24	; 0x07
    1366:	68 87       	std	Y+8, r22	; 0x08

	switch(state)
    1368:	8f 81       	ldd	r24, Y+7	; 0x07
    136a:	28 2f       	mov	r18, r24
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	3a 87       	std	Y+10, r19	; 0x0a
    1370:	29 87       	std	Y+9, r18	; 0x09
    1372:	89 85       	ldd	r24, Y+9	; 0x09
    1374:	9a 85       	ldd	r25, Y+10	; 0x0a
    1376:	81 30       	cpi	r24, 0x01	; 1
    1378:	91 05       	cpc	r25, r1
    137a:	b1 f0       	breq	.+44     	; 0x13a8 <DcMotor_Rotate+0x58>
    137c:	29 85       	ldd	r18, Y+9	; 0x09
    137e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1380:	22 30       	cpi	r18, 0x02	; 2
    1382:	31 05       	cpc	r19, r1
    1384:	e1 f0       	breq	.+56     	; 0x13be <DcMotor_Rotate+0x6e>
    1386:	89 85       	ldd	r24, Y+9	; 0x09
    1388:	9a 85       	ldd	r25, Y+10	; 0x0a
    138a:	00 97       	sbiw	r24, 0x00	; 0
    138c:	11 f5       	brne	.+68     	; 0x13d2 <DcMotor_Rotate+0x82>
	{
	case DC_MOTOR_STOP: 	/* stopping the motor */
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN1_PIN_ID, LOGIC_LOW);
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	64 e0       	ldi	r22, 0x04	; 4
    1392:	40 e0       	ldi	r20, 0x00	; 0
    1394:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN2_PIN_ID, LOGIC_LOW);
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	65 e0       	ldi	r22, 0x05	; 5
    139c:	40 e0       	ldi	r20, 0x00	; 0
    139e:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <GPIO_writePin>

		TIMER0_deInit();	/* de-initializing timer */
    13a2:	0e 94 de 13 	call	0x27bc	; 0x27bc <TIMER0_deInit>
    13a6:	15 c0       	rjmp	.+42     	; 0x13d2 <DcMotor_Rotate+0x82>
		break;
	case DC_MOTOR_CW:		/* rotating the motor clockwise */
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN1_PIN_ID, LOGIC_LOW);
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	64 e0       	ldi	r22, 0x04	; 4
    13ac:	40 e0       	ldi	r20, 0x00	; 0
    13ae:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN2_PIN_ID, LOGIC_HIGH);
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	65 e0       	ldi	r22, 0x05	; 5
    13b6:	41 e0       	ldi	r20, 0x01	; 1
    13b8:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <GPIO_writePin>
    13bc:	0a c0       	rjmp	.+20     	; 0x13d2 <DcMotor_Rotate+0x82>
		break;
	case DC_MOTOR_CCW:		/* rotating the motor counter clockwise */
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN1_PIN_ID, LOGIC_HIGH);
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	64 e0       	ldi	r22, 0x04	; 4
    13c2:	41 e0       	ldi	r20, 0x01	; 1
    13c4:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN2_PIN_ID, LOGIC_LOW);
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	65 e0       	ldi	r22, 0x05	; 5
    13cc:	40 e0       	ldi	r20, 0x00	; 0
    13ce:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <GPIO_writePin>
		break;
	}

	/* initializing timer with specific configurations */
	TIMER0_configType timer0Config = {FAST_PWM, NON_INVERTING, PRESCALER_8, NONE, 0, speed};
    13d2:	83 e0       	ldi	r24, 0x03	; 3
    13d4:	89 83       	std	Y+1, r24	; 0x01
    13d6:	82 e0       	ldi	r24, 0x02	; 2
    13d8:	8a 83       	std	Y+2, r24	; 0x02
    13da:	82 e0       	ldi	r24, 0x02	; 2
    13dc:	8b 83       	std	Y+3, r24	; 0x03
    13de:	1c 82       	std	Y+4, r1	; 0x04
    13e0:	1d 82       	std	Y+5, r1	; 0x05
    13e2:	88 85       	ldd	r24, Y+8	; 0x08
    13e4:	8e 83       	std	Y+6, r24	; 0x06
	TIMER0_init(&timer0Config);
    13e6:	ce 01       	movw	r24, r28
    13e8:	01 96       	adiw	r24, 0x01	; 1
    13ea:	0e 94 08 13 	call	0x2610	; 0x2610 <TIMER0_init>

}
    13ee:	2a 96       	adiw	r28, 0x0a	; 10
    13f0:	0f b6       	in	r0, 0x3f	; 63
    13f2:	f8 94       	cli
    13f4:	de bf       	out	0x3e, r29	; 62
    13f6:	0f be       	out	0x3f, r0	; 63
    13f8:	cd bf       	out	0x3d, r28	; 61
    13fa:	cf 91       	pop	r28
    13fc:	df 91       	pop	r29
    13fe:	08 95       	ret

00001400 <EEPROM_writeByte>:
#include "external_eeprom.h"
#include "twi.h"


uint8 EEPROM_writeByte(uint16 address, uint8 data)
{
    1400:	df 93       	push	r29
    1402:	cf 93       	push	r28
    1404:	00 d0       	rcall	.+0      	; 0x1406 <EEPROM_writeByte+0x6>
    1406:	00 d0       	rcall	.+0      	; 0x1408 <EEPROM_writeByte+0x8>
    1408:	cd b7       	in	r28, 0x3d	; 61
    140a:	de b7       	in	r29, 0x3e	; 62
    140c:	9a 83       	std	Y+2, r25	; 0x02
    140e:	89 83       	std	Y+1, r24	; 0x01
    1410:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
	TWI_start();
    1412:	0e 94 91 15 	call	0x2b22	; 0x2b22 <TWI_start>
	if (TWI_getStatus() != TWI_START)
    1416:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <TWI_getStatus>
    141a:	88 30       	cpi	r24, 0x08	; 8
    141c:	11 f0       	breq	.+4      	; 0x1422 <EEPROM_writeByte+0x22>
		return ERROR;
    141e:	1c 82       	std	Y+4, r1	; 0x04
    1420:	28 c0       	rjmp	.+80     	; 0x1472 <EEPROM_writeByte+0x72>

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=0 (write) */
	TWI_writeByte((uint8)(0xA0 | ((address & 0x0700)>>7)));
    1422:	89 81       	ldd	r24, Y+1	; 0x01
    1424:	9a 81       	ldd	r25, Y+2	; 0x02
    1426:	80 70       	andi	r24, 0x00	; 0
    1428:	97 70       	andi	r25, 0x07	; 7
    142a:	88 0f       	add	r24, r24
    142c:	89 2f       	mov	r24, r25
    142e:	88 1f       	adc	r24, r24
    1430:	99 0b       	sbc	r25, r25
    1432:	91 95       	neg	r25
    1434:	80 6a       	ori	r24, 0xA0	; 160
    1436:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    143a:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <TWI_getStatus>
    143e:	88 31       	cpi	r24, 0x18	; 24
    1440:	11 f0       	breq	.+4      	; 0x1446 <EEPROM_writeByte+0x46>
		return ERROR;
    1442:	1c 82       	std	Y+4, r1	; 0x04
    1444:	16 c0       	rjmp	.+44     	; 0x1472 <EEPROM_writeByte+0x72>

	/* Send the required memory location address */
	TWI_writeByte((uint8)(address));
    1446:	89 81       	ldd	r24, Y+1	; 0x01
    1448:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK)
    144c:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <TWI_getStatus>
    1450:	88 32       	cpi	r24, 0x28	; 40
    1452:	11 f0       	breq	.+4      	; 0x1458 <EEPROM_writeByte+0x58>
		return ERROR;
    1454:	1c 82       	std	Y+4, r1	; 0x04
    1456:	0d c0       	rjmp	.+26     	; 0x1472 <EEPROM_writeByte+0x72>

	/* write byte to eeprom */
	TWI_writeByte(data);
    1458:	8b 81       	ldd	r24, Y+3	; 0x03
    145a:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK)
    145e:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <TWI_getStatus>
    1462:	88 32       	cpi	r24, 0x28	; 40
    1464:	11 f0       	breq	.+4      	; 0x146a <EEPROM_writeByte+0x6a>
		return ERROR;
    1466:	1c 82       	std	Y+4, r1	; 0x04
    1468:	04 c0       	rjmp	.+8      	; 0x1472 <EEPROM_writeByte+0x72>

	/* Send the Stop Bit */
	TWI_stop();
    146a:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <TWI_stop>

	return SUCCESS;
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	8c 83       	std	Y+4, r24	; 0x04
    1472:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1474:	0f 90       	pop	r0
    1476:	0f 90       	pop	r0
    1478:	0f 90       	pop	r0
    147a:	0f 90       	pop	r0
    147c:	cf 91       	pop	r28
    147e:	df 91       	pop	r29
    1480:	08 95       	ret

00001482 <EEPROM_readByte>:
uint8 EEPROM_readByte(uint16 address, uint8 *data)
{
    1482:	df 93       	push	r29
    1484:	cf 93       	push	r28
    1486:	00 d0       	rcall	.+0      	; 0x1488 <EEPROM_readByte+0x6>
    1488:	00 d0       	rcall	.+0      	; 0x148a <EEPROM_readByte+0x8>
    148a:	0f 92       	push	r0
    148c:	cd b7       	in	r28, 0x3d	; 61
    148e:	de b7       	in	r29, 0x3e	; 62
    1490:	9a 83       	std	Y+2, r25	; 0x02
    1492:	89 83       	std	Y+1, r24	; 0x01
    1494:	7c 83       	std	Y+4, r23	; 0x04
    1496:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1498:	0e 94 91 15 	call	0x2b22	; 0x2b22 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    149c:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <TWI_getStatus>
    14a0:	88 30       	cpi	r24, 0x08	; 8
    14a2:	11 f0       	breq	.+4      	; 0x14a8 <EEPROM_readByte+0x26>
        return ERROR;
    14a4:	1d 82       	std	Y+5, r1	; 0x05
    14a6:	44 c0       	rjmp	.+136    	; 0x1530 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((address & 0x0700)>>7)));
    14a8:	89 81       	ldd	r24, Y+1	; 0x01
    14aa:	9a 81       	ldd	r25, Y+2	; 0x02
    14ac:	80 70       	andi	r24, 0x00	; 0
    14ae:	97 70       	andi	r25, 0x07	; 7
    14b0:	88 0f       	add	r24, r24
    14b2:	89 2f       	mov	r24, r25
    14b4:	88 1f       	adc	r24, r24
    14b6:	99 0b       	sbc	r25, r25
    14b8:	91 95       	neg	r25
    14ba:	80 6a       	ori	r24, 0xA0	; 160
    14bc:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    14c0:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <TWI_getStatus>
    14c4:	88 31       	cpi	r24, 0x18	; 24
    14c6:	11 f0       	breq	.+4      	; 0x14cc <EEPROM_readByte+0x4a>
        return ERROR;
    14c8:	1d 82       	std	Y+5, r1	; 0x05
    14ca:	32 c0       	rjmp	.+100    	; 0x1530 <EEPROM_readByte+0xae>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(address));
    14cc:	89 81       	ldd	r24, Y+1	; 0x01
    14ce:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    14d2:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <TWI_getStatus>
    14d6:	88 32       	cpi	r24, 0x28	; 40
    14d8:	11 f0       	breq	.+4      	; 0x14de <EEPROM_readByte+0x5c>
        return ERROR;
    14da:	1d 82       	std	Y+5, r1	; 0x05
    14dc:	29 c0       	rjmp	.+82     	; 0x1530 <EEPROM_readByte+0xae>

    /* Send the Repeated Start Bit */
    TWI_start();
    14de:	0e 94 91 15 	call	0x2b22	; 0x2b22 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    14e2:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <TWI_getStatus>
    14e6:	80 31       	cpi	r24, 0x10	; 16
    14e8:	11 f0       	breq	.+4      	; 0x14ee <EEPROM_readByte+0x6c>
        return ERROR;
    14ea:	1d 82       	std	Y+5, r1	; 0x05
    14ec:	21 c0       	rjmp	.+66     	; 0x1530 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((address & 0x0700)>>7) | 1));
    14ee:	89 81       	ldd	r24, Y+1	; 0x01
    14f0:	9a 81       	ldd	r25, Y+2	; 0x02
    14f2:	80 70       	andi	r24, 0x00	; 0
    14f4:	97 70       	andi	r25, 0x07	; 7
    14f6:	88 0f       	add	r24, r24
    14f8:	89 2f       	mov	r24, r25
    14fa:	88 1f       	adc	r24, r24
    14fc:	99 0b       	sbc	r25, r25
    14fe:	91 95       	neg	r25
    1500:	81 6a       	ori	r24, 0xA1	; 161
    1502:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1506:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <TWI_getStatus>
    150a:	80 34       	cpi	r24, 0x40	; 64
    150c:	11 f0       	breq	.+4      	; 0x1512 <EEPROM_readByte+0x90>
        return ERROR;
    150e:	1d 82       	std	Y+5, r1	; 0x05
    1510:	0f c0       	rjmp	.+30     	; 0x1530 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *data = TWI_readByteWithNACK();
    1512:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <TWI_readByteWithNACK>
    1516:	eb 81       	ldd	r30, Y+3	; 0x03
    1518:	fc 81       	ldd	r31, Y+4	; 0x04
    151a:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    151c:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <TWI_getStatus>
    1520:	88 35       	cpi	r24, 0x58	; 88
    1522:	11 f0       	breq	.+4      	; 0x1528 <EEPROM_readByte+0xa6>
        return ERROR;
    1524:	1d 82       	std	Y+5, r1	; 0x05
    1526:	04 c0       	rjmp	.+8      	; 0x1530 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1528:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <TWI_stop>

    return SUCCESS;
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	8d 83       	std	Y+5, r24	; 0x05
    1530:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	0f 90       	pop	r0
    153a:	0f 90       	pop	r0
    153c:	cf 91       	pop	r28
    153e:	df 91       	pop	r29
    1540:	08 95       	ret

00001542 <GPIO_setupPinDirection>:
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */

void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1542:	df 93       	push	r29
    1544:	cf 93       	push	r28
    1546:	cd b7       	in	r28, 0x3d	; 61
    1548:	de b7       	in	r29, 0x3e	; 62
    154a:	2d 97       	sbiw	r28, 0x0d	; 13
    154c:	0f b6       	in	r0, 0x3f	; 63
    154e:	f8 94       	cli
    1550:	de bf       	out	0x3e, r29	; 62
    1552:	0f be       	out	0x3f, r0	; 63
    1554:	cd bf       	out	0x3d, r28	; 61
    1556:	89 83       	std	Y+1, r24	; 0x01
    1558:	6a 83       	std	Y+2, r22	; 0x02
    155a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    155c:	8a 81       	ldd	r24, Y+2	; 0x02
    155e:	88 30       	cpi	r24, 0x08	; 8
    1560:	08 f0       	brcs	.+2      	; 0x1564 <GPIO_setupPinDirection+0x22>
    1562:	a9 c2       	rjmp	.+1362   	; 0x1ab6 <GPIO_setupPinDirection+0x574>
    1564:	89 81       	ldd	r24, Y+1	; 0x01
    1566:	84 30       	cpi	r24, 0x04	; 4
    1568:	08 f0       	brcs	.+2      	; 0x156c <GPIO_setupPinDirection+0x2a>
    156a:	a5 c2       	rjmp	.+1354   	; 0x1ab6 <GPIO_setupPinDirection+0x574>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    156c:	89 81       	ldd	r24, Y+1	; 0x01
    156e:	28 2f       	mov	r18, r24
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	3d 87       	std	Y+13, r19	; 0x0d
    1574:	2c 87       	std	Y+12, r18	; 0x0c
    1576:	8c 85       	ldd	r24, Y+12	; 0x0c
    1578:	9d 85       	ldd	r25, Y+13	; 0x0d
    157a:	81 30       	cpi	r24, 0x01	; 1
    157c:	91 05       	cpc	r25, r1
    157e:	09 f4       	brne	.+2      	; 0x1582 <GPIO_setupPinDirection+0x40>
    1580:	b8 c0       	rjmp	.+368    	; 0x16f2 <GPIO_setupPinDirection+0x1b0>
    1582:	2c 85       	ldd	r18, Y+12	; 0x0c
    1584:	3d 85       	ldd	r19, Y+13	; 0x0d
    1586:	22 30       	cpi	r18, 0x02	; 2
    1588:	31 05       	cpc	r19, r1
    158a:	2c f4       	brge	.+10     	; 0x1596 <GPIO_setupPinDirection+0x54>
    158c:	8c 85       	ldd	r24, Y+12	; 0x0c
    158e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1590:	00 97       	sbiw	r24, 0x00	; 0
    1592:	71 f0       	breq	.+28     	; 0x15b0 <GPIO_setupPinDirection+0x6e>
    1594:	90 c2       	rjmp	.+1312   	; 0x1ab6 <GPIO_setupPinDirection+0x574>
    1596:	2c 85       	ldd	r18, Y+12	; 0x0c
    1598:	3d 85       	ldd	r19, Y+13	; 0x0d
    159a:	22 30       	cpi	r18, 0x02	; 2
    159c:	31 05       	cpc	r19, r1
    159e:	09 f4       	brne	.+2      	; 0x15a2 <GPIO_setupPinDirection+0x60>
    15a0:	49 c1       	rjmp	.+658    	; 0x1834 <GPIO_setupPinDirection+0x2f2>
    15a2:	8c 85       	ldd	r24, Y+12	; 0x0c
    15a4:	9d 85       	ldd	r25, Y+13	; 0x0d
    15a6:	83 30       	cpi	r24, 0x03	; 3
    15a8:	91 05       	cpc	r25, r1
    15aa:	09 f4       	brne	.+2      	; 0x15ae <GPIO_setupPinDirection+0x6c>
    15ac:	e4 c1       	rjmp	.+968    	; 0x1976 <GPIO_setupPinDirection+0x434>
    15ae:	83 c2       	rjmp	.+1286   	; 0x1ab6 <GPIO_setupPinDirection+0x574>
		{
		case PORTA_ID:
		{
			switch(pin_num)
    15b0:	8a 81       	ldd	r24, Y+2	; 0x02
    15b2:	28 2f       	mov	r18, r24
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	3b 87       	std	Y+11, r19	; 0x0b
    15b8:	2a 87       	std	Y+10, r18	; 0x0a
    15ba:	8a 85       	ldd	r24, Y+10	; 0x0a
    15bc:	9b 85       	ldd	r25, Y+11	; 0x0b
    15be:	83 30       	cpi	r24, 0x03	; 3
    15c0:	91 05       	cpc	r25, r1
    15c2:	09 f4       	brne	.+2      	; 0x15c6 <GPIO_setupPinDirection+0x84>
    15c4:	51 c0       	rjmp	.+162    	; 0x1668 <GPIO_setupPinDirection+0x126>
    15c6:	2a 85       	ldd	r18, Y+10	; 0x0a
    15c8:	3b 85       	ldd	r19, Y+11	; 0x0b
    15ca:	24 30       	cpi	r18, 0x04	; 4
    15cc:	31 05       	cpc	r19, r1
    15ce:	7c f4       	brge	.+30     	; 0x15ee <GPIO_setupPinDirection+0xac>
    15d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    15d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    15d4:	81 30       	cpi	r24, 0x01	; 1
    15d6:	91 05       	cpc	r25, r1
    15d8:	71 f1       	breq	.+92     	; 0x1636 <GPIO_setupPinDirection+0xf4>
    15da:	2a 85       	ldd	r18, Y+10	; 0x0a
    15dc:	3b 85       	ldd	r19, Y+11	; 0x0b
    15de:	22 30       	cpi	r18, 0x02	; 2
    15e0:	31 05       	cpc	r19, r1
    15e2:	ac f5       	brge	.+106    	; 0x164e <GPIO_setupPinDirection+0x10c>
    15e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    15e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    15e8:	00 97       	sbiw	r24, 0x00	; 0
    15ea:	d1 f0       	breq	.+52     	; 0x1620 <GPIO_setupPinDirection+0xde>
    15ec:	64 c2       	rjmp	.+1224   	; 0x1ab6 <GPIO_setupPinDirection+0x574>
    15ee:	2a 85       	ldd	r18, Y+10	; 0x0a
    15f0:	3b 85       	ldd	r19, Y+11	; 0x0b
    15f2:	25 30       	cpi	r18, 0x05	; 5
    15f4:	31 05       	cpc	r19, r1
    15f6:	09 f4       	brne	.+2      	; 0x15fa <GPIO_setupPinDirection+0xb8>
    15f8:	52 c0       	rjmp	.+164    	; 0x169e <GPIO_setupPinDirection+0x15c>
    15fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    15fc:	9b 85       	ldd	r25, Y+11	; 0x0b
    15fe:	85 30       	cpi	r24, 0x05	; 5
    1600:	91 05       	cpc	r25, r1
    1602:	0c f4       	brge	.+2      	; 0x1606 <GPIO_setupPinDirection+0xc4>
    1604:	3f c0       	rjmp	.+126    	; 0x1684 <GPIO_setupPinDirection+0x142>
    1606:	2a 85       	ldd	r18, Y+10	; 0x0a
    1608:	3b 85       	ldd	r19, Y+11	; 0x0b
    160a:	26 30       	cpi	r18, 0x06	; 6
    160c:	31 05       	cpc	r19, r1
    160e:	09 f4       	brne	.+2      	; 0x1612 <GPIO_setupPinDirection+0xd0>
    1610:	54 c0       	rjmp	.+168    	; 0x16ba <GPIO_setupPinDirection+0x178>
    1612:	8a 85       	ldd	r24, Y+10	; 0x0a
    1614:	9b 85       	ldd	r25, Y+11	; 0x0b
    1616:	87 30       	cpi	r24, 0x07	; 7
    1618:	91 05       	cpc	r25, r1
    161a:	09 f4       	brne	.+2      	; 0x161e <GPIO_setupPinDirection+0xdc>
    161c:	5d c0       	rjmp	.+186    	; 0x16d8 <GPIO_setupPinDirection+0x196>
    161e:	4b c2       	rjmp	.+1174   	; 0x1ab6 <GPIO_setupPinDirection+0x574>
			{
			case 0:
				DDRA_REG.Bits.Bit0 = direction;
    1620:	ea e3       	ldi	r30, 0x3A	; 58
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	8b 81       	ldd	r24, Y+3	; 0x03
    1626:	81 70       	andi	r24, 0x01	; 1
    1628:	98 2f       	mov	r25, r24
    162a:	91 70       	andi	r25, 0x01	; 1
    162c:	80 81       	ld	r24, Z
    162e:	8e 7f       	andi	r24, 0xFE	; 254
    1630:	89 2b       	or	r24, r25
    1632:	80 83       	st	Z, r24
    1634:	40 c2       	rjmp	.+1152   	; 0x1ab6 <GPIO_setupPinDirection+0x574>
				break;
			case 1:
				DDRA_REG.Bits.Bit1 = direction;
    1636:	ea e3       	ldi	r30, 0x3A	; 58
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	8b 81       	ldd	r24, Y+3	; 0x03
    163c:	81 70       	andi	r24, 0x01	; 1
    163e:	81 70       	andi	r24, 0x01	; 1
    1640:	98 2f       	mov	r25, r24
    1642:	99 0f       	add	r25, r25
    1644:	80 81       	ld	r24, Z
    1646:	8d 7f       	andi	r24, 0xFD	; 253
    1648:	89 2b       	or	r24, r25
    164a:	80 83       	st	Z, r24
    164c:	34 c2       	rjmp	.+1128   	; 0x1ab6 <GPIO_setupPinDirection+0x574>
				break;
			case 2:
				DDRA_REG.Bits.Bit2 = direction;
    164e:	ea e3       	ldi	r30, 0x3A	; 58
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	8b 81       	ldd	r24, Y+3	; 0x03
    1654:	81 70       	andi	r24, 0x01	; 1
    1656:	81 70       	andi	r24, 0x01	; 1
    1658:	98 2f       	mov	r25, r24
    165a:	99 0f       	add	r25, r25
    165c:	99 0f       	add	r25, r25
    165e:	80 81       	ld	r24, Z
    1660:	8b 7f       	andi	r24, 0xFB	; 251
    1662:	89 2b       	or	r24, r25
    1664:	80 83       	st	Z, r24
    1666:	27 c2       	rjmp	.+1102   	; 0x1ab6 <GPIO_setupPinDirection+0x574>
				break;
			case 3:
				DDRA_REG.Bits.Bit3 = direction;
    1668:	ea e3       	ldi	r30, 0x3A	; 58
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	8b 81       	ldd	r24, Y+3	; 0x03
    166e:	81 70       	andi	r24, 0x01	; 1
    1670:	81 70       	andi	r24, 0x01	; 1
    1672:	98 2f       	mov	r25, r24
    1674:	99 0f       	add	r25, r25
    1676:	99 0f       	add	r25, r25
    1678:	99 0f       	add	r25, r25
    167a:	80 81       	ld	r24, Z
    167c:	87 7f       	andi	r24, 0xF7	; 247
    167e:	89 2b       	or	r24, r25
    1680:	80 83       	st	Z, r24
    1682:	19 c2       	rjmp	.+1074   	; 0x1ab6 <GPIO_setupPinDirection+0x574>
				break;
			case 4:
				DDRA_REG.Bits.Bit4 = direction;
    1684:	ea e3       	ldi	r30, 0x3A	; 58
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	8b 81       	ldd	r24, Y+3	; 0x03
    168a:	81 70       	andi	r24, 0x01	; 1
    168c:	81 70       	andi	r24, 0x01	; 1
    168e:	98 2f       	mov	r25, r24
    1690:	92 95       	swap	r25
    1692:	90 7f       	andi	r25, 0xF0	; 240
    1694:	80 81       	ld	r24, Z
    1696:	8f 7e       	andi	r24, 0xEF	; 239
    1698:	89 2b       	or	r24, r25
    169a:	80 83       	st	Z, r24
    169c:	0c c2       	rjmp	.+1048   	; 0x1ab6 <GPIO_setupPinDirection+0x574>
				break;
			case 5:
				DDRA_REG.Bits.Bit5 = direction;
    169e:	ea e3       	ldi	r30, 0x3A	; 58
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	8b 81       	ldd	r24, Y+3	; 0x03
    16a4:	81 70       	andi	r24, 0x01	; 1
    16a6:	81 70       	andi	r24, 0x01	; 1
    16a8:	98 2f       	mov	r25, r24
    16aa:	92 95       	swap	r25
    16ac:	99 0f       	add	r25, r25
    16ae:	90 7e       	andi	r25, 0xE0	; 224
    16b0:	80 81       	ld	r24, Z
    16b2:	8f 7d       	andi	r24, 0xDF	; 223
    16b4:	89 2b       	or	r24, r25
    16b6:	80 83       	st	Z, r24
    16b8:	fe c1       	rjmp	.+1020   	; 0x1ab6 <GPIO_setupPinDirection+0x574>
				break;
			case 6:
				DDRA_REG.Bits.Bit6 = direction;
    16ba:	ea e3       	ldi	r30, 0x3A	; 58
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	8b 81       	ldd	r24, Y+3	; 0x03
    16c0:	81 70       	andi	r24, 0x01	; 1
    16c2:	81 70       	andi	r24, 0x01	; 1
    16c4:	98 2f       	mov	r25, r24
    16c6:	92 95       	swap	r25
    16c8:	99 0f       	add	r25, r25
    16ca:	99 0f       	add	r25, r25
    16cc:	90 7c       	andi	r25, 0xC0	; 192
    16ce:	80 81       	ld	r24, Z
    16d0:	8f 7b       	andi	r24, 0xBF	; 191
    16d2:	89 2b       	or	r24, r25
    16d4:	80 83       	st	Z, r24
    16d6:	ef c1       	rjmp	.+990    	; 0x1ab6 <GPIO_setupPinDirection+0x574>
				break;
			case 7:
				DDRA_REG.Bits.Bit7 = direction;
    16d8:	ea e3       	ldi	r30, 0x3A	; 58
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	8b 81       	ldd	r24, Y+3	; 0x03
    16de:	81 70       	andi	r24, 0x01	; 1
    16e0:	98 2f       	mov	r25, r24
    16e2:	97 95       	ror	r25
    16e4:	99 27       	eor	r25, r25
    16e6:	97 95       	ror	r25
    16e8:	80 81       	ld	r24, Z
    16ea:	8f 77       	andi	r24, 0x7F	; 127
    16ec:	89 2b       	or	r24, r25
    16ee:	80 83       	st	Z, r24
    16f0:	e2 c1       	rjmp	.+964    	; 0x1ab6 <GPIO_setupPinDirection+0x574>
			}
			break;
		}
		case PORTB_ID:
		{
			switch(pin_num)
    16f2:	8a 81       	ldd	r24, Y+2	; 0x02
    16f4:	28 2f       	mov	r18, r24
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	39 87       	std	Y+9, r19	; 0x09
    16fa:	28 87       	std	Y+8, r18	; 0x08
    16fc:	88 85       	ldd	r24, Y+8	; 0x08
    16fe:	99 85       	ldd	r25, Y+9	; 0x09
    1700:	83 30       	cpi	r24, 0x03	; 3
    1702:	91 05       	cpc	r25, r1
    1704:	09 f4       	brne	.+2      	; 0x1708 <GPIO_setupPinDirection+0x1c6>
    1706:	51 c0       	rjmp	.+162    	; 0x17aa <GPIO_setupPinDirection+0x268>
    1708:	28 85       	ldd	r18, Y+8	; 0x08
    170a:	39 85       	ldd	r19, Y+9	; 0x09
    170c:	24 30       	cpi	r18, 0x04	; 4
    170e:	31 05       	cpc	r19, r1
    1710:	7c f4       	brge	.+30     	; 0x1730 <GPIO_setupPinDirection+0x1ee>
    1712:	88 85       	ldd	r24, Y+8	; 0x08
    1714:	99 85       	ldd	r25, Y+9	; 0x09
    1716:	81 30       	cpi	r24, 0x01	; 1
    1718:	91 05       	cpc	r25, r1
    171a:	71 f1       	breq	.+92     	; 0x1778 <GPIO_setupPinDirection+0x236>
    171c:	28 85       	ldd	r18, Y+8	; 0x08
    171e:	39 85       	ldd	r19, Y+9	; 0x09
    1720:	22 30       	cpi	r18, 0x02	; 2
    1722:	31 05       	cpc	r19, r1
    1724:	ac f5       	brge	.+106    	; 0x1790 <GPIO_setupPinDirection+0x24e>
    1726:	88 85       	ldd	r24, Y+8	; 0x08
    1728:	99 85       	ldd	r25, Y+9	; 0x09
    172a:	00 97       	sbiw	r24, 0x00	; 0
    172c:	d1 f0       	breq	.+52     	; 0x1762 <GPIO_setupPinDirection+0x220>
    172e:	c3 c1       	rjmp	.+902    	; 0x1ab6 <GPIO_setupPinDirection+0x574>
    1730:	28 85       	ldd	r18, Y+8	; 0x08
    1732:	39 85       	ldd	r19, Y+9	; 0x09
    1734:	25 30       	cpi	r18, 0x05	; 5
    1736:	31 05       	cpc	r19, r1
    1738:	09 f4       	brne	.+2      	; 0x173c <GPIO_setupPinDirection+0x1fa>
    173a:	52 c0       	rjmp	.+164    	; 0x17e0 <GPIO_setupPinDirection+0x29e>
    173c:	88 85       	ldd	r24, Y+8	; 0x08
    173e:	99 85       	ldd	r25, Y+9	; 0x09
    1740:	85 30       	cpi	r24, 0x05	; 5
    1742:	91 05       	cpc	r25, r1
    1744:	0c f4       	brge	.+2      	; 0x1748 <GPIO_setupPinDirection+0x206>
    1746:	3f c0       	rjmp	.+126    	; 0x17c6 <GPIO_setupPinDirection+0x284>
    1748:	28 85       	ldd	r18, Y+8	; 0x08
    174a:	39 85       	ldd	r19, Y+9	; 0x09
    174c:	26 30       	cpi	r18, 0x06	; 6
    174e:	31 05       	cpc	r19, r1
    1750:	09 f4       	brne	.+2      	; 0x1754 <GPIO_setupPinDirection+0x212>
    1752:	54 c0       	rjmp	.+168    	; 0x17fc <GPIO_setupPinDirection+0x2ba>
    1754:	88 85       	ldd	r24, Y+8	; 0x08
    1756:	99 85       	ldd	r25, Y+9	; 0x09
    1758:	87 30       	cpi	r24, 0x07	; 7
    175a:	91 05       	cpc	r25, r1
    175c:	09 f4       	brne	.+2      	; 0x1760 <GPIO_setupPinDirection+0x21e>
    175e:	5d c0       	rjmp	.+186    	; 0x181a <GPIO_setupPinDirection+0x2d8>
    1760:	aa c1       	rjmp	.+852    	; 0x1ab6 <GPIO_setupPinDirection+0x574>
			{
			case 0:
				DDRB_REG.Bits.Bit0 = direction;
    1762:	e7 e3       	ldi	r30, 0x37	; 55
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	8b 81       	ldd	r24, Y+3	; 0x03
    1768:	81 70       	andi	r24, 0x01	; 1
    176a:	98 2f       	mov	r25, r24
    176c:	91 70       	andi	r25, 0x01	; 1
    176e:	80 81       	ld	r24, Z
    1770:	8e 7f       	andi	r24, 0xFE	; 254
    1772:	89 2b       	or	r24, r25
    1774:	80 83       	st	Z, r24
    1776:	9f c1       	rjmp	.+830    	; 0x1ab6 <GPIO_setupPinDirection+0x574>
				break;
			case 1:
				DDRB_REG.Bits.Bit1 = direction;
    1778:	e7 e3       	ldi	r30, 0x37	; 55
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	8b 81       	ldd	r24, Y+3	; 0x03
    177e:	81 70       	andi	r24, 0x01	; 1
    1780:	81 70       	andi	r24, 0x01	; 1
    1782:	98 2f       	mov	r25, r24
    1784:	99 0f       	add	r25, r25
    1786:	80 81       	ld	r24, Z
    1788:	8d 7f       	andi	r24, 0xFD	; 253
    178a:	89 2b       	or	r24, r25
    178c:	80 83       	st	Z, r24
    178e:	93 c1       	rjmp	.+806    	; 0x1ab6 <GPIO_setupPinDirection+0x574>
				break;
			case 2:
				DDRB_REG.Bits.Bit2 = direction;
    1790:	e7 e3       	ldi	r30, 0x37	; 55
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	8b 81       	ldd	r24, Y+3	; 0x03
    1796:	81 70       	andi	r24, 0x01	; 1
    1798:	81 70       	andi	r24, 0x01	; 1
    179a:	98 2f       	mov	r25, r24
    179c:	99 0f       	add	r25, r25
    179e:	99 0f       	add	r25, r25
    17a0:	80 81       	ld	r24, Z
    17a2:	8b 7f       	andi	r24, 0xFB	; 251
    17a4:	89 2b       	or	r24, r25
    17a6:	80 83       	st	Z, r24
    17a8:	86 c1       	rjmp	.+780    	; 0x1ab6 <GPIO_setupPinDirection+0x574>
				break;
			case 3:
				DDRB_REG.Bits.Bit3 = direction;
    17aa:	e7 e3       	ldi	r30, 0x37	; 55
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	8b 81       	ldd	r24, Y+3	; 0x03
    17b0:	81 70       	andi	r24, 0x01	; 1
    17b2:	81 70       	andi	r24, 0x01	; 1
    17b4:	98 2f       	mov	r25, r24
    17b6:	99 0f       	add	r25, r25
    17b8:	99 0f       	add	r25, r25
    17ba:	99 0f       	add	r25, r25
    17bc:	80 81       	ld	r24, Z
    17be:	87 7f       	andi	r24, 0xF7	; 247
    17c0:	89 2b       	or	r24, r25
    17c2:	80 83       	st	Z, r24
    17c4:	78 c1       	rjmp	.+752    	; 0x1ab6 <GPIO_setupPinDirection+0x574>
				break;
			case 4:
				DDRB_REG.Bits.Bit4 = direction;
    17c6:	e7 e3       	ldi	r30, 0x37	; 55
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	8b 81       	ldd	r24, Y+3	; 0x03
    17cc:	81 70       	andi	r24, 0x01	; 1
    17ce:	81 70       	andi	r24, 0x01	; 1
    17d0:	98 2f       	mov	r25, r24
    17d2:	92 95       	swap	r25
    17d4:	90 7f       	andi	r25, 0xF0	; 240
    17d6:	80 81       	ld	r24, Z
    17d8:	8f 7e       	andi	r24, 0xEF	; 239
    17da:	89 2b       	or	r24, r25
    17dc:	80 83       	st	Z, r24
    17de:	6b c1       	rjmp	.+726    	; 0x1ab6 <GPIO_setupPinDirection+0x574>
				break;
			case 5:
				DDRB_REG.Bits.Bit5 = direction;
    17e0:	e7 e3       	ldi	r30, 0x37	; 55
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	8b 81       	ldd	r24, Y+3	; 0x03
    17e6:	81 70       	andi	r24, 0x01	; 1
    17e8:	81 70       	andi	r24, 0x01	; 1
    17ea:	98 2f       	mov	r25, r24
    17ec:	92 95       	swap	r25
    17ee:	99 0f       	add	r25, r25
    17f0:	90 7e       	andi	r25, 0xE0	; 224
    17f2:	80 81       	ld	r24, Z
    17f4:	8f 7d       	andi	r24, 0xDF	; 223
    17f6:	89 2b       	or	r24, r25
    17f8:	80 83       	st	Z, r24
    17fa:	5d c1       	rjmp	.+698    	; 0x1ab6 <GPIO_setupPinDirection+0x574>
				break;
			case 6:
				DDRB_REG.Bits.Bit6 = direction;
    17fc:	e7 e3       	ldi	r30, 0x37	; 55
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	8b 81       	ldd	r24, Y+3	; 0x03
    1802:	81 70       	andi	r24, 0x01	; 1
    1804:	81 70       	andi	r24, 0x01	; 1
    1806:	98 2f       	mov	r25, r24
    1808:	92 95       	swap	r25
    180a:	99 0f       	add	r25, r25
    180c:	99 0f       	add	r25, r25
    180e:	90 7c       	andi	r25, 0xC0	; 192
    1810:	80 81       	ld	r24, Z
    1812:	8f 7b       	andi	r24, 0xBF	; 191
    1814:	89 2b       	or	r24, r25
    1816:	80 83       	st	Z, r24
    1818:	4e c1       	rjmp	.+668    	; 0x1ab6 <GPIO_setupPinDirection+0x574>
				break;
			case 7:
				DDRB_REG.Bits.Bit7 = direction;
    181a:	e7 e3       	ldi	r30, 0x37	; 55
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	8b 81       	ldd	r24, Y+3	; 0x03
    1820:	81 70       	andi	r24, 0x01	; 1
    1822:	98 2f       	mov	r25, r24
    1824:	97 95       	ror	r25
    1826:	99 27       	eor	r25, r25
    1828:	97 95       	ror	r25
    182a:	80 81       	ld	r24, Z
    182c:	8f 77       	andi	r24, 0x7F	; 127
    182e:	89 2b       	or	r24, r25
    1830:	80 83       	st	Z, r24
    1832:	41 c1       	rjmp	.+642    	; 0x1ab6 <GPIO_setupPinDirection+0x574>
			}
			break;
		}
		case PORTC_ID:
		{
			switch(pin_num)
    1834:	8a 81       	ldd	r24, Y+2	; 0x02
    1836:	28 2f       	mov	r18, r24
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	3f 83       	std	Y+7, r19	; 0x07
    183c:	2e 83       	std	Y+6, r18	; 0x06
    183e:	8e 81       	ldd	r24, Y+6	; 0x06
    1840:	9f 81       	ldd	r25, Y+7	; 0x07
    1842:	83 30       	cpi	r24, 0x03	; 3
    1844:	91 05       	cpc	r25, r1
    1846:	09 f4       	brne	.+2      	; 0x184a <GPIO_setupPinDirection+0x308>
    1848:	51 c0       	rjmp	.+162    	; 0x18ec <GPIO_setupPinDirection+0x3aa>
    184a:	2e 81       	ldd	r18, Y+6	; 0x06
    184c:	3f 81       	ldd	r19, Y+7	; 0x07
    184e:	24 30       	cpi	r18, 0x04	; 4
    1850:	31 05       	cpc	r19, r1
    1852:	7c f4       	brge	.+30     	; 0x1872 <GPIO_setupPinDirection+0x330>
    1854:	8e 81       	ldd	r24, Y+6	; 0x06
    1856:	9f 81       	ldd	r25, Y+7	; 0x07
    1858:	81 30       	cpi	r24, 0x01	; 1
    185a:	91 05       	cpc	r25, r1
    185c:	71 f1       	breq	.+92     	; 0x18ba <GPIO_setupPinDirection+0x378>
    185e:	2e 81       	ldd	r18, Y+6	; 0x06
    1860:	3f 81       	ldd	r19, Y+7	; 0x07
    1862:	22 30       	cpi	r18, 0x02	; 2
    1864:	31 05       	cpc	r19, r1
    1866:	ac f5       	brge	.+106    	; 0x18d2 <GPIO_setupPinDirection+0x390>
    1868:	8e 81       	ldd	r24, Y+6	; 0x06
    186a:	9f 81       	ldd	r25, Y+7	; 0x07
    186c:	00 97       	sbiw	r24, 0x00	; 0
    186e:	d1 f0       	breq	.+52     	; 0x18a4 <GPIO_setupPinDirection+0x362>
    1870:	22 c1       	rjmp	.+580    	; 0x1ab6 <GPIO_setupPinDirection+0x574>
    1872:	2e 81       	ldd	r18, Y+6	; 0x06
    1874:	3f 81       	ldd	r19, Y+7	; 0x07
    1876:	25 30       	cpi	r18, 0x05	; 5
    1878:	31 05       	cpc	r19, r1
    187a:	09 f4       	brne	.+2      	; 0x187e <GPIO_setupPinDirection+0x33c>
    187c:	52 c0       	rjmp	.+164    	; 0x1922 <GPIO_setupPinDirection+0x3e0>
    187e:	8e 81       	ldd	r24, Y+6	; 0x06
    1880:	9f 81       	ldd	r25, Y+7	; 0x07
    1882:	85 30       	cpi	r24, 0x05	; 5
    1884:	91 05       	cpc	r25, r1
    1886:	0c f4       	brge	.+2      	; 0x188a <GPIO_setupPinDirection+0x348>
    1888:	3f c0       	rjmp	.+126    	; 0x1908 <GPIO_setupPinDirection+0x3c6>
    188a:	2e 81       	ldd	r18, Y+6	; 0x06
    188c:	3f 81       	ldd	r19, Y+7	; 0x07
    188e:	26 30       	cpi	r18, 0x06	; 6
    1890:	31 05       	cpc	r19, r1
    1892:	09 f4       	brne	.+2      	; 0x1896 <GPIO_setupPinDirection+0x354>
    1894:	54 c0       	rjmp	.+168    	; 0x193e <GPIO_setupPinDirection+0x3fc>
    1896:	8e 81       	ldd	r24, Y+6	; 0x06
    1898:	9f 81       	ldd	r25, Y+7	; 0x07
    189a:	87 30       	cpi	r24, 0x07	; 7
    189c:	91 05       	cpc	r25, r1
    189e:	09 f4       	brne	.+2      	; 0x18a2 <GPIO_setupPinDirection+0x360>
    18a0:	5d c0       	rjmp	.+186    	; 0x195c <GPIO_setupPinDirection+0x41a>
    18a2:	09 c1       	rjmp	.+530    	; 0x1ab6 <GPIO_setupPinDirection+0x574>
			{
			case 0:
				DDRC_REG.Bits.Bit0 = direction;
    18a4:	e4 e3       	ldi	r30, 0x34	; 52
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	8b 81       	ldd	r24, Y+3	; 0x03
    18aa:	81 70       	andi	r24, 0x01	; 1
    18ac:	98 2f       	mov	r25, r24
    18ae:	91 70       	andi	r25, 0x01	; 1
    18b0:	80 81       	ld	r24, Z
    18b2:	8e 7f       	andi	r24, 0xFE	; 254
    18b4:	89 2b       	or	r24, r25
    18b6:	80 83       	st	Z, r24
    18b8:	fe c0       	rjmp	.+508    	; 0x1ab6 <GPIO_setupPinDirection+0x574>
				break;
			case 1:
				DDRC_REG.Bits.Bit1 = direction;
    18ba:	e4 e3       	ldi	r30, 0x34	; 52
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	8b 81       	ldd	r24, Y+3	; 0x03
    18c0:	81 70       	andi	r24, 0x01	; 1
    18c2:	81 70       	andi	r24, 0x01	; 1
    18c4:	98 2f       	mov	r25, r24
    18c6:	99 0f       	add	r25, r25
    18c8:	80 81       	ld	r24, Z
    18ca:	8d 7f       	andi	r24, 0xFD	; 253
    18cc:	89 2b       	or	r24, r25
    18ce:	80 83       	st	Z, r24
    18d0:	f2 c0       	rjmp	.+484    	; 0x1ab6 <GPIO_setupPinDirection+0x574>
				break;
			case 2:
				DDRC_REG.Bits.Bit2 = direction;
    18d2:	e4 e3       	ldi	r30, 0x34	; 52
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	8b 81       	ldd	r24, Y+3	; 0x03
    18d8:	81 70       	andi	r24, 0x01	; 1
    18da:	81 70       	andi	r24, 0x01	; 1
    18dc:	98 2f       	mov	r25, r24
    18de:	99 0f       	add	r25, r25
    18e0:	99 0f       	add	r25, r25
    18e2:	80 81       	ld	r24, Z
    18e4:	8b 7f       	andi	r24, 0xFB	; 251
    18e6:	89 2b       	or	r24, r25
    18e8:	80 83       	st	Z, r24
    18ea:	e5 c0       	rjmp	.+458    	; 0x1ab6 <GPIO_setupPinDirection+0x574>
				break;
			case 3:
				DDRC_REG.Bits.Bit3 = direction;
    18ec:	e4 e3       	ldi	r30, 0x34	; 52
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	8b 81       	ldd	r24, Y+3	; 0x03
    18f2:	81 70       	andi	r24, 0x01	; 1
    18f4:	81 70       	andi	r24, 0x01	; 1
    18f6:	98 2f       	mov	r25, r24
    18f8:	99 0f       	add	r25, r25
    18fa:	99 0f       	add	r25, r25
    18fc:	99 0f       	add	r25, r25
    18fe:	80 81       	ld	r24, Z
    1900:	87 7f       	andi	r24, 0xF7	; 247
    1902:	89 2b       	or	r24, r25
    1904:	80 83       	st	Z, r24
    1906:	d7 c0       	rjmp	.+430    	; 0x1ab6 <GPIO_setupPinDirection+0x574>
				break;
			case 4:
				DDRC_REG.Bits.Bit4 = direction;
    1908:	e4 e3       	ldi	r30, 0x34	; 52
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	8b 81       	ldd	r24, Y+3	; 0x03
    190e:	81 70       	andi	r24, 0x01	; 1
    1910:	81 70       	andi	r24, 0x01	; 1
    1912:	98 2f       	mov	r25, r24
    1914:	92 95       	swap	r25
    1916:	90 7f       	andi	r25, 0xF0	; 240
    1918:	80 81       	ld	r24, Z
    191a:	8f 7e       	andi	r24, 0xEF	; 239
    191c:	89 2b       	or	r24, r25
    191e:	80 83       	st	Z, r24
    1920:	ca c0       	rjmp	.+404    	; 0x1ab6 <GPIO_setupPinDirection+0x574>
				break;
			case 5:
				DDRC_REG.Bits.Bit5 = direction;
    1922:	e4 e3       	ldi	r30, 0x34	; 52
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	8b 81       	ldd	r24, Y+3	; 0x03
    1928:	81 70       	andi	r24, 0x01	; 1
    192a:	81 70       	andi	r24, 0x01	; 1
    192c:	98 2f       	mov	r25, r24
    192e:	92 95       	swap	r25
    1930:	99 0f       	add	r25, r25
    1932:	90 7e       	andi	r25, 0xE0	; 224
    1934:	80 81       	ld	r24, Z
    1936:	8f 7d       	andi	r24, 0xDF	; 223
    1938:	89 2b       	or	r24, r25
    193a:	80 83       	st	Z, r24
    193c:	bc c0       	rjmp	.+376    	; 0x1ab6 <GPIO_setupPinDirection+0x574>
				break;
			case 6:
				DDRC_REG.Bits.Bit6 = direction;
    193e:	e4 e3       	ldi	r30, 0x34	; 52
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	8b 81       	ldd	r24, Y+3	; 0x03
    1944:	81 70       	andi	r24, 0x01	; 1
    1946:	81 70       	andi	r24, 0x01	; 1
    1948:	98 2f       	mov	r25, r24
    194a:	92 95       	swap	r25
    194c:	99 0f       	add	r25, r25
    194e:	99 0f       	add	r25, r25
    1950:	90 7c       	andi	r25, 0xC0	; 192
    1952:	80 81       	ld	r24, Z
    1954:	8f 7b       	andi	r24, 0xBF	; 191
    1956:	89 2b       	or	r24, r25
    1958:	80 83       	st	Z, r24
    195a:	ad c0       	rjmp	.+346    	; 0x1ab6 <GPIO_setupPinDirection+0x574>
				break;
			case 7:
				DDRC_REG.Bits.Bit7 = direction;
    195c:	e4 e3       	ldi	r30, 0x34	; 52
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	8b 81       	ldd	r24, Y+3	; 0x03
    1962:	81 70       	andi	r24, 0x01	; 1
    1964:	98 2f       	mov	r25, r24
    1966:	97 95       	ror	r25
    1968:	99 27       	eor	r25, r25
    196a:	97 95       	ror	r25
    196c:	80 81       	ld	r24, Z
    196e:	8f 77       	andi	r24, 0x7F	; 127
    1970:	89 2b       	or	r24, r25
    1972:	80 83       	st	Z, r24
    1974:	a0 c0       	rjmp	.+320    	; 0x1ab6 <GPIO_setupPinDirection+0x574>
			}
			break;
		}
		case PORTD_ID:
		{
			switch(pin_num)
    1976:	8a 81       	ldd	r24, Y+2	; 0x02
    1978:	28 2f       	mov	r18, r24
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	3d 83       	std	Y+5, r19	; 0x05
    197e:	2c 83       	std	Y+4, r18	; 0x04
    1980:	8c 81       	ldd	r24, Y+4	; 0x04
    1982:	9d 81       	ldd	r25, Y+5	; 0x05
    1984:	83 30       	cpi	r24, 0x03	; 3
    1986:	91 05       	cpc	r25, r1
    1988:	09 f4       	brne	.+2      	; 0x198c <GPIO_setupPinDirection+0x44a>
    198a:	51 c0       	rjmp	.+162    	; 0x1a2e <GPIO_setupPinDirection+0x4ec>
    198c:	2c 81       	ldd	r18, Y+4	; 0x04
    198e:	3d 81       	ldd	r19, Y+5	; 0x05
    1990:	24 30       	cpi	r18, 0x04	; 4
    1992:	31 05       	cpc	r19, r1
    1994:	7c f4       	brge	.+30     	; 0x19b4 <GPIO_setupPinDirection+0x472>
    1996:	8c 81       	ldd	r24, Y+4	; 0x04
    1998:	9d 81       	ldd	r25, Y+5	; 0x05
    199a:	81 30       	cpi	r24, 0x01	; 1
    199c:	91 05       	cpc	r25, r1
    199e:	71 f1       	breq	.+92     	; 0x19fc <GPIO_setupPinDirection+0x4ba>
    19a0:	2c 81       	ldd	r18, Y+4	; 0x04
    19a2:	3d 81       	ldd	r19, Y+5	; 0x05
    19a4:	22 30       	cpi	r18, 0x02	; 2
    19a6:	31 05       	cpc	r19, r1
    19a8:	ac f5       	brge	.+106    	; 0x1a14 <GPIO_setupPinDirection+0x4d2>
    19aa:	8c 81       	ldd	r24, Y+4	; 0x04
    19ac:	9d 81       	ldd	r25, Y+5	; 0x05
    19ae:	00 97       	sbiw	r24, 0x00	; 0
    19b0:	d1 f0       	breq	.+52     	; 0x19e6 <GPIO_setupPinDirection+0x4a4>
    19b2:	81 c0       	rjmp	.+258    	; 0x1ab6 <GPIO_setupPinDirection+0x574>
    19b4:	2c 81       	ldd	r18, Y+4	; 0x04
    19b6:	3d 81       	ldd	r19, Y+5	; 0x05
    19b8:	25 30       	cpi	r18, 0x05	; 5
    19ba:	31 05       	cpc	r19, r1
    19bc:	09 f4       	brne	.+2      	; 0x19c0 <GPIO_setupPinDirection+0x47e>
    19be:	52 c0       	rjmp	.+164    	; 0x1a64 <GPIO_setupPinDirection+0x522>
    19c0:	8c 81       	ldd	r24, Y+4	; 0x04
    19c2:	9d 81       	ldd	r25, Y+5	; 0x05
    19c4:	85 30       	cpi	r24, 0x05	; 5
    19c6:	91 05       	cpc	r25, r1
    19c8:	0c f4       	brge	.+2      	; 0x19cc <GPIO_setupPinDirection+0x48a>
    19ca:	3f c0       	rjmp	.+126    	; 0x1a4a <GPIO_setupPinDirection+0x508>
    19cc:	2c 81       	ldd	r18, Y+4	; 0x04
    19ce:	3d 81       	ldd	r19, Y+5	; 0x05
    19d0:	26 30       	cpi	r18, 0x06	; 6
    19d2:	31 05       	cpc	r19, r1
    19d4:	09 f4       	brne	.+2      	; 0x19d8 <GPIO_setupPinDirection+0x496>
    19d6:	54 c0       	rjmp	.+168    	; 0x1a80 <GPIO_setupPinDirection+0x53e>
    19d8:	8c 81       	ldd	r24, Y+4	; 0x04
    19da:	9d 81       	ldd	r25, Y+5	; 0x05
    19dc:	87 30       	cpi	r24, 0x07	; 7
    19de:	91 05       	cpc	r25, r1
    19e0:	09 f4       	brne	.+2      	; 0x19e4 <GPIO_setupPinDirection+0x4a2>
    19e2:	5d c0       	rjmp	.+186    	; 0x1a9e <GPIO_setupPinDirection+0x55c>
    19e4:	68 c0       	rjmp	.+208    	; 0x1ab6 <GPIO_setupPinDirection+0x574>
			{
			case 0:
				DDRD_REG.Bits.Bit0 = direction;
    19e6:	e1 e3       	ldi	r30, 0x31	; 49
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	8b 81       	ldd	r24, Y+3	; 0x03
    19ec:	81 70       	andi	r24, 0x01	; 1
    19ee:	98 2f       	mov	r25, r24
    19f0:	91 70       	andi	r25, 0x01	; 1
    19f2:	80 81       	ld	r24, Z
    19f4:	8e 7f       	andi	r24, 0xFE	; 254
    19f6:	89 2b       	or	r24, r25
    19f8:	80 83       	st	Z, r24
    19fa:	5d c0       	rjmp	.+186    	; 0x1ab6 <GPIO_setupPinDirection+0x574>
				break;
			case 1:
				DDRD_REG.Bits.Bit1 = direction;
    19fc:	e1 e3       	ldi	r30, 0x31	; 49
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	8b 81       	ldd	r24, Y+3	; 0x03
    1a02:	81 70       	andi	r24, 0x01	; 1
    1a04:	81 70       	andi	r24, 0x01	; 1
    1a06:	98 2f       	mov	r25, r24
    1a08:	99 0f       	add	r25, r25
    1a0a:	80 81       	ld	r24, Z
    1a0c:	8d 7f       	andi	r24, 0xFD	; 253
    1a0e:	89 2b       	or	r24, r25
    1a10:	80 83       	st	Z, r24
    1a12:	51 c0       	rjmp	.+162    	; 0x1ab6 <GPIO_setupPinDirection+0x574>
				break;
			case 2:
				DDRD_REG.Bits.Bit2 = direction;
    1a14:	e1 e3       	ldi	r30, 0x31	; 49
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1a:	81 70       	andi	r24, 0x01	; 1
    1a1c:	81 70       	andi	r24, 0x01	; 1
    1a1e:	98 2f       	mov	r25, r24
    1a20:	99 0f       	add	r25, r25
    1a22:	99 0f       	add	r25, r25
    1a24:	80 81       	ld	r24, Z
    1a26:	8b 7f       	andi	r24, 0xFB	; 251
    1a28:	89 2b       	or	r24, r25
    1a2a:	80 83       	st	Z, r24
    1a2c:	44 c0       	rjmp	.+136    	; 0x1ab6 <GPIO_setupPinDirection+0x574>
				break;
			case 3:
				DDRD_REG.Bits.Bit3 = direction;
    1a2e:	e1 e3       	ldi	r30, 0x31	; 49
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	8b 81       	ldd	r24, Y+3	; 0x03
    1a34:	81 70       	andi	r24, 0x01	; 1
    1a36:	81 70       	andi	r24, 0x01	; 1
    1a38:	98 2f       	mov	r25, r24
    1a3a:	99 0f       	add	r25, r25
    1a3c:	99 0f       	add	r25, r25
    1a3e:	99 0f       	add	r25, r25
    1a40:	80 81       	ld	r24, Z
    1a42:	87 7f       	andi	r24, 0xF7	; 247
    1a44:	89 2b       	or	r24, r25
    1a46:	80 83       	st	Z, r24
    1a48:	36 c0       	rjmp	.+108    	; 0x1ab6 <GPIO_setupPinDirection+0x574>
				break;
			case 4:
				DDRD_REG.Bits.Bit4 = direction;
    1a4a:	e1 e3       	ldi	r30, 0x31	; 49
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a50:	81 70       	andi	r24, 0x01	; 1
    1a52:	81 70       	andi	r24, 0x01	; 1
    1a54:	98 2f       	mov	r25, r24
    1a56:	92 95       	swap	r25
    1a58:	90 7f       	andi	r25, 0xF0	; 240
    1a5a:	80 81       	ld	r24, Z
    1a5c:	8f 7e       	andi	r24, 0xEF	; 239
    1a5e:	89 2b       	or	r24, r25
    1a60:	80 83       	st	Z, r24
    1a62:	29 c0       	rjmp	.+82     	; 0x1ab6 <GPIO_setupPinDirection+0x574>
				break;
			case 5:
				DDRD_REG.Bits.Bit5 = direction;
    1a64:	e1 e3       	ldi	r30, 0x31	; 49
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6a:	81 70       	andi	r24, 0x01	; 1
    1a6c:	81 70       	andi	r24, 0x01	; 1
    1a6e:	98 2f       	mov	r25, r24
    1a70:	92 95       	swap	r25
    1a72:	99 0f       	add	r25, r25
    1a74:	90 7e       	andi	r25, 0xE0	; 224
    1a76:	80 81       	ld	r24, Z
    1a78:	8f 7d       	andi	r24, 0xDF	; 223
    1a7a:	89 2b       	or	r24, r25
    1a7c:	80 83       	st	Z, r24
    1a7e:	1b c0       	rjmp	.+54     	; 0x1ab6 <GPIO_setupPinDirection+0x574>
				break;
			case 6:
				DDRD_REG.Bits.Bit6 = direction;
    1a80:	e1 e3       	ldi	r30, 0x31	; 49
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	8b 81       	ldd	r24, Y+3	; 0x03
    1a86:	81 70       	andi	r24, 0x01	; 1
    1a88:	81 70       	andi	r24, 0x01	; 1
    1a8a:	98 2f       	mov	r25, r24
    1a8c:	92 95       	swap	r25
    1a8e:	99 0f       	add	r25, r25
    1a90:	99 0f       	add	r25, r25
    1a92:	90 7c       	andi	r25, 0xC0	; 192
    1a94:	80 81       	ld	r24, Z
    1a96:	8f 7b       	andi	r24, 0xBF	; 191
    1a98:	89 2b       	or	r24, r25
    1a9a:	80 83       	st	Z, r24
    1a9c:	0c c0       	rjmp	.+24     	; 0x1ab6 <GPIO_setupPinDirection+0x574>
				break;
			case 7:
				DDRD_REG.Bits.Bit7 = direction;
    1a9e:	e1 e3       	ldi	r30, 0x31	; 49
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa4:	81 70       	andi	r24, 0x01	; 1
    1aa6:	98 2f       	mov	r25, r24
    1aa8:	97 95       	ror	r25
    1aaa:	99 27       	eor	r25, r25
    1aac:	97 95       	ror	r25
    1aae:	80 81       	ld	r24, Z
    1ab0:	8f 77       	andi	r24, 0x7F	; 127
    1ab2:	89 2b       	or	r24, r25
    1ab4:	80 83       	st	Z, r24
			}
			break;
		}
		}
	}
}
    1ab6:	2d 96       	adiw	r28, 0x0d	; 13
    1ab8:	0f b6       	in	r0, 0x3f	; 63
    1aba:	f8 94       	cli
    1abc:	de bf       	out	0x3e, r29	; 62
    1abe:	0f be       	out	0x3f, r0	; 63
    1ac0:	cd bf       	out	0x3d, r28	; 61
    1ac2:	cf 91       	pop	r28
    1ac4:	df 91       	pop	r29
    1ac6:	08 95       	ret

00001ac8 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1ac8:	df 93       	push	r29
    1aca:	cf 93       	push	r28
    1acc:	cd b7       	in	r28, 0x3d	; 61
    1ace:	de b7       	in	r29, 0x3e	; 62
    1ad0:	2d 97       	sbiw	r28, 0x0d	; 13
    1ad2:	0f b6       	in	r0, 0x3f	; 63
    1ad4:	f8 94       	cli
    1ad6:	de bf       	out	0x3e, r29	; 62
    1ad8:	0f be       	out	0x3f, r0	; 63
    1ada:	cd bf       	out	0x3d, r28	; 61
    1adc:	89 83       	std	Y+1, r24	; 0x01
    1ade:	6a 83       	std	Y+2, r22	; 0x02
    1ae0:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1ae2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae4:	88 30       	cpi	r24, 0x08	; 8
    1ae6:	08 f0       	brcs	.+2      	; 0x1aea <GPIO_writePin+0x22>
    1ae8:	a9 c2       	rjmp	.+1362   	; 0x203c <GPIO_writePin+0x574>
    1aea:	89 81       	ldd	r24, Y+1	; 0x01
    1aec:	84 30       	cpi	r24, 0x04	; 4
    1aee:	08 f0       	brcs	.+2      	; 0x1af2 <GPIO_writePin+0x2a>
    1af0:	a5 c2       	rjmp	.+1354   	; 0x203c <GPIO_writePin+0x574>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1af2:	89 81       	ldd	r24, Y+1	; 0x01
    1af4:	28 2f       	mov	r18, r24
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	3d 87       	std	Y+13, r19	; 0x0d
    1afa:	2c 87       	std	Y+12, r18	; 0x0c
    1afc:	8c 85       	ldd	r24, Y+12	; 0x0c
    1afe:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b00:	81 30       	cpi	r24, 0x01	; 1
    1b02:	91 05       	cpc	r25, r1
    1b04:	09 f4       	brne	.+2      	; 0x1b08 <GPIO_writePin+0x40>
    1b06:	b8 c0       	rjmp	.+368    	; 0x1c78 <GPIO_writePin+0x1b0>
    1b08:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b0a:	3d 85       	ldd	r19, Y+13	; 0x0d
    1b0c:	22 30       	cpi	r18, 0x02	; 2
    1b0e:	31 05       	cpc	r19, r1
    1b10:	2c f4       	brge	.+10     	; 0x1b1c <GPIO_writePin+0x54>
    1b12:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b14:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b16:	00 97       	sbiw	r24, 0x00	; 0
    1b18:	71 f0       	breq	.+28     	; 0x1b36 <GPIO_writePin+0x6e>
    1b1a:	90 c2       	rjmp	.+1312   	; 0x203c <GPIO_writePin+0x574>
    1b1c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b1e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1b20:	22 30       	cpi	r18, 0x02	; 2
    1b22:	31 05       	cpc	r19, r1
    1b24:	09 f4       	brne	.+2      	; 0x1b28 <GPIO_writePin+0x60>
    1b26:	49 c1       	rjmp	.+658    	; 0x1dba <GPIO_writePin+0x2f2>
    1b28:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b2a:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b2c:	83 30       	cpi	r24, 0x03	; 3
    1b2e:	91 05       	cpc	r25, r1
    1b30:	09 f4       	brne	.+2      	; 0x1b34 <GPIO_writePin+0x6c>
    1b32:	e4 c1       	rjmp	.+968    	; 0x1efc <GPIO_writePin+0x434>
    1b34:	83 c2       	rjmp	.+1286   	; 0x203c <GPIO_writePin+0x574>
		{
		case PORTA_ID:
		{
			switch(pin_num)
    1b36:	8a 81       	ldd	r24, Y+2	; 0x02
    1b38:	28 2f       	mov	r18, r24
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	3b 87       	std	Y+11, r19	; 0x0b
    1b3e:	2a 87       	std	Y+10, r18	; 0x0a
    1b40:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b42:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b44:	83 30       	cpi	r24, 0x03	; 3
    1b46:	91 05       	cpc	r25, r1
    1b48:	09 f4       	brne	.+2      	; 0x1b4c <GPIO_writePin+0x84>
    1b4a:	51 c0       	rjmp	.+162    	; 0x1bee <GPIO_writePin+0x126>
    1b4c:	2a 85       	ldd	r18, Y+10	; 0x0a
    1b4e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1b50:	24 30       	cpi	r18, 0x04	; 4
    1b52:	31 05       	cpc	r19, r1
    1b54:	7c f4       	brge	.+30     	; 0x1b74 <GPIO_writePin+0xac>
    1b56:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b58:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b5a:	81 30       	cpi	r24, 0x01	; 1
    1b5c:	91 05       	cpc	r25, r1
    1b5e:	71 f1       	breq	.+92     	; 0x1bbc <GPIO_writePin+0xf4>
    1b60:	2a 85       	ldd	r18, Y+10	; 0x0a
    1b62:	3b 85       	ldd	r19, Y+11	; 0x0b
    1b64:	22 30       	cpi	r18, 0x02	; 2
    1b66:	31 05       	cpc	r19, r1
    1b68:	ac f5       	brge	.+106    	; 0x1bd4 <GPIO_writePin+0x10c>
    1b6a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b6c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b6e:	00 97       	sbiw	r24, 0x00	; 0
    1b70:	d1 f0       	breq	.+52     	; 0x1ba6 <GPIO_writePin+0xde>
    1b72:	64 c2       	rjmp	.+1224   	; 0x203c <GPIO_writePin+0x574>
    1b74:	2a 85       	ldd	r18, Y+10	; 0x0a
    1b76:	3b 85       	ldd	r19, Y+11	; 0x0b
    1b78:	25 30       	cpi	r18, 0x05	; 5
    1b7a:	31 05       	cpc	r19, r1
    1b7c:	09 f4       	brne	.+2      	; 0x1b80 <GPIO_writePin+0xb8>
    1b7e:	52 c0       	rjmp	.+164    	; 0x1c24 <GPIO_writePin+0x15c>
    1b80:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b82:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b84:	85 30       	cpi	r24, 0x05	; 5
    1b86:	91 05       	cpc	r25, r1
    1b88:	0c f4       	brge	.+2      	; 0x1b8c <GPIO_writePin+0xc4>
    1b8a:	3f c0       	rjmp	.+126    	; 0x1c0a <GPIO_writePin+0x142>
    1b8c:	2a 85       	ldd	r18, Y+10	; 0x0a
    1b8e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1b90:	26 30       	cpi	r18, 0x06	; 6
    1b92:	31 05       	cpc	r19, r1
    1b94:	09 f4       	brne	.+2      	; 0x1b98 <GPIO_writePin+0xd0>
    1b96:	54 c0       	rjmp	.+168    	; 0x1c40 <GPIO_writePin+0x178>
    1b98:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b9a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b9c:	87 30       	cpi	r24, 0x07	; 7
    1b9e:	91 05       	cpc	r25, r1
    1ba0:	09 f4       	brne	.+2      	; 0x1ba4 <GPIO_writePin+0xdc>
    1ba2:	5d c0       	rjmp	.+186    	; 0x1c5e <GPIO_writePin+0x196>
    1ba4:	4b c2       	rjmp	.+1174   	; 0x203c <GPIO_writePin+0x574>
			{
			case 0:
				PORTA_REG.Bits.Bit0 = value;
    1ba6:	eb e3       	ldi	r30, 0x3B	; 59
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bac:	81 70       	andi	r24, 0x01	; 1
    1bae:	98 2f       	mov	r25, r24
    1bb0:	91 70       	andi	r25, 0x01	; 1
    1bb2:	80 81       	ld	r24, Z
    1bb4:	8e 7f       	andi	r24, 0xFE	; 254
    1bb6:	89 2b       	or	r24, r25
    1bb8:	80 83       	st	Z, r24
    1bba:	40 c2       	rjmp	.+1152   	; 0x203c <GPIO_writePin+0x574>
				break;
			case 1:
				PORTA_REG.Bits.Bit1 = value;
    1bbc:	eb e3       	ldi	r30, 0x3B	; 59
    1bbe:	f0 e0       	ldi	r31, 0x00	; 0
    1bc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc2:	81 70       	andi	r24, 0x01	; 1
    1bc4:	81 70       	andi	r24, 0x01	; 1
    1bc6:	98 2f       	mov	r25, r24
    1bc8:	99 0f       	add	r25, r25
    1bca:	80 81       	ld	r24, Z
    1bcc:	8d 7f       	andi	r24, 0xFD	; 253
    1bce:	89 2b       	or	r24, r25
    1bd0:	80 83       	st	Z, r24
    1bd2:	34 c2       	rjmp	.+1128   	; 0x203c <GPIO_writePin+0x574>
				break;
			case 2:
				PORTA_REG.Bits.Bit2 = value;
    1bd4:	eb e3       	ldi	r30, 0x3B	; 59
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bda:	81 70       	andi	r24, 0x01	; 1
    1bdc:	81 70       	andi	r24, 0x01	; 1
    1bde:	98 2f       	mov	r25, r24
    1be0:	99 0f       	add	r25, r25
    1be2:	99 0f       	add	r25, r25
    1be4:	80 81       	ld	r24, Z
    1be6:	8b 7f       	andi	r24, 0xFB	; 251
    1be8:	89 2b       	or	r24, r25
    1bea:	80 83       	st	Z, r24
    1bec:	27 c2       	rjmp	.+1102   	; 0x203c <GPIO_writePin+0x574>
				break;
			case 3:
				PORTA_REG.Bits.Bit3 = value;
    1bee:	eb e3       	ldi	r30, 0x3B	; 59
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf4:	81 70       	andi	r24, 0x01	; 1
    1bf6:	81 70       	andi	r24, 0x01	; 1
    1bf8:	98 2f       	mov	r25, r24
    1bfa:	99 0f       	add	r25, r25
    1bfc:	99 0f       	add	r25, r25
    1bfe:	99 0f       	add	r25, r25
    1c00:	80 81       	ld	r24, Z
    1c02:	87 7f       	andi	r24, 0xF7	; 247
    1c04:	89 2b       	or	r24, r25
    1c06:	80 83       	st	Z, r24
    1c08:	19 c2       	rjmp	.+1074   	; 0x203c <GPIO_writePin+0x574>
				break;
			case 4:
				PORTA_REG.Bits.Bit4 = value;
    1c0a:	eb e3       	ldi	r30, 0x3B	; 59
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c10:	81 70       	andi	r24, 0x01	; 1
    1c12:	81 70       	andi	r24, 0x01	; 1
    1c14:	98 2f       	mov	r25, r24
    1c16:	92 95       	swap	r25
    1c18:	90 7f       	andi	r25, 0xF0	; 240
    1c1a:	80 81       	ld	r24, Z
    1c1c:	8f 7e       	andi	r24, 0xEF	; 239
    1c1e:	89 2b       	or	r24, r25
    1c20:	80 83       	st	Z, r24
    1c22:	0c c2       	rjmp	.+1048   	; 0x203c <GPIO_writePin+0x574>
				break;
			case 5:
				PORTA_REG.Bits.Bit5 = value;
    1c24:	eb e3       	ldi	r30, 0x3B	; 59
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2a:	81 70       	andi	r24, 0x01	; 1
    1c2c:	81 70       	andi	r24, 0x01	; 1
    1c2e:	98 2f       	mov	r25, r24
    1c30:	92 95       	swap	r25
    1c32:	99 0f       	add	r25, r25
    1c34:	90 7e       	andi	r25, 0xE0	; 224
    1c36:	80 81       	ld	r24, Z
    1c38:	8f 7d       	andi	r24, 0xDF	; 223
    1c3a:	89 2b       	or	r24, r25
    1c3c:	80 83       	st	Z, r24
    1c3e:	fe c1       	rjmp	.+1020   	; 0x203c <GPIO_writePin+0x574>
				break;
			case 6:
				PORTA_REG.Bits.Bit6 = value;
    1c40:	eb e3       	ldi	r30, 0x3B	; 59
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	8b 81       	ldd	r24, Y+3	; 0x03
    1c46:	81 70       	andi	r24, 0x01	; 1
    1c48:	81 70       	andi	r24, 0x01	; 1
    1c4a:	98 2f       	mov	r25, r24
    1c4c:	92 95       	swap	r25
    1c4e:	99 0f       	add	r25, r25
    1c50:	99 0f       	add	r25, r25
    1c52:	90 7c       	andi	r25, 0xC0	; 192
    1c54:	80 81       	ld	r24, Z
    1c56:	8f 7b       	andi	r24, 0xBF	; 191
    1c58:	89 2b       	or	r24, r25
    1c5a:	80 83       	st	Z, r24
    1c5c:	ef c1       	rjmp	.+990    	; 0x203c <GPIO_writePin+0x574>
				break;
			case 7:
				PORTA_REG.Bits.Bit7 = value;
    1c5e:	eb e3       	ldi	r30, 0x3B	; 59
    1c60:	f0 e0       	ldi	r31, 0x00	; 0
    1c62:	8b 81       	ldd	r24, Y+3	; 0x03
    1c64:	81 70       	andi	r24, 0x01	; 1
    1c66:	98 2f       	mov	r25, r24
    1c68:	97 95       	ror	r25
    1c6a:	99 27       	eor	r25, r25
    1c6c:	97 95       	ror	r25
    1c6e:	80 81       	ld	r24, Z
    1c70:	8f 77       	andi	r24, 0x7F	; 127
    1c72:	89 2b       	or	r24, r25
    1c74:	80 83       	st	Z, r24
    1c76:	e2 c1       	rjmp	.+964    	; 0x203c <GPIO_writePin+0x574>
			}
			break;
		}
		case PORTB_ID:
		{
			switch(pin_num)
    1c78:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7a:	28 2f       	mov	r18, r24
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	39 87       	std	Y+9, r19	; 0x09
    1c80:	28 87       	std	Y+8, r18	; 0x08
    1c82:	88 85       	ldd	r24, Y+8	; 0x08
    1c84:	99 85       	ldd	r25, Y+9	; 0x09
    1c86:	83 30       	cpi	r24, 0x03	; 3
    1c88:	91 05       	cpc	r25, r1
    1c8a:	09 f4       	brne	.+2      	; 0x1c8e <GPIO_writePin+0x1c6>
    1c8c:	51 c0       	rjmp	.+162    	; 0x1d30 <GPIO_writePin+0x268>
    1c8e:	28 85       	ldd	r18, Y+8	; 0x08
    1c90:	39 85       	ldd	r19, Y+9	; 0x09
    1c92:	24 30       	cpi	r18, 0x04	; 4
    1c94:	31 05       	cpc	r19, r1
    1c96:	7c f4       	brge	.+30     	; 0x1cb6 <GPIO_writePin+0x1ee>
    1c98:	88 85       	ldd	r24, Y+8	; 0x08
    1c9a:	99 85       	ldd	r25, Y+9	; 0x09
    1c9c:	81 30       	cpi	r24, 0x01	; 1
    1c9e:	91 05       	cpc	r25, r1
    1ca0:	71 f1       	breq	.+92     	; 0x1cfe <GPIO_writePin+0x236>
    1ca2:	28 85       	ldd	r18, Y+8	; 0x08
    1ca4:	39 85       	ldd	r19, Y+9	; 0x09
    1ca6:	22 30       	cpi	r18, 0x02	; 2
    1ca8:	31 05       	cpc	r19, r1
    1caa:	ac f5       	brge	.+106    	; 0x1d16 <GPIO_writePin+0x24e>
    1cac:	88 85       	ldd	r24, Y+8	; 0x08
    1cae:	99 85       	ldd	r25, Y+9	; 0x09
    1cb0:	00 97       	sbiw	r24, 0x00	; 0
    1cb2:	d1 f0       	breq	.+52     	; 0x1ce8 <GPIO_writePin+0x220>
    1cb4:	c3 c1       	rjmp	.+902    	; 0x203c <GPIO_writePin+0x574>
    1cb6:	28 85       	ldd	r18, Y+8	; 0x08
    1cb8:	39 85       	ldd	r19, Y+9	; 0x09
    1cba:	25 30       	cpi	r18, 0x05	; 5
    1cbc:	31 05       	cpc	r19, r1
    1cbe:	09 f4       	brne	.+2      	; 0x1cc2 <GPIO_writePin+0x1fa>
    1cc0:	52 c0       	rjmp	.+164    	; 0x1d66 <GPIO_writePin+0x29e>
    1cc2:	88 85       	ldd	r24, Y+8	; 0x08
    1cc4:	99 85       	ldd	r25, Y+9	; 0x09
    1cc6:	85 30       	cpi	r24, 0x05	; 5
    1cc8:	91 05       	cpc	r25, r1
    1cca:	0c f4       	brge	.+2      	; 0x1cce <GPIO_writePin+0x206>
    1ccc:	3f c0       	rjmp	.+126    	; 0x1d4c <GPIO_writePin+0x284>
    1cce:	28 85       	ldd	r18, Y+8	; 0x08
    1cd0:	39 85       	ldd	r19, Y+9	; 0x09
    1cd2:	26 30       	cpi	r18, 0x06	; 6
    1cd4:	31 05       	cpc	r19, r1
    1cd6:	09 f4       	brne	.+2      	; 0x1cda <GPIO_writePin+0x212>
    1cd8:	54 c0       	rjmp	.+168    	; 0x1d82 <GPIO_writePin+0x2ba>
    1cda:	88 85       	ldd	r24, Y+8	; 0x08
    1cdc:	99 85       	ldd	r25, Y+9	; 0x09
    1cde:	87 30       	cpi	r24, 0x07	; 7
    1ce0:	91 05       	cpc	r25, r1
    1ce2:	09 f4       	brne	.+2      	; 0x1ce6 <GPIO_writePin+0x21e>
    1ce4:	5d c0       	rjmp	.+186    	; 0x1da0 <GPIO_writePin+0x2d8>
    1ce6:	aa c1       	rjmp	.+852    	; 0x203c <GPIO_writePin+0x574>
			{
			case 0:
				PORTB_REG.Bits.Bit0 = value;
    1ce8:	e8 e3       	ldi	r30, 0x38	; 56
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	8b 81       	ldd	r24, Y+3	; 0x03
    1cee:	81 70       	andi	r24, 0x01	; 1
    1cf0:	98 2f       	mov	r25, r24
    1cf2:	91 70       	andi	r25, 0x01	; 1
    1cf4:	80 81       	ld	r24, Z
    1cf6:	8e 7f       	andi	r24, 0xFE	; 254
    1cf8:	89 2b       	or	r24, r25
    1cfa:	80 83       	st	Z, r24
    1cfc:	9f c1       	rjmp	.+830    	; 0x203c <GPIO_writePin+0x574>
				break;
			case 1:
				PORTB_REG.Bits.Bit1 = value;
    1cfe:	e8 e3       	ldi	r30, 0x38	; 56
    1d00:	f0 e0       	ldi	r31, 0x00	; 0
    1d02:	8b 81       	ldd	r24, Y+3	; 0x03
    1d04:	81 70       	andi	r24, 0x01	; 1
    1d06:	81 70       	andi	r24, 0x01	; 1
    1d08:	98 2f       	mov	r25, r24
    1d0a:	99 0f       	add	r25, r25
    1d0c:	80 81       	ld	r24, Z
    1d0e:	8d 7f       	andi	r24, 0xFD	; 253
    1d10:	89 2b       	or	r24, r25
    1d12:	80 83       	st	Z, r24
    1d14:	93 c1       	rjmp	.+806    	; 0x203c <GPIO_writePin+0x574>
				break;
			case 2:
				PORTB_REG.Bits.Bit2 = value;
    1d16:	e8 e3       	ldi	r30, 0x38	; 56
    1d18:	f0 e0       	ldi	r31, 0x00	; 0
    1d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1c:	81 70       	andi	r24, 0x01	; 1
    1d1e:	81 70       	andi	r24, 0x01	; 1
    1d20:	98 2f       	mov	r25, r24
    1d22:	99 0f       	add	r25, r25
    1d24:	99 0f       	add	r25, r25
    1d26:	80 81       	ld	r24, Z
    1d28:	8b 7f       	andi	r24, 0xFB	; 251
    1d2a:	89 2b       	or	r24, r25
    1d2c:	80 83       	st	Z, r24
    1d2e:	86 c1       	rjmp	.+780    	; 0x203c <GPIO_writePin+0x574>
				break;
			case 3:
				PORTB_REG.Bits.Bit3 = value;
    1d30:	e8 e3       	ldi	r30, 0x38	; 56
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	8b 81       	ldd	r24, Y+3	; 0x03
    1d36:	81 70       	andi	r24, 0x01	; 1
    1d38:	81 70       	andi	r24, 0x01	; 1
    1d3a:	98 2f       	mov	r25, r24
    1d3c:	99 0f       	add	r25, r25
    1d3e:	99 0f       	add	r25, r25
    1d40:	99 0f       	add	r25, r25
    1d42:	80 81       	ld	r24, Z
    1d44:	87 7f       	andi	r24, 0xF7	; 247
    1d46:	89 2b       	or	r24, r25
    1d48:	80 83       	st	Z, r24
    1d4a:	78 c1       	rjmp	.+752    	; 0x203c <GPIO_writePin+0x574>
				break;
			case 4:
				PORTB_REG.Bits.Bit4 = value;
    1d4c:	e8 e3       	ldi	r30, 0x38	; 56
    1d4e:	f0 e0       	ldi	r31, 0x00	; 0
    1d50:	8b 81       	ldd	r24, Y+3	; 0x03
    1d52:	81 70       	andi	r24, 0x01	; 1
    1d54:	81 70       	andi	r24, 0x01	; 1
    1d56:	98 2f       	mov	r25, r24
    1d58:	92 95       	swap	r25
    1d5a:	90 7f       	andi	r25, 0xF0	; 240
    1d5c:	80 81       	ld	r24, Z
    1d5e:	8f 7e       	andi	r24, 0xEF	; 239
    1d60:	89 2b       	or	r24, r25
    1d62:	80 83       	st	Z, r24
    1d64:	6b c1       	rjmp	.+726    	; 0x203c <GPIO_writePin+0x574>
				break;
			case 5:
				PORTB_REG.Bits.Bit5 = value;
    1d66:	e8 e3       	ldi	r30, 0x38	; 56
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6c:	81 70       	andi	r24, 0x01	; 1
    1d6e:	81 70       	andi	r24, 0x01	; 1
    1d70:	98 2f       	mov	r25, r24
    1d72:	92 95       	swap	r25
    1d74:	99 0f       	add	r25, r25
    1d76:	90 7e       	andi	r25, 0xE0	; 224
    1d78:	80 81       	ld	r24, Z
    1d7a:	8f 7d       	andi	r24, 0xDF	; 223
    1d7c:	89 2b       	or	r24, r25
    1d7e:	80 83       	st	Z, r24
    1d80:	5d c1       	rjmp	.+698    	; 0x203c <GPIO_writePin+0x574>
				break;
			case 6:
				PORTB_REG.Bits.Bit6 = value;
    1d82:	e8 e3       	ldi	r30, 0x38	; 56
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	8b 81       	ldd	r24, Y+3	; 0x03
    1d88:	81 70       	andi	r24, 0x01	; 1
    1d8a:	81 70       	andi	r24, 0x01	; 1
    1d8c:	98 2f       	mov	r25, r24
    1d8e:	92 95       	swap	r25
    1d90:	99 0f       	add	r25, r25
    1d92:	99 0f       	add	r25, r25
    1d94:	90 7c       	andi	r25, 0xC0	; 192
    1d96:	80 81       	ld	r24, Z
    1d98:	8f 7b       	andi	r24, 0xBF	; 191
    1d9a:	89 2b       	or	r24, r25
    1d9c:	80 83       	st	Z, r24
    1d9e:	4e c1       	rjmp	.+668    	; 0x203c <GPIO_writePin+0x574>
				break;
			case 7:
				PORTB_REG.Bits.Bit7 = value;
    1da0:	e8 e3       	ldi	r30, 0x38	; 56
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	8b 81       	ldd	r24, Y+3	; 0x03
    1da6:	81 70       	andi	r24, 0x01	; 1
    1da8:	98 2f       	mov	r25, r24
    1daa:	97 95       	ror	r25
    1dac:	99 27       	eor	r25, r25
    1dae:	97 95       	ror	r25
    1db0:	80 81       	ld	r24, Z
    1db2:	8f 77       	andi	r24, 0x7F	; 127
    1db4:	89 2b       	or	r24, r25
    1db6:	80 83       	st	Z, r24
    1db8:	41 c1       	rjmp	.+642    	; 0x203c <GPIO_writePin+0x574>
			}
			break;
		}
		case PORTC_ID:
		{
			switch(pin_num)
    1dba:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbc:	28 2f       	mov	r18, r24
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	3f 83       	std	Y+7, r19	; 0x07
    1dc2:	2e 83       	std	Y+6, r18	; 0x06
    1dc4:	8e 81       	ldd	r24, Y+6	; 0x06
    1dc6:	9f 81       	ldd	r25, Y+7	; 0x07
    1dc8:	83 30       	cpi	r24, 0x03	; 3
    1dca:	91 05       	cpc	r25, r1
    1dcc:	09 f4       	brne	.+2      	; 0x1dd0 <GPIO_writePin+0x308>
    1dce:	51 c0       	rjmp	.+162    	; 0x1e72 <GPIO_writePin+0x3aa>
    1dd0:	2e 81       	ldd	r18, Y+6	; 0x06
    1dd2:	3f 81       	ldd	r19, Y+7	; 0x07
    1dd4:	24 30       	cpi	r18, 0x04	; 4
    1dd6:	31 05       	cpc	r19, r1
    1dd8:	7c f4       	brge	.+30     	; 0x1df8 <GPIO_writePin+0x330>
    1dda:	8e 81       	ldd	r24, Y+6	; 0x06
    1ddc:	9f 81       	ldd	r25, Y+7	; 0x07
    1dde:	81 30       	cpi	r24, 0x01	; 1
    1de0:	91 05       	cpc	r25, r1
    1de2:	71 f1       	breq	.+92     	; 0x1e40 <GPIO_writePin+0x378>
    1de4:	2e 81       	ldd	r18, Y+6	; 0x06
    1de6:	3f 81       	ldd	r19, Y+7	; 0x07
    1de8:	22 30       	cpi	r18, 0x02	; 2
    1dea:	31 05       	cpc	r19, r1
    1dec:	ac f5       	brge	.+106    	; 0x1e58 <GPIO_writePin+0x390>
    1dee:	8e 81       	ldd	r24, Y+6	; 0x06
    1df0:	9f 81       	ldd	r25, Y+7	; 0x07
    1df2:	00 97       	sbiw	r24, 0x00	; 0
    1df4:	d1 f0       	breq	.+52     	; 0x1e2a <GPIO_writePin+0x362>
    1df6:	22 c1       	rjmp	.+580    	; 0x203c <GPIO_writePin+0x574>
    1df8:	2e 81       	ldd	r18, Y+6	; 0x06
    1dfa:	3f 81       	ldd	r19, Y+7	; 0x07
    1dfc:	25 30       	cpi	r18, 0x05	; 5
    1dfe:	31 05       	cpc	r19, r1
    1e00:	09 f4       	brne	.+2      	; 0x1e04 <GPIO_writePin+0x33c>
    1e02:	52 c0       	rjmp	.+164    	; 0x1ea8 <GPIO_writePin+0x3e0>
    1e04:	8e 81       	ldd	r24, Y+6	; 0x06
    1e06:	9f 81       	ldd	r25, Y+7	; 0x07
    1e08:	85 30       	cpi	r24, 0x05	; 5
    1e0a:	91 05       	cpc	r25, r1
    1e0c:	0c f4       	brge	.+2      	; 0x1e10 <GPIO_writePin+0x348>
    1e0e:	3f c0       	rjmp	.+126    	; 0x1e8e <GPIO_writePin+0x3c6>
    1e10:	2e 81       	ldd	r18, Y+6	; 0x06
    1e12:	3f 81       	ldd	r19, Y+7	; 0x07
    1e14:	26 30       	cpi	r18, 0x06	; 6
    1e16:	31 05       	cpc	r19, r1
    1e18:	09 f4       	brne	.+2      	; 0x1e1c <GPIO_writePin+0x354>
    1e1a:	54 c0       	rjmp	.+168    	; 0x1ec4 <GPIO_writePin+0x3fc>
    1e1c:	8e 81       	ldd	r24, Y+6	; 0x06
    1e1e:	9f 81       	ldd	r25, Y+7	; 0x07
    1e20:	87 30       	cpi	r24, 0x07	; 7
    1e22:	91 05       	cpc	r25, r1
    1e24:	09 f4       	brne	.+2      	; 0x1e28 <GPIO_writePin+0x360>
    1e26:	5d c0       	rjmp	.+186    	; 0x1ee2 <GPIO_writePin+0x41a>
    1e28:	09 c1       	rjmp	.+530    	; 0x203c <GPIO_writePin+0x574>
			{
			case 0:
				PORTC_REG.Bits.Bit0 = value;
    1e2a:	e5 e3       	ldi	r30, 0x35	; 53
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e30:	81 70       	andi	r24, 0x01	; 1
    1e32:	98 2f       	mov	r25, r24
    1e34:	91 70       	andi	r25, 0x01	; 1
    1e36:	80 81       	ld	r24, Z
    1e38:	8e 7f       	andi	r24, 0xFE	; 254
    1e3a:	89 2b       	or	r24, r25
    1e3c:	80 83       	st	Z, r24
    1e3e:	fe c0       	rjmp	.+508    	; 0x203c <GPIO_writePin+0x574>
				break;
			case 1:
				PORTC_REG.Bits.Bit1 = value;
    1e40:	e5 e3       	ldi	r30, 0x35	; 53
    1e42:	f0 e0       	ldi	r31, 0x00	; 0
    1e44:	8b 81       	ldd	r24, Y+3	; 0x03
    1e46:	81 70       	andi	r24, 0x01	; 1
    1e48:	81 70       	andi	r24, 0x01	; 1
    1e4a:	98 2f       	mov	r25, r24
    1e4c:	99 0f       	add	r25, r25
    1e4e:	80 81       	ld	r24, Z
    1e50:	8d 7f       	andi	r24, 0xFD	; 253
    1e52:	89 2b       	or	r24, r25
    1e54:	80 83       	st	Z, r24
    1e56:	f2 c0       	rjmp	.+484    	; 0x203c <GPIO_writePin+0x574>
				break;
			case 2:
				PORTC_REG.Bits.Bit2 = value;
    1e58:	e5 e3       	ldi	r30, 0x35	; 53
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5e:	81 70       	andi	r24, 0x01	; 1
    1e60:	81 70       	andi	r24, 0x01	; 1
    1e62:	98 2f       	mov	r25, r24
    1e64:	99 0f       	add	r25, r25
    1e66:	99 0f       	add	r25, r25
    1e68:	80 81       	ld	r24, Z
    1e6a:	8b 7f       	andi	r24, 0xFB	; 251
    1e6c:	89 2b       	or	r24, r25
    1e6e:	80 83       	st	Z, r24
    1e70:	e5 c0       	rjmp	.+458    	; 0x203c <GPIO_writePin+0x574>
				break;
			case 3:
				PORTC_REG.Bits.Bit3 = value;
    1e72:	e5 e3       	ldi	r30, 0x35	; 53
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	8b 81       	ldd	r24, Y+3	; 0x03
    1e78:	81 70       	andi	r24, 0x01	; 1
    1e7a:	81 70       	andi	r24, 0x01	; 1
    1e7c:	98 2f       	mov	r25, r24
    1e7e:	99 0f       	add	r25, r25
    1e80:	99 0f       	add	r25, r25
    1e82:	99 0f       	add	r25, r25
    1e84:	80 81       	ld	r24, Z
    1e86:	87 7f       	andi	r24, 0xF7	; 247
    1e88:	89 2b       	or	r24, r25
    1e8a:	80 83       	st	Z, r24
    1e8c:	d7 c0       	rjmp	.+430    	; 0x203c <GPIO_writePin+0x574>
				break;
			case 4:
				PORTC_REG.Bits.Bit4 = value;
    1e8e:	e5 e3       	ldi	r30, 0x35	; 53
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	8b 81       	ldd	r24, Y+3	; 0x03
    1e94:	81 70       	andi	r24, 0x01	; 1
    1e96:	81 70       	andi	r24, 0x01	; 1
    1e98:	98 2f       	mov	r25, r24
    1e9a:	92 95       	swap	r25
    1e9c:	90 7f       	andi	r25, 0xF0	; 240
    1e9e:	80 81       	ld	r24, Z
    1ea0:	8f 7e       	andi	r24, 0xEF	; 239
    1ea2:	89 2b       	or	r24, r25
    1ea4:	80 83       	st	Z, r24
    1ea6:	ca c0       	rjmp	.+404    	; 0x203c <GPIO_writePin+0x574>
				break;
			case 5:
				PORTC_REG.Bits.Bit5 = value;
    1ea8:	e5 e3       	ldi	r30, 0x35	; 53
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	8b 81       	ldd	r24, Y+3	; 0x03
    1eae:	81 70       	andi	r24, 0x01	; 1
    1eb0:	81 70       	andi	r24, 0x01	; 1
    1eb2:	98 2f       	mov	r25, r24
    1eb4:	92 95       	swap	r25
    1eb6:	99 0f       	add	r25, r25
    1eb8:	90 7e       	andi	r25, 0xE0	; 224
    1eba:	80 81       	ld	r24, Z
    1ebc:	8f 7d       	andi	r24, 0xDF	; 223
    1ebe:	89 2b       	or	r24, r25
    1ec0:	80 83       	st	Z, r24
    1ec2:	bc c0       	rjmp	.+376    	; 0x203c <GPIO_writePin+0x574>
				break;
			case 6:
				PORTC_REG.Bits.Bit6 = value;
    1ec4:	e5 e3       	ldi	r30, 0x35	; 53
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eca:	81 70       	andi	r24, 0x01	; 1
    1ecc:	81 70       	andi	r24, 0x01	; 1
    1ece:	98 2f       	mov	r25, r24
    1ed0:	92 95       	swap	r25
    1ed2:	99 0f       	add	r25, r25
    1ed4:	99 0f       	add	r25, r25
    1ed6:	90 7c       	andi	r25, 0xC0	; 192
    1ed8:	80 81       	ld	r24, Z
    1eda:	8f 7b       	andi	r24, 0xBF	; 191
    1edc:	89 2b       	or	r24, r25
    1ede:	80 83       	st	Z, r24
    1ee0:	ad c0       	rjmp	.+346    	; 0x203c <GPIO_writePin+0x574>
				break;
			case 7:
				PORTC_REG.Bits.Bit7 = value;
    1ee2:	e5 e3       	ldi	r30, 0x35	; 53
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee8:	81 70       	andi	r24, 0x01	; 1
    1eea:	98 2f       	mov	r25, r24
    1eec:	97 95       	ror	r25
    1eee:	99 27       	eor	r25, r25
    1ef0:	97 95       	ror	r25
    1ef2:	80 81       	ld	r24, Z
    1ef4:	8f 77       	andi	r24, 0x7F	; 127
    1ef6:	89 2b       	or	r24, r25
    1ef8:	80 83       	st	Z, r24
    1efa:	a0 c0       	rjmp	.+320    	; 0x203c <GPIO_writePin+0x574>
			}
			break;
		}
		case PORTD_ID:
		{
			switch(pin_num)
    1efc:	8a 81       	ldd	r24, Y+2	; 0x02
    1efe:	28 2f       	mov	r18, r24
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	3d 83       	std	Y+5, r19	; 0x05
    1f04:	2c 83       	std	Y+4, r18	; 0x04
    1f06:	8c 81       	ldd	r24, Y+4	; 0x04
    1f08:	9d 81       	ldd	r25, Y+5	; 0x05
    1f0a:	83 30       	cpi	r24, 0x03	; 3
    1f0c:	91 05       	cpc	r25, r1
    1f0e:	09 f4       	brne	.+2      	; 0x1f12 <GPIO_writePin+0x44a>
    1f10:	51 c0       	rjmp	.+162    	; 0x1fb4 <GPIO_writePin+0x4ec>
    1f12:	2c 81       	ldd	r18, Y+4	; 0x04
    1f14:	3d 81       	ldd	r19, Y+5	; 0x05
    1f16:	24 30       	cpi	r18, 0x04	; 4
    1f18:	31 05       	cpc	r19, r1
    1f1a:	7c f4       	brge	.+30     	; 0x1f3a <GPIO_writePin+0x472>
    1f1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f1e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f20:	81 30       	cpi	r24, 0x01	; 1
    1f22:	91 05       	cpc	r25, r1
    1f24:	71 f1       	breq	.+92     	; 0x1f82 <GPIO_writePin+0x4ba>
    1f26:	2c 81       	ldd	r18, Y+4	; 0x04
    1f28:	3d 81       	ldd	r19, Y+5	; 0x05
    1f2a:	22 30       	cpi	r18, 0x02	; 2
    1f2c:	31 05       	cpc	r19, r1
    1f2e:	ac f5       	brge	.+106    	; 0x1f9a <GPIO_writePin+0x4d2>
    1f30:	8c 81       	ldd	r24, Y+4	; 0x04
    1f32:	9d 81       	ldd	r25, Y+5	; 0x05
    1f34:	00 97       	sbiw	r24, 0x00	; 0
    1f36:	d1 f0       	breq	.+52     	; 0x1f6c <GPIO_writePin+0x4a4>
    1f38:	81 c0       	rjmp	.+258    	; 0x203c <GPIO_writePin+0x574>
    1f3a:	2c 81       	ldd	r18, Y+4	; 0x04
    1f3c:	3d 81       	ldd	r19, Y+5	; 0x05
    1f3e:	25 30       	cpi	r18, 0x05	; 5
    1f40:	31 05       	cpc	r19, r1
    1f42:	09 f4       	brne	.+2      	; 0x1f46 <GPIO_writePin+0x47e>
    1f44:	52 c0       	rjmp	.+164    	; 0x1fea <GPIO_writePin+0x522>
    1f46:	8c 81       	ldd	r24, Y+4	; 0x04
    1f48:	9d 81       	ldd	r25, Y+5	; 0x05
    1f4a:	85 30       	cpi	r24, 0x05	; 5
    1f4c:	91 05       	cpc	r25, r1
    1f4e:	0c f4       	brge	.+2      	; 0x1f52 <GPIO_writePin+0x48a>
    1f50:	3f c0       	rjmp	.+126    	; 0x1fd0 <GPIO_writePin+0x508>
    1f52:	2c 81       	ldd	r18, Y+4	; 0x04
    1f54:	3d 81       	ldd	r19, Y+5	; 0x05
    1f56:	26 30       	cpi	r18, 0x06	; 6
    1f58:	31 05       	cpc	r19, r1
    1f5a:	09 f4       	brne	.+2      	; 0x1f5e <GPIO_writePin+0x496>
    1f5c:	54 c0       	rjmp	.+168    	; 0x2006 <GPIO_writePin+0x53e>
    1f5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f60:	9d 81       	ldd	r25, Y+5	; 0x05
    1f62:	87 30       	cpi	r24, 0x07	; 7
    1f64:	91 05       	cpc	r25, r1
    1f66:	09 f4       	brne	.+2      	; 0x1f6a <GPIO_writePin+0x4a2>
    1f68:	5d c0       	rjmp	.+186    	; 0x2024 <GPIO_writePin+0x55c>
    1f6a:	68 c0       	rjmp	.+208    	; 0x203c <GPIO_writePin+0x574>
			{
			case 0:
				PORTD_REG.Bits.Bit0 = value;
    1f6c:	e2 e3       	ldi	r30, 0x32	; 50
    1f6e:	f0 e0       	ldi	r31, 0x00	; 0
    1f70:	8b 81       	ldd	r24, Y+3	; 0x03
    1f72:	81 70       	andi	r24, 0x01	; 1
    1f74:	98 2f       	mov	r25, r24
    1f76:	91 70       	andi	r25, 0x01	; 1
    1f78:	80 81       	ld	r24, Z
    1f7a:	8e 7f       	andi	r24, 0xFE	; 254
    1f7c:	89 2b       	or	r24, r25
    1f7e:	80 83       	st	Z, r24
    1f80:	5d c0       	rjmp	.+186    	; 0x203c <GPIO_writePin+0x574>
				break;
			case 1:
				PORTD_REG.Bits.Bit1 = value;
    1f82:	e2 e3       	ldi	r30, 0x32	; 50
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	8b 81       	ldd	r24, Y+3	; 0x03
    1f88:	81 70       	andi	r24, 0x01	; 1
    1f8a:	81 70       	andi	r24, 0x01	; 1
    1f8c:	98 2f       	mov	r25, r24
    1f8e:	99 0f       	add	r25, r25
    1f90:	80 81       	ld	r24, Z
    1f92:	8d 7f       	andi	r24, 0xFD	; 253
    1f94:	89 2b       	or	r24, r25
    1f96:	80 83       	st	Z, r24
    1f98:	51 c0       	rjmp	.+162    	; 0x203c <GPIO_writePin+0x574>
				break;
			case 2:
				PORTD_REG.Bits.Bit2 = value;
    1f9a:	e2 e3       	ldi	r30, 0x32	; 50
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa0:	81 70       	andi	r24, 0x01	; 1
    1fa2:	81 70       	andi	r24, 0x01	; 1
    1fa4:	98 2f       	mov	r25, r24
    1fa6:	99 0f       	add	r25, r25
    1fa8:	99 0f       	add	r25, r25
    1faa:	80 81       	ld	r24, Z
    1fac:	8b 7f       	andi	r24, 0xFB	; 251
    1fae:	89 2b       	or	r24, r25
    1fb0:	80 83       	st	Z, r24
    1fb2:	44 c0       	rjmp	.+136    	; 0x203c <GPIO_writePin+0x574>
				break;
			case 3:
				PORTD_REG.Bits.Bit3 = value;
    1fb4:	e2 e3       	ldi	r30, 0x32	; 50
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fba:	81 70       	andi	r24, 0x01	; 1
    1fbc:	81 70       	andi	r24, 0x01	; 1
    1fbe:	98 2f       	mov	r25, r24
    1fc0:	99 0f       	add	r25, r25
    1fc2:	99 0f       	add	r25, r25
    1fc4:	99 0f       	add	r25, r25
    1fc6:	80 81       	ld	r24, Z
    1fc8:	87 7f       	andi	r24, 0xF7	; 247
    1fca:	89 2b       	or	r24, r25
    1fcc:	80 83       	st	Z, r24
    1fce:	36 c0       	rjmp	.+108    	; 0x203c <GPIO_writePin+0x574>
				break;
			case 4:
				PORTD_REG.Bits.Bit4 = value;
    1fd0:	e2 e3       	ldi	r30, 0x32	; 50
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd6:	81 70       	andi	r24, 0x01	; 1
    1fd8:	81 70       	andi	r24, 0x01	; 1
    1fda:	98 2f       	mov	r25, r24
    1fdc:	92 95       	swap	r25
    1fde:	90 7f       	andi	r25, 0xF0	; 240
    1fe0:	80 81       	ld	r24, Z
    1fe2:	8f 7e       	andi	r24, 0xEF	; 239
    1fe4:	89 2b       	or	r24, r25
    1fe6:	80 83       	st	Z, r24
    1fe8:	29 c0       	rjmp	.+82     	; 0x203c <GPIO_writePin+0x574>
				break;
			case 5:
				PORTD_REG.Bits.Bit5 = value;
    1fea:	e2 e3       	ldi	r30, 0x32	; 50
    1fec:	f0 e0       	ldi	r31, 0x00	; 0
    1fee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff0:	81 70       	andi	r24, 0x01	; 1
    1ff2:	81 70       	andi	r24, 0x01	; 1
    1ff4:	98 2f       	mov	r25, r24
    1ff6:	92 95       	swap	r25
    1ff8:	99 0f       	add	r25, r25
    1ffa:	90 7e       	andi	r25, 0xE0	; 224
    1ffc:	80 81       	ld	r24, Z
    1ffe:	8f 7d       	andi	r24, 0xDF	; 223
    2000:	89 2b       	or	r24, r25
    2002:	80 83       	st	Z, r24
    2004:	1b c0       	rjmp	.+54     	; 0x203c <GPIO_writePin+0x574>
				break;
			case 6:
				PORTD_REG.Bits.Bit6 = value;
    2006:	e2 e3       	ldi	r30, 0x32	; 50
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	8b 81       	ldd	r24, Y+3	; 0x03
    200c:	81 70       	andi	r24, 0x01	; 1
    200e:	81 70       	andi	r24, 0x01	; 1
    2010:	98 2f       	mov	r25, r24
    2012:	92 95       	swap	r25
    2014:	99 0f       	add	r25, r25
    2016:	99 0f       	add	r25, r25
    2018:	90 7c       	andi	r25, 0xC0	; 192
    201a:	80 81       	ld	r24, Z
    201c:	8f 7b       	andi	r24, 0xBF	; 191
    201e:	89 2b       	or	r24, r25
    2020:	80 83       	st	Z, r24
    2022:	0c c0       	rjmp	.+24     	; 0x203c <GPIO_writePin+0x574>
				break;
			case 7:
				PORTD_REG.Bits.Bit7 = value;
    2024:	e2 e3       	ldi	r30, 0x32	; 50
    2026:	f0 e0       	ldi	r31, 0x00	; 0
    2028:	8b 81       	ldd	r24, Y+3	; 0x03
    202a:	81 70       	andi	r24, 0x01	; 1
    202c:	98 2f       	mov	r25, r24
    202e:	97 95       	ror	r25
    2030:	99 27       	eor	r25, r25
    2032:	97 95       	ror	r25
    2034:	80 81       	ld	r24, Z
    2036:	8f 77       	andi	r24, 0x7F	; 127
    2038:	89 2b       	or	r24, r25
    203a:	80 83       	st	Z, r24
			}
			break;
		}
		}
	}
}
    203c:	2d 96       	adiw	r28, 0x0d	; 13
    203e:	0f b6       	in	r0, 0x3f	; 63
    2040:	f8 94       	cli
    2042:	de bf       	out	0x3e, r29	; 62
    2044:	0f be       	out	0x3f, r0	; 63
    2046:	cd bf       	out	0x3d, r28	; 61
    2048:	cf 91       	pop	r28
    204a:	df 91       	pop	r29
    204c:	08 95       	ret

0000204e <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    204e:	df 93       	push	r29
    2050:	cf 93       	push	r28
    2052:	cd b7       	in	r28, 0x3d	; 61
    2054:	de b7       	in	r29, 0x3e	; 62
    2056:	2d 97       	sbiw	r28, 0x0d	; 13
    2058:	0f b6       	in	r0, 0x3f	; 63
    205a:	f8 94       	cli
    205c:	de bf       	out	0x3e, r29	; 62
    205e:	0f be       	out	0x3f, r0	; 63
    2060:	cd bf       	out	0x3d, r28	; 61
    2062:	8a 83       	std	Y+2, r24	; 0x02
    2064:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    2066:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2068:	8b 81       	ldd	r24, Y+3	; 0x03
    206a:	88 30       	cpi	r24, 0x08	; 8
    206c:	08 f0       	brcs	.+2      	; 0x2070 <GPIO_readPin+0x22>
    206e:	f9 c1       	rjmp	.+1010   	; 0x2462 <GPIO_readPin+0x414>
    2070:	8a 81       	ldd	r24, Y+2	; 0x02
    2072:	84 30       	cpi	r24, 0x04	; 4
    2074:	08 f0       	brcs	.+2      	; 0x2078 <GPIO_readPin+0x2a>
    2076:	f5 c1       	rjmp	.+1002   	; 0x2462 <GPIO_readPin+0x414>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    2078:	8a 81       	ldd	r24, Y+2	; 0x02
    207a:	28 2f       	mov	r18, r24
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	3d 87       	std	Y+13, r19	; 0x0d
    2080:	2c 87       	std	Y+12, r18	; 0x0c
    2082:	8c 85       	ldd	r24, Y+12	; 0x0c
    2084:	9d 85       	ldd	r25, Y+13	; 0x0d
    2086:	81 30       	cpi	r24, 0x01	; 1
    2088:	91 05       	cpc	r25, r1
    208a:	09 f4       	brne	.+2      	; 0x208e <GPIO_readPin+0x40>
    208c:	8c c0       	rjmp	.+280    	; 0x21a6 <GPIO_readPin+0x158>
    208e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2090:	3d 85       	ldd	r19, Y+13	; 0x0d
    2092:	22 30       	cpi	r18, 0x02	; 2
    2094:	31 05       	cpc	r19, r1
    2096:	2c f4       	brge	.+10     	; 0x20a2 <GPIO_readPin+0x54>
    2098:	8c 85       	ldd	r24, Y+12	; 0x0c
    209a:	9d 85       	ldd	r25, Y+13	; 0x0d
    209c:	00 97       	sbiw	r24, 0x00	; 0
    209e:	71 f0       	breq	.+28     	; 0x20bc <GPIO_readPin+0x6e>
    20a0:	e0 c1       	rjmp	.+960    	; 0x2462 <GPIO_readPin+0x414>
    20a2:	2c 85       	ldd	r18, Y+12	; 0x0c
    20a4:	3d 85       	ldd	r19, Y+13	; 0x0d
    20a6:	22 30       	cpi	r18, 0x02	; 2
    20a8:	31 05       	cpc	r19, r1
    20aa:	09 f4       	brne	.+2      	; 0x20ae <GPIO_readPin+0x60>
    20ac:	f1 c0       	rjmp	.+482    	; 0x2290 <GPIO_readPin+0x242>
    20ae:	8c 85       	ldd	r24, Y+12	; 0x0c
    20b0:	9d 85       	ldd	r25, Y+13	; 0x0d
    20b2:	83 30       	cpi	r24, 0x03	; 3
    20b4:	91 05       	cpc	r25, r1
    20b6:	09 f4       	brne	.+2      	; 0x20ba <GPIO_readPin+0x6c>
    20b8:	60 c1       	rjmp	.+704    	; 0x237a <GPIO_readPin+0x32c>
    20ba:	d3 c1       	rjmp	.+934    	; 0x2462 <GPIO_readPin+0x414>
		{
		case PORTA_ID:
		{
			switch(pin_num)
    20bc:	8b 81       	ldd	r24, Y+3	; 0x03
    20be:	28 2f       	mov	r18, r24
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	3b 87       	std	Y+11, r19	; 0x0b
    20c4:	2a 87       	std	Y+10, r18	; 0x0a
    20c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    20c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    20ca:	83 30       	cpi	r24, 0x03	; 3
    20cc:	91 05       	cpc	r25, r1
    20ce:	09 f4       	brne	.+2      	; 0x20d2 <GPIO_readPin+0x84>
    20d0:	3e c0       	rjmp	.+124    	; 0x214e <GPIO_readPin+0x100>
    20d2:	2a 85       	ldd	r18, Y+10	; 0x0a
    20d4:	3b 85       	ldd	r19, Y+11	; 0x0b
    20d6:	24 30       	cpi	r18, 0x04	; 4
    20d8:	31 05       	cpc	r19, r1
    20da:	7c f4       	brge	.+30     	; 0x20fa <GPIO_readPin+0xac>
    20dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    20de:	9b 85       	ldd	r25, Y+11	; 0x0b
    20e0:	81 30       	cpi	r24, 0x01	; 1
    20e2:	91 05       	cpc	r25, r1
    20e4:	29 f1       	breq	.+74     	; 0x2130 <GPIO_readPin+0xe2>
    20e6:	2a 85       	ldd	r18, Y+10	; 0x0a
    20e8:	3b 85       	ldd	r19, Y+11	; 0x0b
    20ea:	22 30       	cpi	r18, 0x02	; 2
    20ec:	31 05       	cpc	r19, r1
    20ee:	3c f5       	brge	.+78     	; 0x213e <GPIO_readPin+0xf0>
    20f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    20f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    20f4:	00 97       	sbiw	r24, 0x00	; 0
    20f6:	b1 f0       	breq	.+44     	; 0x2124 <GPIO_readPin+0xd6>
    20f8:	b4 c1       	rjmp	.+872    	; 0x2462 <GPIO_readPin+0x414>
    20fa:	2a 85       	ldd	r18, Y+10	; 0x0a
    20fc:	3b 85       	ldd	r19, Y+11	; 0x0b
    20fe:	25 30       	cpi	r18, 0x05	; 5
    2100:	31 05       	cpc	r19, r1
    2102:	b1 f1       	breq	.+108    	; 0x2170 <GPIO_readPin+0x122>
    2104:	8a 85       	ldd	r24, Y+10	; 0x0a
    2106:	9b 85       	ldd	r25, Y+11	; 0x0b
    2108:	85 30       	cpi	r24, 0x05	; 5
    210a:	91 05       	cpc	r25, r1
    210c:	4c f1       	brlt	.+82     	; 0x2160 <GPIO_readPin+0x112>
    210e:	2a 85       	ldd	r18, Y+10	; 0x0a
    2110:	3b 85       	ldd	r19, Y+11	; 0x0b
    2112:	26 30       	cpi	r18, 0x06	; 6
    2114:	31 05       	cpc	r19, r1
    2116:	a9 f1       	breq	.+106    	; 0x2182 <GPIO_readPin+0x134>
    2118:	8a 85       	ldd	r24, Y+10	; 0x0a
    211a:	9b 85       	ldd	r25, Y+11	; 0x0b
    211c:	87 30       	cpi	r24, 0x07	; 7
    211e:	91 05       	cpc	r25, r1
    2120:	d1 f1       	breq	.+116    	; 0x2196 <GPIO_readPin+0x148>
    2122:	9f c1       	rjmp	.+830    	; 0x2462 <GPIO_readPin+0x414>
			{
			case 0:
				pin_value = PINA_REG.Bits.Bit0;
    2124:	e9 e3       	ldi	r30, 0x39	; 57
    2126:	f0 e0       	ldi	r31, 0x00	; 0
    2128:	80 81       	ld	r24, Z
    212a:	81 70       	andi	r24, 0x01	; 1
    212c:	89 83       	std	Y+1, r24	; 0x01
    212e:	99 c1       	rjmp	.+818    	; 0x2462 <GPIO_readPin+0x414>
				break;
			case 1:
				pin_value = PINA_REG.Bits.Bit1;
    2130:	e9 e3       	ldi	r30, 0x39	; 57
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	80 81       	ld	r24, Z
    2136:	86 95       	lsr	r24
    2138:	81 70       	andi	r24, 0x01	; 1
    213a:	89 83       	std	Y+1, r24	; 0x01
    213c:	92 c1       	rjmp	.+804    	; 0x2462 <GPIO_readPin+0x414>
				break;
			case 2:
				pin_value = PINA_REG.Bits.Bit2;
    213e:	e9 e3       	ldi	r30, 0x39	; 57
    2140:	f0 e0       	ldi	r31, 0x00	; 0
    2142:	80 81       	ld	r24, Z
    2144:	86 95       	lsr	r24
    2146:	86 95       	lsr	r24
    2148:	81 70       	andi	r24, 0x01	; 1
    214a:	89 83       	std	Y+1, r24	; 0x01
    214c:	8a c1       	rjmp	.+788    	; 0x2462 <GPIO_readPin+0x414>
				break;
			case 3:
				pin_value = PINA_REG.Bits.Bit3;
    214e:	e9 e3       	ldi	r30, 0x39	; 57
    2150:	f0 e0       	ldi	r31, 0x00	; 0
    2152:	80 81       	ld	r24, Z
    2154:	86 95       	lsr	r24
    2156:	86 95       	lsr	r24
    2158:	86 95       	lsr	r24
    215a:	81 70       	andi	r24, 0x01	; 1
    215c:	89 83       	std	Y+1, r24	; 0x01
    215e:	81 c1       	rjmp	.+770    	; 0x2462 <GPIO_readPin+0x414>
				break;
			case 4:
				pin_value = PINA_REG.Bits.Bit4;
    2160:	e9 e3       	ldi	r30, 0x39	; 57
    2162:	f0 e0       	ldi	r31, 0x00	; 0
    2164:	80 81       	ld	r24, Z
    2166:	82 95       	swap	r24
    2168:	8f 70       	andi	r24, 0x0F	; 15
    216a:	81 70       	andi	r24, 0x01	; 1
    216c:	89 83       	std	Y+1, r24	; 0x01
    216e:	79 c1       	rjmp	.+754    	; 0x2462 <GPIO_readPin+0x414>
				break;
			case 5:
				pin_value = PINA_REG.Bits.Bit5;
    2170:	e9 e3       	ldi	r30, 0x39	; 57
    2172:	f0 e0       	ldi	r31, 0x00	; 0
    2174:	80 81       	ld	r24, Z
    2176:	82 95       	swap	r24
    2178:	86 95       	lsr	r24
    217a:	87 70       	andi	r24, 0x07	; 7
    217c:	81 70       	andi	r24, 0x01	; 1
    217e:	89 83       	std	Y+1, r24	; 0x01
    2180:	70 c1       	rjmp	.+736    	; 0x2462 <GPIO_readPin+0x414>
				break;
			case 6:
				pin_value = PINA_REG.Bits.Bit6;
    2182:	e9 e3       	ldi	r30, 0x39	; 57
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	80 81       	ld	r24, Z
    2188:	82 95       	swap	r24
    218a:	86 95       	lsr	r24
    218c:	86 95       	lsr	r24
    218e:	83 70       	andi	r24, 0x03	; 3
    2190:	81 70       	andi	r24, 0x01	; 1
    2192:	89 83       	std	Y+1, r24	; 0x01
    2194:	66 c1       	rjmp	.+716    	; 0x2462 <GPIO_readPin+0x414>
				break;
			case 7:
				pin_value = PINA_REG.Bits.Bit7;
    2196:	e9 e3       	ldi	r30, 0x39	; 57
    2198:	f0 e0       	ldi	r31, 0x00	; 0
    219a:	80 81       	ld	r24, Z
    219c:	88 1f       	adc	r24, r24
    219e:	88 27       	eor	r24, r24
    21a0:	88 1f       	adc	r24, r24
    21a2:	89 83       	std	Y+1, r24	; 0x01
    21a4:	5e c1       	rjmp	.+700    	; 0x2462 <GPIO_readPin+0x414>
			}
			break;
		}
		case PORTB_ID:
		{
			switch(pin_num)
    21a6:	8b 81       	ldd	r24, Y+3	; 0x03
    21a8:	28 2f       	mov	r18, r24
    21aa:	30 e0       	ldi	r19, 0x00	; 0
    21ac:	39 87       	std	Y+9, r19	; 0x09
    21ae:	28 87       	std	Y+8, r18	; 0x08
    21b0:	88 85       	ldd	r24, Y+8	; 0x08
    21b2:	99 85       	ldd	r25, Y+9	; 0x09
    21b4:	83 30       	cpi	r24, 0x03	; 3
    21b6:	91 05       	cpc	r25, r1
    21b8:	09 f4       	brne	.+2      	; 0x21bc <GPIO_readPin+0x16e>
    21ba:	3e c0       	rjmp	.+124    	; 0x2238 <GPIO_readPin+0x1ea>
    21bc:	28 85       	ldd	r18, Y+8	; 0x08
    21be:	39 85       	ldd	r19, Y+9	; 0x09
    21c0:	24 30       	cpi	r18, 0x04	; 4
    21c2:	31 05       	cpc	r19, r1
    21c4:	7c f4       	brge	.+30     	; 0x21e4 <GPIO_readPin+0x196>
    21c6:	88 85       	ldd	r24, Y+8	; 0x08
    21c8:	99 85       	ldd	r25, Y+9	; 0x09
    21ca:	81 30       	cpi	r24, 0x01	; 1
    21cc:	91 05       	cpc	r25, r1
    21ce:	29 f1       	breq	.+74     	; 0x221a <GPIO_readPin+0x1cc>
    21d0:	28 85       	ldd	r18, Y+8	; 0x08
    21d2:	39 85       	ldd	r19, Y+9	; 0x09
    21d4:	22 30       	cpi	r18, 0x02	; 2
    21d6:	31 05       	cpc	r19, r1
    21d8:	3c f5       	brge	.+78     	; 0x2228 <GPIO_readPin+0x1da>
    21da:	88 85       	ldd	r24, Y+8	; 0x08
    21dc:	99 85       	ldd	r25, Y+9	; 0x09
    21de:	00 97       	sbiw	r24, 0x00	; 0
    21e0:	b1 f0       	breq	.+44     	; 0x220e <GPIO_readPin+0x1c0>
    21e2:	3f c1       	rjmp	.+638    	; 0x2462 <GPIO_readPin+0x414>
    21e4:	28 85       	ldd	r18, Y+8	; 0x08
    21e6:	39 85       	ldd	r19, Y+9	; 0x09
    21e8:	25 30       	cpi	r18, 0x05	; 5
    21ea:	31 05       	cpc	r19, r1
    21ec:	b1 f1       	breq	.+108    	; 0x225a <GPIO_readPin+0x20c>
    21ee:	88 85       	ldd	r24, Y+8	; 0x08
    21f0:	99 85       	ldd	r25, Y+9	; 0x09
    21f2:	85 30       	cpi	r24, 0x05	; 5
    21f4:	91 05       	cpc	r25, r1
    21f6:	4c f1       	brlt	.+82     	; 0x224a <GPIO_readPin+0x1fc>
    21f8:	28 85       	ldd	r18, Y+8	; 0x08
    21fa:	39 85       	ldd	r19, Y+9	; 0x09
    21fc:	26 30       	cpi	r18, 0x06	; 6
    21fe:	31 05       	cpc	r19, r1
    2200:	a9 f1       	breq	.+106    	; 0x226c <GPIO_readPin+0x21e>
    2202:	88 85       	ldd	r24, Y+8	; 0x08
    2204:	99 85       	ldd	r25, Y+9	; 0x09
    2206:	87 30       	cpi	r24, 0x07	; 7
    2208:	91 05       	cpc	r25, r1
    220a:	d1 f1       	breq	.+116    	; 0x2280 <GPIO_readPin+0x232>
    220c:	2a c1       	rjmp	.+596    	; 0x2462 <GPIO_readPin+0x414>
			{
			case 0:
				pin_value = PINB_REG.Bits.Bit0;
    220e:	e6 e3       	ldi	r30, 0x36	; 54
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	80 81       	ld	r24, Z
    2214:	81 70       	andi	r24, 0x01	; 1
    2216:	89 83       	std	Y+1, r24	; 0x01
    2218:	24 c1       	rjmp	.+584    	; 0x2462 <GPIO_readPin+0x414>
				break;
			case 1:
				pin_value = PINB_REG.Bits.Bit1;
    221a:	e6 e3       	ldi	r30, 0x36	; 54
    221c:	f0 e0       	ldi	r31, 0x00	; 0
    221e:	80 81       	ld	r24, Z
    2220:	86 95       	lsr	r24
    2222:	81 70       	andi	r24, 0x01	; 1
    2224:	89 83       	std	Y+1, r24	; 0x01
    2226:	1d c1       	rjmp	.+570    	; 0x2462 <GPIO_readPin+0x414>
				break;
			case 2:
				pin_value = PINB_REG.Bits.Bit2;
    2228:	e6 e3       	ldi	r30, 0x36	; 54
    222a:	f0 e0       	ldi	r31, 0x00	; 0
    222c:	80 81       	ld	r24, Z
    222e:	86 95       	lsr	r24
    2230:	86 95       	lsr	r24
    2232:	81 70       	andi	r24, 0x01	; 1
    2234:	89 83       	std	Y+1, r24	; 0x01
    2236:	15 c1       	rjmp	.+554    	; 0x2462 <GPIO_readPin+0x414>
				break;
			case 3:
				pin_value = PINB_REG.Bits.Bit3;
    2238:	e6 e3       	ldi	r30, 0x36	; 54
    223a:	f0 e0       	ldi	r31, 0x00	; 0
    223c:	80 81       	ld	r24, Z
    223e:	86 95       	lsr	r24
    2240:	86 95       	lsr	r24
    2242:	86 95       	lsr	r24
    2244:	81 70       	andi	r24, 0x01	; 1
    2246:	89 83       	std	Y+1, r24	; 0x01
    2248:	0c c1       	rjmp	.+536    	; 0x2462 <GPIO_readPin+0x414>
				break;
			case 4:
				pin_value = PINB_REG.Bits.Bit4;
    224a:	e6 e3       	ldi	r30, 0x36	; 54
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	80 81       	ld	r24, Z
    2250:	82 95       	swap	r24
    2252:	8f 70       	andi	r24, 0x0F	; 15
    2254:	81 70       	andi	r24, 0x01	; 1
    2256:	89 83       	std	Y+1, r24	; 0x01
    2258:	04 c1       	rjmp	.+520    	; 0x2462 <GPIO_readPin+0x414>
				break;
			case 5:
				pin_value = PINB_REG.Bits.Bit5;
    225a:	e6 e3       	ldi	r30, 0x36	; 54
    225c:	f0 e0       	ldi	r31, 0x00	; 0
    225e:	80 81       	ld	r24, Z
    2260:	82 95       	swap	r24
    2262:	86 95       	lsr	r24
    2264:	87 70       	andi	r24, 0x07	; 7
    2266:	81 70       	andi	r24, 0x01	; 1
    2268:	89 83       	std	Y+1, r24	; 0x01
    226a:	fb c0       	rjmp	.+502    	; 0x2462 <GPIO_readPin+0x414>
				break;
			case 6:
				pin_value = PINB_REG.Bits.Bit6;
    226c:	e6 e3       	ldi	r30, 0x36	; 54
    226e:	f0 e0       	ldi	r31, 0x00	; 0
    2270:	80 81       	ld	r24, Z
    2272:	82 95       	swap	r24
    2274:	86 95       	lsr	r24
    2276:	86 95       	lsr	r24
    2278:	83 70       	andi	r24, 0x03	; 3
    227a:	81 70       	andi	r24, 0x01	; 1
    227c:	89 83       	std	Y+1, r24	; 0x01
    227e:	f1 c0       	rjmp	.+482    	; 0x2462 <GPIO_readPin+0x414>
				break;
			case 7:
				pin_value = PINB_REG.Bits.Bit7;
    2280:	e6 e3       	ldi	r30, 0x36	; 54
    2282:	f0 e0       	ldi	r31, 0x00	; 0
    2284:	80 81       	ld	r24, Z
    2286:	88 1f       	adc	r24, r24
    2288:	88 27       	eor	r24, r24
    228a:	88 1f       	adc	r24, r24
    228c:	89 83       	std	Y+1, r24	; 0x01
    228e:	e9 c0       	rjmp	.+466    	; 0x2462 <GPIO_readPin+0x414>
			}
			break;
		}
		case PORTC_ID:
		{
			switch(pin_num)
    2290:	8b 81       	ldd	r24, Y+3	; 0x03
    2292:	28 2f       	mov	r18, r24
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	3f 83       	std	Y+7, r19	; 0x07
    2298:	2e 83       	std	Y+6, r18	; 0x06
    229a:	8e 81       	ldd	r24, Y+6	; 0x06
    229c:	9f 81       	ldd	r25, Y+7	; 0x07
    229e:	83 30       	cpi	r24, 0x03	; 3
    22a0:	91 05       	cpc	r25, r1
    22a2:	09 f4       	brne	.+2      	; 0x22a6 <GPIO_readPin+0x258>
    22a4:	3e c0       	rjmp	.+124    	; 0x2322 <GPIO_readPin+0x2d4>
    22a6:	2e 81       	ldd	r18, Y+6	; 0x06
    22a8:	3f 81       	ldd	r19, Y+7	; 0x07
    22aa:	24 30       	cpi	r18, 0x04	; 4
    22ac:	31 05       	cpc	r19, r1
    22ae:	7c f4       	brge	.+30     	; 0x22ce <GPIO_readPin+0x280>
    22b0:	8e 81       	ldd	r24, Y+6	; 0x06
    22b2:	9f 81       	ldd	r25, Y+7	; 0x07
    22b4:	81 30       	cpi	r24, 0x01	; 1
    22b6:	91 05       	cpc	r25, r1
    22b8:	29 f1       	breq	.+74     	; 0x2304 <GPIO_readPin+0x2b6>
    22ba:	2e 81       	ldd	r18, Y+6	; 0x06
    22bc:	3f 81       	ldd	r19, Y+7	; 0x07
    22be:	22 30       	cpi	r18, 0x02	; 2
    22c0:	31 05       	cpc	r19, r1
    22c2:	3c f5       	brge	.+78     	; 0x2312 <GPIO_readPin+0x2c4>
    22c4:	8e 81       	ldd	r24, Y+6	; 0x06
    22c6:	9f 81       	ldd	r25, Y+7	; 0x07
    22c8:	00 97       	sbiw	r24, 0x00	; 0
    22ca:	b1 f0       	breq	.+44     	; 0x22f8 <GPIO_readPin+0x2aa>
    22cc:	ca c0       	rjmp	.+404    	; 0x2462 <GPIO_readPin+0x414>
    22ce:	2e 81       	ldd	r18, Y+6	; 0x06
    22d0:	3f 81       	ldd	r19, Y+7	; 0x07
    22d2:	25 30       	cpi	r18, 0x05	; 5
    22d4:	31 05       	cpc	r19, r1
    22d6:	b1 f1       	breq	.+108    	; 0x2344 <GPIO_readPin+0x2f6>
    22d8:	8e 81       	ldd	r24, Y+6	; 0x06
    22da:	9f 81       	ldd	r25, Y+7	; 0x07
    22dc:	85 30       	cpi	r24, 0x05	; 5
    22de:	91 05       	cpc	r25, r1
    22e0:	4c f1       	brlt	.+82     	; 0x2334 <GPIO_readPin+0x2e6>
    22e2:	2e 81       	ldd	r18, Y+6	; 0x06
    22e4:	3f 81       	ldd	r19, Y+7	; 0x07
    22e6:	26 30       	cpi	r18, 0x06	; 6
    22e8:	31 05       	cpc	r19, r1
    22ea:	a9 f1       	breq	.+106    	; 0x2356 <GPIO_readPin+0x308>
    22ec:	8e 81       	ldd	r24, Y+6	; 0x06
    22ee:	9f 81       	ldd	r25, Y+7	; 0x07
    22f0:	87 30       	cpi	r24, 0x07	; 7
    22f2:	91 05       	cpc	r25, r1
    22f4:	d1 f1       	breq	.+116    	; 0x236a <GPIO_readPin+0x31c>
    22f6:	b5 c0       	rjmp	.+362    	; 0x2462 <GPIO_readPin+0x414>
			{
			case 0:
				pin_value = PINC_REG.Bits.Bit0;
    22f8:	e3 e3       	ldi	r30, 0x33	; 51
    22fa:	f0 e0       	ldi	r31, 0x00	; 0
    22fc:	80 81       	ld	r24, Z
    22fe:	81 70       	andi	r24, 0x01	; 1
    2300:	89 83       	std	Y+1, r24	; 0x01
    2302:	af c0       	rjmp	.+350    	; 0x2462 <GPIO_readPin+0x414>
				break;
			case 1:
				pin_value = PINC_REG.Bits.Bit1;
    2304:	e3 e3       	ldi	r30, 0x33	; 51
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	80 81       	ld	r24, Z
    230a:	86 95       	lsr	r24
    230c:	81 70       	andi	r24, 0x01	; 1
    230e:	89 83       	std	Y+1, r24	; 0x01
    2310:	a8 c0       	rjmp	.+336    	; 0x2462 <GPIO_readPin+0x414>
				break;
			case 2:
				pin_value = PINC_REG.Bits.Bit2;
    2312:	e3 e3       	ldi	r30, 0x33	; 51
    2314:	f0 e0       	ldi	r31, 0x00	; 0
    2316:	80 81       	ld	r24, Z
    2318:	86 95       	lsr	r24
    231a:	86 95       	lsr	r24
    231c:	81 70       	andi	r24, 0x01	; 1
    231e:	89 83       	std	Y+1, r24	; 0x01
    2320:	a0 c0       	rjmp	.+320    	; 0x2462 <GPIO_readPin+0x414>
				break;
			case 3:
				pin_value = PINC_REG.Bits.Bit3;
    2322:	e3 e3       	ldi	r30, 0x33	; 51
    2324:	f0 e0       	ldi	r31, 0x00	; 0
    2326:	80 81       	ld	r24, Z
    2328:	86 95       	lsr	r24
    232a:	86 95       	lsr	r24
    232c:	86 95       	lsr	r24
    232e:	81 70       	andi	r24, 0x01	; 1
    2330:	89 83       	std	Y+1, r24	; 0x01
    2332:	97 c0       	rjmp	.+302    	; 0x2462 <GPIO_readPin+0x414>
				break;
			case 4:
				pin_value = PINC_REG.Bits.Bit4;
    2334:	e3 e3       	ldi	r30, 0x33	; 51
    2336:	f0 e0       	ldi	r31, 0x00	; 0
    2338:	80 81       	ld	r24, Z
    233a:	82 95       	swap	r24
    233c:	8f 70       	andi	r24, 0x0F	; 15
    233e:	81 70       	andi	r24, 0x01	; 1
    2340:	89 83       	std	Y+1, r24	; 0x01
    2342:	8f c0       	rjmp	.+286    	; 0x2462 <GPIO_readPin+0x414>
				break;
			case 5:
				pin_value = PINC_REG.Bits.Bit5;
    2344:	e3 e3       	ldi	r30, 0x33	; 51
    2346:	f0 e0       	ldi	r31, 0x00	; 0
    2348:	80 81       	ld	r24, Z
    234a:	82 95       	swap	r24
    234c:	86 95       	lsr	r24
    234e:	87 70       	andi	r24, 0x07	; 7
    2350:	81 70       	andi	r24, 0x01	; 1
    2352:	89 83       	std	Y+1, r24	; 0x01
    2354:	86 c0       	rjmp	.+268    	; 0x2462 <GPIO_readPin+0x414>
				break;
			case 6:
				pin_value = PINC_REG.Bits.Bit6;
    2356:	e3 e3       	ldi	r30, 0x33	; 51
    2358:	f0 e0       	ldi	r31, 0x00	; 0
    235a:	80 81       	ld	r24, Z
    235c:	82 95       	swap	r24
    235e:	86 95       	lsr	r24
    2360:	86 95       	lsr	r24
    2362:	83 70       	andi	r24, 0x03	; 3
    2364:	81 70       	andi	r24, 0x01	; 1
    2366:	89 83       	std	Y+1, r24	; 0x01
    2368:	7c c0       	rjmp	.+248    	; 0x2462 <GPIO_readPin+0x414>
				break;
			case 7:
				pin_value = PINC_REG.Bits.Bit7;
    236a:	e3 e3       	ldi	r30, 0x33	; 51
    236c:	f0 e0       	ldi	r31, 0x00	; 0
    236e:	80 81       	ld	r24, Z
    2370:	88 1f       	adc	r24, r24
    2372:	88 27       	eor	r24, r24
    2374:	88 1f       	adc	r24, r24
    2376:	89 83       	std	Y+1, r24	; 0x01
    2378:	74 c0       	rjmp	.+232    	; 0x2462 <GPIO_readPin+0x414>
			}
			break;
		}
		case PORTD_ID:
		{
			switch(pin_num)
    237a:	8b 81       	ldd	r24, Y+3	; 0x03
    237c:	28 2f       	mov	r18, r24
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	3d 83       	std	Y+5, r19	; 0x05
    2382:	2c 83       	std	Y+4, r18	; 0x04
    2384:	8c 81       	ldd	r24, Y+4	; 0x04
    2386:	9d 81       	ldd	r25, Y+5	; 0x05
    2388:	83 30       	cpi	r24, 0x03	; 3
    238a:	91 05       	cpc	r25, r1
    238c:	09 f4       	brne	.+2      	; 0x2390 <GPIO_readPin+0x342>
    238e:	3e c0       	rjmp	.+124    	; 0x240c <GPIO_readPin+0x3be>
    2390:	2c 81       	ldd	r18, Y+4	; 0x04
    2392:	3d 81       	ldd	r19, Y+5	; 0x05
    2394:	24 30       	cpi	r18, 0x04	; 4
    2396:	31 05       	cpc	r19, r1
    2398:	7c f4       	brge	.+30     	; 0x23b8 <GPIO_readPin+0x36a>
    239a:	8c 81       	ldd	r24, Y+4	; 0x04
    239c:	9d 81       	ldd	r25, Y+5	; 0x05
    239e:	81 30       	cpi	r24, 0x01	; 1
    23a0:	91 05       	cpc	r25, r1
    23a2:	29 f1       	breq	.+74     	; 0x23ee <GPIO_readPin+0x3a0>
    23a4:	2c 81       	ldd	r18, Y+4	; 0x04
    23a6:	3d 81       	ldd	r19, Y+5	; 0x05
    23a8:	22 30       	cpi	r18, 0x02	; 2
    23aa:	31 05       	cpc	r19, r1
    23ac:	3c f5       	brge	.+78     	; 0x23fc <GPIO_readPin+0x3ae>
    23ae:	8c 81       	ldd	r24, Y+4	; 0x04
    23b0:	9d 81       	ldd	r25, Y+5	; 0x05
    23b2:	00 97       	sbiw	r24, 0x00	; 0
    23b4:	b1 f0       	breq	.+44     	; 0x23e2 <GPIO_readPin+0x394>
    23b6:	55 c0       	rjmp	.+170    	; 0x2462 <GPIO_readPin+0x414>
    23b8:	2c 81       	ldd	r18, Y+4	; 0x04
    23ba:	3d 81       	ldd	r19, Y+5	; 0x05
    23bc:	25 30       	cpi	r18, 0x05	; 5
    23be:	31 05       	cpc	r19, r1
    23c0:	b1 f1       	breq	.+108    	; 0x242e <GPIO_readPin+0x3e0>
    23c2:	8c 81       	ldd	r24, Y+4	; 0x04
    23c4:	9d 81       	ldd	r25, Y+5	; 0x05
    23c6:	85 30       	cpi	r24, 0x05	; 5
    23c8:	91 05       	cpc	r25, r1
    23ca:	4c f1       	brlt	.+82     	; 0x241e <GPIO_readPin+0x3d0>
    23cc:	2c 81       	ldd	r18, Y+4	; 0x04
    23ce:	3d 81       	ldd	r19, Y+5	; 0x05
    23d0:	26 30       	cpi	r18, 0x06	; 6
    23d2:	31 05       	cpc	r19, r1
    23d4:	a9 f1       	breq	.+106    	; 0x2440 <GPIO_readPin+0x3f2>
    23d6:	8c 81       	ldd	r24, Y+4	; 0x04
    23d8:	9d 81       	ldd	r25, Y+5	; 0x05
    23da:	87 30       	cpi	r24, 0x07	; 7
    23dc:	91 05       	cpc	r25, r1
    23de:	d1 f1       	breq	.+116    	; 0x2454 <GPIO_readPin+0x406>
    23e0:	40 c0       	rjmp	.+128    	; 0x2462 <GPIO_readPin+0x414>
			{
			case 0:
				pin_value = PIND_REG.Bits.Bit0;
    23e2:	e0 e3       	ldi	r30, 0x30	; 48
    23e4:	f0 e0       	ldi	r31, 0x00	; 0
    23e6:	80 81       	ld	r24, Z
    23e8:	81 70       	andi	r24, 0x01	; 1
    23ea:	89 83       	std	Y+1, r24	; 0x01
    23ec:	3a c0       	rjmp	.+116    	; 0x2462 <GPIO_readPin+0x414>
				break;
			case 1:
				pin_value = PIND_REG.Bits.Bit1;
    23ee:	e0 e3       	ldi	r30, 0x30	; 48
    23f0:	f0 e0       	ldi	r31, 0x00	; 0
    23f2:	80 81       	ld	r24, Z
    23f4:	86 95       	lsr	r24
    23f6:	81 70       	andi	r24, 0x01	; 1
    23f8:	89 83       	std	Y+1, r24	; 0x01
    23fa:	33 c0       	rjmp	.+102    	; 0x2462 <GPIO_readPin+0x414>
				break;
			case 2:
				pin_value = PIND_REG.Bits.Bit2;
    23fc:	e0 e3       	ldi	r30, 0x30	; 48
    23fe:	f0 e0       	ldi	r31, 0x00	; 0
    2400:	80 81       	ld	r24, Z
    2402:	86 95       	lsr	r24
    2404:	86 95       	lsr	r24
    2406:	81 70       	andi	r24, 0x01	; 1
    2408:	89 83       	std	Y+1, r24	; 0x01
    240a:	2b c0       	rjmp	.+86     	; 0x2462 <GPIO_readPin+0x414>
				break;
			case 3:
				pin_value = PIND_REG.Bits.Bit3;
    240c:	e0 e3       	ldi	r30, 0x30	; 48
    240e:	f0 e0       	ldi	r31, 0x00	; 0
    2410:	80 81       	ld	r24, Z
    2412:	86 95       	lsr	r24
    2414:	86 95       	lsr	r24
    2416:	86 95       	lsr	r24
    2418:	81 70       	andi	r24, 0x01	; 1
    241a:	89 83       	std	Y+1, r24	; 0x01
    241c:	22 c0       	rjmp	.+68     	; 0x2462 <GPIO_readPin+0x414>
				break;
			case 4:
				pin_value = PIND_REG.Bits.Bit4;
    241e:	e0 e3       	ldi	r30, 0x30	; 48
    2420:	f0 e0       	ldi	r31, 0x00	; 0
    2422:	80 81       	ld	r24, Z
    2424:	82 95       	swap	r24
    2426:	8f 70       	andi	r24, 0x0F	; 15
    2428:	81 70       	andi	r24, 0x01	; 1
    242a:	89 83       	std	Y+1, r24	; 0x01
    242c:	1a c0       	rjmp	.+52     	; 0x2462 <GPIO_readPin+0x414>
				break;
			case 5:
				pin_value = PIND_REG.Bits.Bit5;
    242e:	e0 e3       	ldi	r30, 0x30	; 48
    2430:	f0 e0       	ldi	r31, 0x00	; 0
    2432:	80 81       	ld	r24, Z
    2434:	82 95       	swap	r24
    2436:	86 95       	lsr	r24
    2438:	87 70       	andi	r24, 0x07	; 7
    243a:	81 70       	andi	r24, 0x01	; 1
    243c:	89 83       	std	Y+1, r24	; 0x01
    243e:	11 c0       	rjmp	.+34     	; 0x2462 <GPIO_readPin+0x414>
				break;
			case 6:
				pin_value = PIND_REG.Bits.Bit6;
    2440:	e0 e3       	ldi	r30, 0x30	; 48
    2442:	f0 e0       	ldi	r31, 0x00	; 0
    2444:	80 81       	ld	r24, Z
    2446:	82 95       	swap	r24
    2448:	86 95       	lsr	r24
    244a:	86 95       	lsr	r24
    244c:	83 70       	andi	r24, 0x03	; 3
    244e:	81 70       	andi	r24, 0x01	; 1
    2450:	89 83       	std	Y+1, r24	; 0x01
    2452:	07 c0       	rjmp	.+14     	; 0x2462 <GPIO_readPin+0x414>
				break;
			case 7:
				pin_value = PIND_REG.Bits.Bit7;
    2454:	e0 e3       	ldi	r30, 0x30	; 48
    2456:	f0 e0       	ldi	r31, 0x00	; 0
    2458:	80 81       	ld	r24, Z
    245a:	88 1f       	adc	r24, r24
    245c:	88 27       	eor	r24, r24
    245e:	88 1f       	adc	r24, r24
    2460:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
		}
	}

	return pin_value;
    2462:	89 81       	ldd	r24, Y+1	; 0x01
}
    2464:	2d 96       	adiw	r28, 0x0d	; 13
    2466:	0f b6       	in	r0, 0x3f	; 63
    2468:	f8 94       	cli
    246a:	de bf       	out	0x3e, r29	; 62
    246c:	0f be       	out	0x3f, r0	; 63
    246e:	cd bf       	out	0x3d, r28	; 61
    2470:	cf 91       	pop	r28
    2472:	df 91       	pop	r29
    2474:	08 95       	ret

00002476 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2476:	df 93       	push	r29
    2478:	cf 93       	push	r28
    247a:	00 d0       	rcall	.+0      	; 0x247c <GPIO_setupPortDirection+0x6>
    247c:	00 d0       	rcall	.+0      	; 0x247e <GPIO_setupPortDirection+0x8>
    247e:	cd b7       	in	r28, 0x3d	; 61
    2480:	de b7       	in	r29, 0x3e	; 62
    2482:	89 83       	std	Y+1, r24	; 0x01
    2484:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2486:	89 81       	ldd	r24, Y+1	; 0x01
    2488:	84 30       	cpi	r24, 0x04	; 4
    248a:	90 f5       	brcc	.+100    	; 0x24f0 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    248c:	89 81       	ldd	r24, Y+1	; 0x01
    248e:	28 2f       	mov	r18, r24
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	3c 83       	std	Y+4, r19	; 0x04
    2494:	2b 83       	std	Y+3, r18	; 0x03
    2496:	8b 81       	ldd	r24, Y+3	; 0x03
    2498:	9c 81       	ldd	r25, Y+4	; 0x04
    249a:	81 30       	cpi	r24, 0x01	; 1
    249c:	91 05       	cpc	r25, r1
    249e:	d1 f0       	breq	.+52     	; 0x24d4 <GPIO_setupPortDirection+0x5e>
    24a0:	2b 81       	ldd	r18, Y+3	; 0x03
    24a2:	3c 81       	ldd	r19, Y+4	; 0x04
    24a4:	22 30       	cpi	r18, 0x02	; 2
    24a6:	31 05       	cpc	r19, r1
    24a8:	2c f4       	brge	.+10     	; 0x24b4 <GPIO_setupPortDirection+0x3e>
    24aa:	8b 81       	ldd	r24, Y+3	; 0x03
    24ac:	9c 81       	ldd	r25, Y+4	; 0x04
    24ae:	00 97       	sbiw	r24, 0x00	; 0
    24b0:	61 f0       	breq	.+24     	; 0x24ca <GPIO_setupPortDirection+0x54>
    24b2:	1e c0       	rjmp	.+60     	; 0x24f0 <GPIO_setupPortDirection+0x7a>
    24b4:	2b 81       	ldd	r18, Y+3	; 0x03
    24b6:	3c 81       	ldd	r19, Y+4	; 0x04
    24b8:	22 30       	cpi	r18, 0x02	; 2
    24ba:	31 05       	cpc	r19, r1
    24bc:	81 f0       	breq	.+32     	; 0x24de <GPIO_setupPortDirection+0x68>
    24be:	8b 81       	ldd	r24, Y+3	; 0x03
    24c0:	9c 81       	ldd	r25, Y+4	; 0x04
    24c2:	83 30       	cpi	r24, 0x03	; 3
    24c4:	91 05       	cpc	r25, r1
    24c6:	81 f0       	breq	.+32     	; 0x24e8 <GPIO_setupPortDirection+0x72>
    24c8:	13 c0       	rjmp	.+38     	; 0x24f0 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA_REG.Byte = direction;
    24ca:	ea e3       	ldi	r30, 0x3A	; 58
    24cc:	f0 e0       	ldi	r31, 0x00	; 0
    24ce:	8a 81       	ldd	r24, Y+2	; 0x02
    24d0:	80 83       	st	Z, r24
    24d2:	0e c0       	rjmp	.+28     	; 0x24f0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB_REG.Byte = direction;
    24d4:	e7 e3       	ldi	r30, 0x37	; 55
    24d6:	f0 e0       	ldi	r31, 0x00	; 0
    24d8:	8a 81       	ldd	r24, Y+2	; 0x02
    24da:	80 83       	st	Z, r24
    24dc:	09 c0       	rjmp	.+18     	; 0x24f0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC_REG.Byte = direction;
    24de:	e4 e3       	ldi	r30, 0x34	; 52
    24e0:	f0 e0       	ldi	r31, 0x00	; 0
    24e2:	8a 81       	ldd	r24, Y+2	; 0x02
    24e4:	80 83       	st	Z, r24
    24e6:	04 c0       	rjmp	.+8      	; 0x24f0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD_REG.Byte = direction;
    24e8:	e1 e3       	ldi	r30, 0x31	; 49
    24ea:	f0 e0       	ldi	r31, 0x00	; 0
    24ec:	8a 81       	ldd	r24, Y+2	; 0x02
    24ee:	80 83       	st	Z, r24
			break;
		}
	}
}
    24f0:	0f 90       	pop	r0
    24f2:	0f 90       	pop	r0
    24f4:	0f 90       	pop	r0
    24f6:	0f 90       	pop	r0
    24f8:	cf 91       	pop	r28
    24fa:	df 91       	pop	r29
    24fc:	08 95       	ret

000024fe <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    24fe:	df 93       	push	r29
    2500:	cf 93       	push	r28
    2502:	00 d0       	rcall	.+0      	; 0x2504 <GPIO_writePort+0x6>
    2504:	00 d0       	rcall	.+0      	; 0x2506 <GPIO_writePort+0x8>
    2506:	cd b7       	in	r28, 0x3d	; 61
    2508:	de b7       	in	r29, 0x3e	; 62
    250a:	89 83       	std	Y+1, r24	; 0x01
    250c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    250e:	89 81       	ldd	r24, Y+1	; 0x01
    2510:	84 30       	cpi	r24, 0x04	; 4
    2512:	90 f5       	brcc	.+100    	; 0x2578 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2514:	89 81       	ldd	r24, Y+1	; 0x01
    2516:	28 2f       	mov	r18, r24
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	3c 83       	std	Y+4, r19	; 0x04
    251c:	2b 83       	std	Y+3, r18	; 0x03
    251e:	8b 81       	ldd	r24, Y+3	; 0x03
    2520:	9c 81       	ldd	r25, Y+4	; 0x04
    2522:	81 30       	cpi	r24, 0x01	; 1
    2524:	91 05       	cpc	r25, r1
    2526:	d1 f0       	breq	.+52     	; 0x255c <GPIO_writePort+0x5e>
    2528:	2b 81       	ldd	r18, Y+3	; 0x03
    252a:	3c 81       	ldd	r19, Y+4	; 0x04
    252c:	22 30       	cpi	r18, 0x02	; 2
    252e:	31 05       	cpc	r19, r1
    2530:	2c f4       	brge	.+10     	; 0x253c <GPIO_writePort+0x3e>
    2532:	8b 81       	ldd	r24, Y+3	; 0x03
    2534:	9c 81       	ldd	r25, Y+4	; 0x04
    2536:	00 97       	sbiw	r24, 0x00	; 0
    2538:	61 f0       	breq	.+24     	; 0x2552 <GPIO_writePort+0x54>
    253a:	1e c0       	rjmp	.+60     	; 0x2578 <GPIO_writePort+0x7a>
    253c:	2b 81       	ldd	r18, Y+3	; 0x03
    253e:	3c 81       	ldd	r19, Y+4	; 0x04
    2540:	22 30       	cpi	r18, 0x02	; 2
    2542:	31 05       	cpc	r19, r1
    2544:	81 f0       	breq	.+32     	; 0x2566 <GPIO_writePort+0x68>
    2546:	8b 81       	ldd	r24, Y+3	; 0x03
    2548:	9c 81       	ldd	r25, Y+4	; 0x04
    254a:	83 30       	cpi	r24, 0x03	; 3
    254c:	91 05       	cpc	r25, r1
    254e:	81 f0       	breq	.+32     	; 0x2570 <GPIO_writePort+0x72>
    2550:	13 c0       	rjmp	.+38     	; 0x2578 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA_REG.Byte = value;
    2552:	eb e3       	ldi	r30, 0x3B	; 59
    2554:	f0 e0       	ldi	r31, 0x00	; 0
    2556:	8a 81       	ldd	r24, Y+2	; 0x02
    2558:	80 83       	st	Z, r24
    255a:	0e c0       	rjmp	.+28     	; 0x2578 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB_REG.Byte = value;
    255c:	e8 e3       	ldi	r30, 0x38	; 56
    255e:	f0 e0       	ldi	r31, 0x00	; 0
    2560:	8a 81       	ldd	r24, Y+2	; 0x02
    2562:	80 83       	st	Z, r24
    2564:	09 c0       	rjmp	.+18     	; 0x2578 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC_REG.Byte = value;
    2566:	e5 e3       	ldi	r30, 0x35	; 53
    2568:	f0 e0       	ldi	r31, 0x00	; 0
    256a:	8a 81       	ldd	r24, Y+2	; 0x02
    256c:	80 83       	st	Z, r24
    256e:	04 c0       	rjmp	.+8      	; 0x2578 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD_REG.Byte = value;
    2570:	e2 e3       	ldi	r30, 0x32	; 50
    2572:	f0 e0       	ldi	r31, 0x00	; 0
    2574:	8a 81       	ldd	r24, Y+2	; 0x02
    2576:	80 83       	st	Z, r24
			break;
		}
	}
}
    2578:	0f 90       	pop	r0
    257a:	0f 90       	pop	r0
    257c:	0f 90       	pop	r0
    257e:	0f 90       	pop	r0
    2580:	cf 91       	pop	r28
    2582:	df 91       	pop	r29
    2584:	08 95       	ret

00002586 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2586:	df 93       	push	r29
    2588:	cf 93       	push	r28
    258a:	00 d0       	rcall	.+0      	; 0x258c <GPIO_readPort+0x6>
    258c:	00 d0       	rcall	.+0      	; 0x258e <GPIO_readPort+0x8>
    258e:	cd b7       	in	r28, 0x3d	; 61
    2590:	de b7       	in	r29, 0x3e	; 62
    2592:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2594:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2596:	8a 81       	ldd	r24, Y+2	; 0x02
    2598:	84 30       	cpi	r24, 0x04	; 4
    259a:	90 f5       	brcc	.+100    	; 0x2600 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    259c:	8a 81       	ldd	r24, Y+2	; 0x02
    259e:	28 2f       	mov	r18, r24
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	3c 83       	std	Y+4, r19	; 0x04
    25a4:	2b 83       	std	Y+3, r18	; 0x03
    25a6:	8b 81       	ldd	r24, Y+3	; 0x03
    25a8:	9c 81       	ldd	r25, Y+4	; 0x04
    25aa:	81 30       	cpi	r24, 0x01	; 1
    25ac:	91 05       	cpc	r25, r1
    25ae:	d1 f0       	breq	.+52     	; 0x25e4 <GPIO_readPort+0x5e>
    25b0:	2b 81       	ldd	r18, Y+3	; 0x03
    25b2:	3c 81       	ldd	r19, Y+4	; 0x04
    25b4:	22 30       	cpi	r18, 0x02	; 2
    25b6:	31 05       	cpc	r19, r1
    25b8:	2c f4       	brge	.+10     	; 0x25c4 <GPIO_readPort+0x3e>
    25ba:	8b 81       	ldd	r24, Y+3	; 0x03
    25bc:	9c 81       	ldd	r25, Y+4	; 0x04
    25be:	00 97       	sbiw	r24, 0x00	; 0
    25c0:	61 f0       	breq	.+24     	; 0x25da <GPIO_readPort+0x54>
    25c2:	1e c0       	rjmp	.+60     	; 0x2600 <GPIO_readPort+0x7a>
    25c4:	2b 81       	ldd	r18, Y+3	; 0x03
    25c6:	3c 81       	ldd	r19, Y+4	; 0x04
    25c8:	22 30       	cpi	r18, 0x02	; 2
    25ca:	31 05       	cpc	r19, r1
    25cc:	81 f0       	breq	.+32     	; 0x25ee <GPIO_readPort+0x68>
    25ce:	8b 81       	ldd	r24, Y+3	; 0x03
    25d0:	9c 81       	ldd	r25, Y+4	; 0x04
    25d2:	83 30       	cpi	r24, 0x03	; 3
    25d4:	91 05       	cpc	r25, r1
    25d6:	81 f0       	breq	.+32     	; 0x25f8 <GPIO_readPort+0x72>
    25d8:	13 c0       	rjmp	.+38     	; 0x2600 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA_REG.Byte;
    25da:	e9 e3       	ldi	r30, 0x39	; 57
    25dc:	f0 e0       	ldi	r31, 0x00	; 0
    25de:	80 81       	ld	r24, Z
    25e0:	89 83       	std	Y+1, r24	; 0x01
    25e2:	0e c0       	rjmp	.+28     	; 0x2600 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB_REG.Byte;
    25e4:	e6 e3       	ldi	r30, 0x36	; 54
    25e6:	f0 e0       	ldi	r31, 0x00	; 0
    25e8:	80 81       	ld	r24, Z
    25ea:	89 83       	std	Y+1, r24	; 0x01
    25ec:	09 c0       	rjmp	.+18     	; 0x2600 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC_REG.Byte;
    25ee:	e3 e3       	ldi	r30, 0x33	; 51
    25f0:	f0 e0       	ldi	r31, 0x00	; 0
    25f2:	80 81       	ld	r24, Z
    25f4:	89 83       	std	Y+1, r24	; 0x01
    25f6:	04 c0       	rjmp	.+8      	; 0x2600 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND_REG.Byte;
    25f8:	e0 e3       	ldi	r30, 0x30	; 48
    25fa:	f0 e0       	ldi	r31, 0x00	; 0
    25fc:	80 81       	ld	r24, Z
    25fe:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2600:	89 81       	ldd	r24, Y+1	; 0x01
}
    2602:	0f 90       	pop	r0
    2604:	0f 90       	pop	r0
    2606:	0f 90       	pop	r0
    2608:	0f 90       	pop	r0
    260a:	cf 91       	pop	r28
    260c:	df 91       	pop	r29
    260e:	08 95       	ret

00002610 <TIMER0_init>:

static volatile void(*g_callBackPtr)(void) = NULL_PTR;


void TIMER0_init(TIMER0_configType *config)
{
    2610:	df 93       	push	r29
    2612:	cf 93       	push	r28
    2614:	00 d0       	rcall	.+0      	; 0x2616 <TIMER0_init+0x6>
    2616:	00 d0       	rcall	.+0      	; 0x2618 <TIMER0_init+0x8>
    2618:	cd b7       	in	r28, 0x3d	; 61
    261a:	de b7       	in	r29, 0x3e	; 62
    261c:	9a 83       	std	Y+2, r25	; 0x02
    261e:	89 83       	std	Y+1, r24	; 0x01

	/* clearing TIMER0 registers */
	TCCR0_REG.Byte = 0;
    2620:	e3 e5       	ldi	r30, 0x53	; 83
    2622:	f0 e0       	ldi	r31, 0x00	; 0
    2624:	10 82       	st	Z, r1
	TIMSK_REG.Byte &= 0b11111100;
    2626:	a9 e5       	ldi	r26, 0x59	; 89
    2628:	b0 e0       	ldi	r27, 0x00	; 0
    262a:	e9 e5       	ldi	r30, 0x59	; 89
    262c:	f0 e0       	ldi	r31, 0x00	; 0
    262e:	80 81       	ld	r24, Z
    2630:	8c 7f       	andi	r24, 0xFC	; 252
    2632:	8c 93       	st	X, r24


	/* configuring FOC0 bit */
	if(config -> mode == PWM_PHASE_CORRECT || config -> mode == FAST_PWM)
    2634:	e9 81       	ldd	r30, Y+1	; 0x01
    2636:	fa 81       	ldd	r31, Y+2	; 0x02
    2638:	80 81       	ld	r24, Z
    263a:	81 30       	cpi	r24, 0x01	; 1
    263c:	29 f0       	breq	.+10     	; 0x2648 <TIMER0_init+0x38>
    263e:	e9 81       	ldd	r30, Y+1	; 0x01
    2640:	fa 81       	ldd	r31, Y+2	; 0x02
    2642:	80 81       	ld	r24, Z
    2644:	83 30       	cpi	r24, 0x03	; 3
    2646:	01 f5       	brne	.+64     	; 0x2688 <TIMER0_init+0x78>
	{
		TCCR0_REG.Bits.FOC0_bit = 0;
    2648:	e3 e5       	ldi	r30, 0x53	; 83
    264a:	f0 e0       	ldi	r31, 0x00	; 0
    264c:	80 81       	ld	r24, Z
    264e:	8f 77       	andi	r24, 0x7F	; 127
    2650:	80 83       	st	Z, r24

		/* setting duty cycle */
		OCR0_REG.Byte = ((config -> outputCompareRegister) / 100) * 255;
    2652:	ac e5       	ldi	r26, 0x5C	; 92
    2654:	b0 e0       	ldi	r27, 0x00	; 0
    2656:	e9 81       	ldd	r30, Y+1	; 0x01
    2658:	fa 81       	ldd	r31, Y+2	; 0x02
    265a:	85 81       	ldd	r24, Z+5	; 0x05
    265c:	94 e6       	ldi	r25, 0x64	; 100
    265e:	69 2f       	mov	r22, r25
    2660:	0e 94 56 17 	call	0x2eac	; 0x2eac <__udivmodqi4>
    2664:	48 2f       	mov	r20, r24
    2666:	50 e0       	ldi	r21, 0x00	; 0
    2668:	ca 01       	movw	r24, r20
    266a:	9c 01       	movw	r18, r24
    266c:	22 0f       	add	r18, r18
    266e:	33 1f       	adc	r19, r19
    2670:	c9 01       	movw	r24, r18
    2672:	96 95       	lsr	r25
    2674:	98 2f       	mov	r25, r24
    2676:	88 27       	eor	r24, r24
    2678:	97 95       	ror	r25
    267a:	87 95       	ror	r24
    267c:	82 1b       	sub	r24, r18
    267e:	93 0b       	sbc	r25, r19
    2680:	84 0f       	add	r24, r20
    2682:	95 1f       	adc	r25, r21
    2684:	8c 93       	st	X, r24
    2686:	05 c0       	rjmp	.+10     	; 0x2692 <TIMER0_init+0x82>
	}
	else
	{
		TCCR0_REG.Bits.FOC0_bit = 1;
    2688:	e3 e5       	ldi	r30, 0x53	; 83
    268a:	f0 e0       	ldi	r31, 0x00	; 0
    268c:	80 81       	ld	r24, Z
    268e:	80 68       	ori	r24, 0x80	; 128
    2690:	80 83       	st	Z, r24
	}

	if(config -> compareOutputMode != DISCONNECTED)
    2692:	e9 81       	ldd	r30, Y+1	; 0x01
    2694:	fa 81       	ldd	r31, Y+2	; 0x02
    2696:	81 81       	ldd	r24, Z+1	; 0x01
    2698:	88 23       	and	r24, r24
    269a:	29 f0       	breq	.+10     	; 0x26a6 <TIMER0_init+0x96>
	{
		/* setting direction of OC0 pin */
		GPIO_setupPinDirection(TIMER0_OUTPUT_COMPARE_PORT_ID,TIMER0_OUTPUT_COMPARE_PIN_ID,PIN_OUTPUT);
    269c:	81 e0       	ldi	r24, 0x01	; 1
    269e:	63 e0       	ldi	r22, 0x03	; 3
    26a0:	41 e0       	ldi	r20, 0x01	; 1
    26a2:	0e 94 a1 0a 	call	0x1542	; 0x1542 <GPIO_setupPinDirection>
	}

	/* configuring wave generation mode */
	TCCR0_REG.Bits.WGM00_bit = GET_BIT((config -> mode),0);
    26a6:	a3 e5       	ldi	r26, 0x53	; 83
    26a8:	b0 e0       	ldi	r27, 0x00	; 0
    26aa:	e9 81       	ldd	r30, Y+1	; 0x01
    26ac:	fa 81       	ldd	r31, Y+2	; 0x02
    26ae:	80 81       	ld	r24, Z
    26b0:	81 70       	andi	r24, 0x01	; 1
    26b2:	81 70       	andi	r24, 0x01	; 1
    26b4:	81 70       	andi	r24, 0x01	; 1
    26b6:	81 70       	andi	r24, 0x01	; 1
    26b8:	98 2f       	mov	r25, r24
    26ba:	92 95       	swap	r25
    26bc:	99 0f       	add	r25, r25
    26be:	99 0f       	add	r25, r25
    26c0:	90 7c       	andi	r25, 0xC0	; 192
    26c2:	8c 91       	ld	r24, X
    26c4:	8f 7b       	andi	r24, 0xBF	; 191
    26c6:	89 2b       	or	r24, r25
    26c8:	8c 93       	st	X, r24
	TCCR0_REG.Bits.WGM01_bit = GET_BIT((config -> mode),1);
    26ca:	a3 e5       	ldi	r26, 0x53	; 83
    26cc:	b0 e0       	ldi	r27, 0x00	; 0
    26ce:	e9 81       	ldd	r30, Y+1	; 0x01
    26d0:	fa 81       	ldd	r31, Y+2	; 0x02
    26d2:	80 81       	ld	r24, Z
    26d4:	88 2f       	mov	r24, r24
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	82 70       	andi	r24, 0x02	; 2
    26da:	90 70       	andi	r25, 0x00	; 0
    26dc:	95 95       	asr	r25
    26de:	87 95       	ror	r24
    26e0:	81 70       	andi	r24, 0x01	; 1
    26e2:	81 70       	andi	r24, 0x01	; 1
    26e4:	98 2f       	mov	r25, r24
    26e6:	99 0f       	add	r25, r25
    26e8:	99 0f       	add	r25, r25
    26ea:	99 0f       	add	r25, r25
    26ec:	8c 91       	ld	r24, X
    26ee:	87 7f       	andi	r24, 0xF7	; 247
    26f0:	89 2b       	or	r24, r25
    26f2:	8c 93       	st	X, r24

	/* configuring compare output mode */
	TCCR0_REG.Byte = (TCCR0_REG.Byte & 0b11001111) | ((config -> compareOutputMode) << 4);
    26f4:	a3 e5       	ldi	r26, 0x53	; 83
    26f6:	b0 e0       	ldi	r27, 0x00	; 0
    26f8:	e3 e5       	ldi	r30, 0x53	; 83
    26fa:	f0 e0       	ldi	r31, 0x00	; 0
    26fc:	80 81       	ld	r24, Z
    26fe:	28 2f       	mov	r18, r24
    2700:	2f 7c       	andi	r18, 0xCF	; 207
    2702:	e9 81       	ldd	r30, Y+1	; 0x01
    2704:	fa 81       	ldd	r31, Y+2	; 0x02
    2706:	81 81       	ldd	r24, Z+1	; 0x01
    2708:	88 2f       	mov	r24, r24
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	82 95       	swap	r24
    270e:	92 95       	swap	r25
    2710:	90 7f       	andi	r25, 0xF0	; 240
    2712:	98 27       	eor	r25, r24
    2714:	80 7f       	andi	r24, 0xF0	; 240
    2716:	98 27       	eor	r25, r24
    2718:	82 2b       	or	r24, r18
    271a:	8c 93       	st	X, r24

	/* configuring TIMER0 prescaler */
	TCCR0_REG.Byte = (TCCR0_REG.Byte & 0b11111000) | (config -> prescaler);
    271c:	a3 e5       	ldi	r26, 0x53	; 83
    271e:	b0 e0       	ldi	r27, 0x00	; 0
    2720:	e3 e5       	ldi	r30, 0x53	; 83
    2722:	f0 e0       	ldi	r31, 0x00	; 0
    2724:	80 81       	ld	r24, Z
    2726:	98 2f       	mov	r25, r24
    2728:	98 7f       	andi	r25, 0xF8	; 248
    272a:	e9 81       	ldd	r30, Y+1	; 0x01
    272c:	fa 81       	ldd	r31, Y+2	; 0x02
    272e:	82 81       	ldd	r24, Z+2	; 0x02
    2730:	89 2b       	or	r24, r25
    2732:	8c 93       	st	X, r24

	/* enable interrupt bit if needed */
	switch(config -> interruptMask)
    2734:	e9 81       	ldd	r30, Y+1	; 0x01
    2736:	fa 81       	ldd	r31, Y+2	; 0x02
    2738:	83 81       	ldd	r24, Z+3	; 0x03
    273a:	28 2f       	mov	r18, r24
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	3c 83       	std	Y+4, r19	; 0x04
    2740:	2b 83       	std	Y+3, r18	; 0x03
    2742:	8b 81       	ldd	r24, Y+3	; 0x03
    2744:	9c 81       	ldd	r25, Y+4	; 0x04
    2746:	81 30       	cpi	r24, 0x01	; 1
    2748:	91 05       	cpc	r25, r1
    274a:	31 f0       	breq	.+12     	; 0x2758 <TIMER0_init+0x148>
    274c:	2b 81       	ldd	r18, Y+3	; 0x03
    274e:	3c 81       	ldd	r19, Y+4	; 0x04
    2750:	22 30       	cpi	r18, 0x02	; 2
    2752:	31 05       	cpc	r19, r1
    2754:	39 f0       	breq	.+14     	; 0x2764 <TIMER0_init+0x154>
    2756:	11 c0       	rjmp	.+34     	; 0x277a <TIMER0_init+0x16a>
	{
	case TOIE0_bit:
		TIMSK_REG.Bits.TOIE0_bit = 1;
    2758:	e9 e5       	ldi	r30, 0x59	; 89
    275a:	f0 e0       	ldi	r31, 0x00	; 0
    275c:	80 81       	ld	r24, Z
    275e:	81 60       	ori	r24, 0x01	; 1
    2760:	80 83       	st	Z, r24
    2762:	0b c0       	rjmp	.+22     	; 0x277a <TIMER0_init+0x16a>
		break;
	case OCIE0_bit:
		TIMSK_REG.Bits.OCIE0_bit = 1;
    2764:	e9 e5       	ldi	r30, 0x59	; 89
    2766:	f0 e0       	ldi	r31, 0x00	; 0
    2768:	80 81       	ld	r24, Z
    276a:	82 60       	ori	r24, 0x02	; 2
    276c:	80 83       	st	Z, r24
		OCR0_REG.Byte = config -> outputCompareRegister;
    276e:	ac e5       	ldi	r26, 0x5C	; 92
    2770:	b0 e0       	ldi	r27, 0x00	; 0
    2772:	e9 81       	ldd	r30, Y+1	; 0x01
    2774:	fa 81       	ldd	r31, Y+2	; 0x02
    2776:	85 81       	ldd	r24, Z+5	; 0x05
    2778:	8c 93       	st	X, r24
		break;
	}

	/* setting timer counter initial value */
	TCNT0_REG.Byte = config-> timerCounterRegister;
    277a:	e2 e5       	ldi	r30, 0x52	; 82
    277c:	f0 e0       	ldi	r31, 0x00	; 0
    277e:	a9 81       	ldd	r26, Y+1	; 0x01
    2780:	ba 81       	ldd	r27, Y+2	; 0x02
    2782:	14 96       	adiw	r26, 0x04	; 4
    2784:	8c 91       	ld	r24, X
    2786:	14 97       	sbiw	r26, 0x04	; 4
    2788:	80 83       	st	Z, r24
}
    278a:	0f 90       	pop	r0
    278c:	0f 90       	pop	r0
    278e:	0f 90       	pop	r0
    2790:	0f 90       	pop	r0
    2792:	cf 91       	pop	r28
    2794:	df 91       	pop	r29
    2796:	08 95       	ret

00002798 <TIME0_setCallBack>:

void TIME0_setCallBack(void(*a_ptr)(void))
{
    2798:	df 93       	push	r29
    279a:	cf 93       	push	r28
    279c:	00 d0       	rcall	.+0      	; 0x279e <TIME0_setCallBack+0x6>
    279e:	cd b7       	in	r28, 0x3d	; 61
    27a0:	de b7       	in	r29, 0x3e	; 62
    27a2:	9a 83       	std	Y+2, r25	; 0x02
    27a4:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;	/* saving address of call back function */
    27a6:	89 81       	ldd	r24, Y+1	; 0x01
    27a8:	9a 81       	ldd	r25, Y+2	; 0x02
    27aa:	90 93 92 00 	sts	0x0092, r25
    27ae:	80 93 91 00 	sts	0x0091, r24
}
    27b2:	0f 90       	pop	r0
    27b4:	0f 90       	pop	r0
    27b6:	cf 91       	pop	r28
    27b8:	df 91       	pop	r29
    27ba:	08 95       	ret

000027bc <TIMER0_deInit>:

void TIMER0_deInit(void)
{
    27bc:	df 93       	push	r29
    27be:	cf 93       	push	r28
    27c0:	cd b7       	in	r28, 0x3d	; 61
    27c2:	de b7       	in	r29, 0x3e	; 62
	/* clearing all TIMER0 registers and bits */
	TCCR0_REG.Byte = 0;
    27c4:	e3 e5       	ldi	r30, 0x53	; 83
    27c6:	f0 e0       	ldi	r31, 0x00	; 0
    27c8:	10 82       	st	Z, r1
	TIMSK_REG.Byte &= 0b11111100;
    27ca:	a9 e5       	ldi	r26, 0x59	; 89
    27cc:	b0 e0       	ldi	r27, 0x00	; 0
    27ce:	e9 e5       	ldi	r30, 0x59	; 89
    27d0:	f0 e0       	ldi	r31, 0x00	; 0
    27d2:	80 81       	ld	r24, Z
    27d4:	8c 7f       	andi	r24, 0xFC	; 252
    27d6:	8c 93       	st	X, r24
	TCNT0_REG.Byte = 0;
    27d8:	e2 e5       	ldi	r30, 0x52	; 82
    27da:	f0 e0       	ldi	r31, 0x00	; 0
    27dc:	10 82       	st	Z, r1
	OCR0_REG.Byte = 0;
    27de:	ec e5       	ldi	r30, 0x5C	; 92
    27e0:	f0 e0       	ldi	r31, 0x00	; 0
    27e2:	10 82       	st	Z, r1

	/* resetting pointer to point to NULL */
	g_callBackPtr = NULL_PTR;
    27e4:	10 92 92 00 	sts	0x0092, r1
    27e8:	10 92 91 00 	sts	0x0091, r1
}
    27ec:	cf 91       	pop	r28
    27ee:	df 91       	pop	r29
    27f0:	08 95       	ret

000027f2 <__vector_11>:


ISR(TIMER0_OVF_vect)
{
    27f2:	1f 92       	push	r1
    27f4:	0f 92       	push	r0
    27f6:	0f b6       	in	r0, 0x3f	; 63
    27f8:	0f 92       	push	r0
    27fa:	11 24       	eor	r1, r1
    27fc:	2f 93       	push	r18
    27fe:	3f 93       	push	r19
    2800:	4f 93       	push	r20
    2802:	5f 93       	push	r21
    2804:	6f 93       	push	r22
    2806:	7f 93       	push	r23
    2808:	8f 93       	push	r24
    280a:	9f 93       	push	r25
    280c:	af 93       	push	r26
    280e:	bf 93       	push	r27
    2810:	ef 93       	push	r30
    2812:	ff 93       	push	r31
    2814:	df 93       	push	r29
    2816:	cf 93       	push	r28
    2818:	cd b7       	in	r28, 0x3d	; 61
    281a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    281c:	80 91 91 00 	lds	r24, 0x0091
    2820:	90 91 92 00 	lds	r25, 0x0092
    2824:	00 97       	sbiw	r24, 0x00	; 0
    2826:	29 f0       	breq	.+10     	; 0x2832 <__vector_11+0x40>
	{
		(*g_callBackPtr)();		/* calling call back function */
    2828:	e0 91 91 00 	lds	r30, 0x0091
    282c:	f0 91 92 00 	lds	r31, 0x0092
    2830:	09 95       	icall
	}
}
    2832:	cf 91       	pop	r28
    2834:	df 91       	pop	r29
    2836:	ff 91       	pop	r31
    2838:	ef 91       	pop	r30
    283a:	bf 91       	pop	r27
    283c:	af 91       	pop	r26
    283e:	9f 91       	pop	r25
    2840:	8f 91       	pop	r24
    2842:	7f 91       	pop	r23
    2844:	6f 91       	pop	r22
    2846:	5f 91       	pop	r21
    2848:	4f 91       	pop	r20
    284a:	3f 91       	pop	r19
    284c:	2f 91       	pop	r18
    284e:	0f 90       	pop	r0
    2850:	0f be       	out	0x3f, r0	; 63
    2852:	0f 90       	pop	r0
    2854:	1f 90       	pop	r1
    2856:	18 95       	reti

00002858 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    2858:	1f 92       	push	r1
    285a:	0f 92       	push	r0
    285c:	0f b6       	in	r0, 0x3f	; 63
    285e:	0f 92       	push	r0
    2860:	11 24       	eor	r1, r1
    2862:	2f 93       	push	r18
    2864:	3f 93       	push	r19
    2866:	4f 93       	push	r20
    2868:	5f 93       	push	r21
    286a:	6f 93       	push	r22
    286c:	7f 93       	push	r23
    286e:	8f 93       	push	r24
    2870:	9f 93       	push	r25
    2872:	af 93       	push	r26
    2874:	bf 93       	push	r27
    2876:	ef 93       	push	r30
    2878:	ff 93       	push	r31
    287a:	df 93       	push	r29
    287c:	cf 93       	push	r28
    287e:	cd b7       	in	r28, 0x3d	; 61
    2880:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2882:	80 91 91 00 	lds	r24, 0x0091
    2886:	90 91 92 00 	lds	r25, 0x0092
    288a:	00 97       	sbiw	r24, 0x00	; 0
    288c:	29 f0       	breq	.+10     	; 0x2898 <__vector_10+0x40>
	{
		(*g_callBackPtr)();		/* calling call back function */
    288e:	e0 91 91 00 	lds	r30, 0x0091
    2892:	f0 91 92 00 	lds	r31, 0x0092
    2896:	09 95       	icall
	}
}
    2898:	cf 91       	pop	r28
    289a:	df 91       	pop	r29
    289c:	ff 91       	pop	r31
    289e:	ef 91       	pop	r30
    28a0:	bf 91       	pop	r27
    28a2:	af 91       	pop	r26
    28a4:	9f 91       	pop	r25
    28a6:	8f 91       	pop	r24
    28a8:	7f 91       	pop	r23
    28aa:	6f 91       	pop	r22
    28ac:	5f 91       	pop	r21
    28ae:	4f 91       	pop	r20
    28b0:	3f 91       	pop	r19
    28b2:	2f 91       	pop	r18
    28b4:	0f 90       	pop	r0
    28b6:	0f be       	out	0x3f, r0	; 63
    28b8:	0f 90       	pop	r0
    28ba:	1f 90       	pop	r1
    28bc:	18 95       	reti

000028be <TIMER1_init>:


static volatile void(*g_callBackPtr)(void) = NULL_PTR;

void TIMER1_init(const Timer1_ConfigType * Config_Ptr)
{
    28be:	df 93       	push	r29
    28c0:	cf 93       	push	r28
    28c2:	00 d0       	rcall	.+0      	; 0x28c4 <TIMER1_init+0x6>
    28c4:	cd b7       	in	r28, 0x3d	; 61
    28c6:	de b7       	in	r29, 0x3e	; 62
    28c8:	9a 83       	std	Y+2, r25	; 0x02
    28ca:	89 83       	std	Y+1, r24	; 0x01

	/* clearing TIMER1 registers */
	TCCR1A_REG.Byte = 0;
    28cc:	ef e4       	ldi	r30, 0x4F	; 79
    28ce:	f0 e0       	ldi	r31, 0x00	; 0
    28d0:	10 82       	st	Z, r1
	TCCR1B_REG.Byte = 0;
    28d2:	ee e4       	ldi	r30, 0x4E	; 78
    28d4:	f0 e0       	ldi	r31, 0x00	; 0
    28d6:	10 82       	st	Z, r1

	/* setting FOC1A/B as non PWM mode */
	TCCR1A_REG.Bits.FOC1A_bit = 1;
    28d8:	ef e4       	ldi	r30, 0x4F	; 79
    28da:	f0 e0       	ldi	r31, 0x00	; 0
    28dc:	80 81       	ld	r24, Z
    28de:	88 60       	ori	r24, 0x08	; 8
    28e0:	80 83       	st	Z, r24
	TCCR1A_REG.Bits.FOC1B_bit = 1;
    28e2:	ef e4       	ldi	r30, 0x4F	; 79
    28e4:	f0 e0       	ldi	r31, 0x00	; 0
    28e6:	80 81       	ld	r24, Z
    28e8:	84 60       	ori	r24, 0x04	; 4
    28ea:	80 83       	st	Z, r24


	if((Config_Ptr -> mode) == TIMER1_OVERFLOW)
    28ec:	e9 81       	ldd	r30, Y+1	; 0x01
    28ee:	fa 81       	ldd	r31, Y+2	; 0x02
    28f0:	85 81       	ldd	r24, Z+5	; 0x05
    28f2:	88 23       	and	r24, r24
    28f4:	f9 f4       	brne	.+62     	; 0x2934 <TIMER1_init+0x76>
	{
		/* setting wave generation mode as overflow mode */
		TCCR1A_REG.Bits.WGM10_bit = 0;
    28f6:	ef e4       	ldi	r30, 0x4F	; 79
    28f8:	f0 e0       	ldi	r31, 0x00	; 0
    28fa:	80 81       	ld	r24, Z
    28fc:	8e 7f       	andi	r24, 0xFE	; 254
    28fe:	80 83       	st	Z, r24
		TCCR1A_REG.Bits.WGM11_bit = 0;
    2900:	ef e4       	ldi	r30, 0x4F	; 79
    2902:	f0 e0       	ldi	r31, 0x00	; 0
    2904:	80 81       	ld	r24, Z
    2906:	8d 7f       	andi	r24, 0xFD	; 253
    2908:	80 83       	st	Z, r24
		TCCR1B_REG.Bits.WGM12_bit = 0;
    290a:	ee e4       	ldi	r30, 0x4E	; 78
    290c:	f0 e0       	ldi	r31, 0x00	; 0
    290e:	80 81       	ld	r24, Z
    2910:	87 7f       	andi	r24, 0xF7	; 247
    2912:	80 83       	st	Z, r24
		TCCR1B_REG.Bits.WGM13_bit = 0;
    2914:	ee e4       	ldi	r30, 0x4E	; 78
    2916:	f0 e0       	ldi	r31, 0x00	; 0
    2918:	80 81       	ld	r24, Z
    291a:	8f 7e       	andi	r24, 0xEF	; 239
    291c:	80 83       	st	Z, r24

		/* enable overflow module interrupt bit */
		TIMSK_REG.Bits.TOIE1_bit = 1;
    291e:	e9 e5       	ldi	r30, 0x59	; 89
    2920:	f0 e0       	ldi	r31, 0x00	; 0
    2922:	80 81       	ld	r24, Z
    2924:	84 60       	ori	r24, 0x04	; 4
    2926:	80 83       	st	Z, r24
		TIMSK_REG.Bits.OCIE1A_bit = 0;
    2928:	e9 e5       	ldi	r30, 0x59	; 89
    292a:	f0 e0       	ldi	r31, 0x00	; 0
    292c:	80 81       	ld	r24, Z
    292e:	8f 7e       	andi	r24, 0xEF	; 239
    2930:	80 83       	st	Z, r24
    2932:	1d c0       	rjmp	.+58     	; 0x296e <TIMER1_init+0xb0>

	}
	else if((Config_Ptr -> mode) == TIMER1_COMPARE)
    2934:	e9 81       	ldd	r30, Y+1	; 0x01
    2936:	fa 81       	ldd	r31, Y+2	; 0x02
    2938:	85 81       	ldd	r24, Z+5	; 0x05
    293a:	84 30       	cpi	r24, 0x04	; 4
    293c:	c1 f4       	brne	.+48     	; 0x296e <TIMER1_init+0xb0>
	{
		/* setting wave generation mode as overflow mode */
		TCCR1B_REG.Bits.WGM12_bit = 1;
    293e:	ee e4       	ldi	r30, 0x4E	; 78
    2940:	f0 e0       	ldi	r31, 0x00	; 0
    2942:	80 81       	ld	r24, Z
    2944:	88 60       	ori	r24, 0x08	; 8
    2946:	80 83       	st	Z, r24

		/* setting the compare match value */
		OCR1A_REG.Byte = Config_Ptr -> compareValue;
    2948:	aa e4       	ldi	r26, 0x4A	; 74
    294a:	b0 e0       	ldi	r27, 0x00	; 0
    294c:	e9 81       	ldd	r30, Y+1	; 0x01
    294e:	fa 81       	ldd	r31, Y+2	; 0x02
    2950:	82 81       	ldd	r24, Z+2	; 0x02
    2952:	93 81       	ldd	r25, Z+3	; 0x03
    2954:	11 96       	adiw	r26, 0x01	; 1
    2956:	9c 93       	st	X, r25
    2958:	8e 93       	st	-X, r24

		/* enable compare match module interrupt bit */
		TIMSK_REG.Bits.OCIE1A_bit = 1;
    295a:	e9 e5       	ldi	r30, 0x59	; 89
    295c:	f0 e0       	ldi	r31, 0x00	; 0
    295e:	80 81       	ld	r24, Z
    2960:	80 61       	ori	r24, 0x10	; 16
    2962:	80 83       	st	Z, r24
		TIMSK_REG.Bits.TOIE1_bit = 0;
    2964:	e9 e5       	ldi	r30, 0x59	; 89
    2966:	f0 e0       	ldi	r31, 0x00	; 0
    2968:	80 81       	ld	r24, Z
    296a:	8b 7f       	andi	r24, 0xFB	; 251
    296c:	80 83       	st	Z, r24


	}

	/* configuring TIMER1 prescaler */
	TCCR1B_REG.Byte = (TCCR1B_REG.Byte & 0xF8) | (Config_Ptr -> prescaler);
    296e:	ae e4       	ldi	r26, 0x4E	; 78
    2970:	b0 e0       	ldi	r27, 0x00	; 0
    2972:	ee e4       	ldi	r30, 0x4E	; 78
    2974:	f0 e0       	ldi	r31, 0x00	; 0
    2976:	80 81       	ld	r24, Z
    2978:	98 2f       	mov	r25, r24
    297a:	98 7f       	andi	r25, 0xF8	; 248
    297c:	e9 81       	ldd	r30, Y+1	; 0x01
    297e:	fa 81       	ldd	r31, Y+2	; 0x02
    2980:	84 81       	ldd	r24, Z+4	; 0x04
    2982:	89 2b       	or	r24, r25
    2984:	8c 93       	st	X, r24

	/* setting timer counter initial value */
	TCNT1_REG.Byte = Config_Ptr -> initialValue;
    2986:	ac e4       	ldi	r26, 0x4C	; 76
    2988:	b0 e0       	ldi	r27, 0x00	; 0
    298a:	e9 81       	ldd	r30, Y+1	; 0x01
    298c:	fa 81       	ldd	r31, Y+2	; 0x02
    298e:	80 81       	ld	r24, Z
    2990:	91 81       	ldd	r25, Z+1	; 0x01
    2992:	11 96       	adiw	r26, 0x01	; 1
    2994:	9c 93       	st	X, r25
    2996:	8e 93       	st	-X, r24

}
    2998:	0f 90       	pop	r0
    299a:	0f 90       	pop	r0
    299c:	cf 91       	pop	r28
    299e:	df 91       	pop	r29
    29a0:	08 95       	ret

000029a2 <TIMER1_deInit>:

void TIMER1_deInit(void)
{
    29a2:	df 93       	push	r29
    29a4:	cf 93       	push	r28
    29a6:	cd b7       	in	r28, 0x3d	; 61
    29a8:	de b7       	in	r29, 0x3e	; 62
	/* clearing all TIMER1 registers and bits */
	TCCR1A_REG.Byte = 0;
    29aa:	ef e4       	ldi	r30, 0x4F	; 79
    29ac:	f0 e0       	ldi	r31, 0x00	; 0
    29ae:	10 82       	st	Z, r1
	TCCR1B_REG.Byte = 0;
    29b0:	ee e4       	ldi	r30, 0x4E	; 78
    29b2:	f0 e0       	ldi	r31, 0x00	; 0
    29b4:	10 82       	st	Z, r1
	TIMSK_REG.Bits.TOIE1_bit = 0;
    29b6:	e9 e5       	ldi	r30, 0x59	; 89
    29b8:	f0 e0       	ldi	r31, 0x00	; 0
    29ba:	80 81       	ld	r24, Z
    29bc:	8b 7f       	andi	r24, 0xFB	; 251
    29be:	80 83       	st	Z, r24
	TIMSK_REG.Bits.OCIE1A_bit = 0;
    29c0:	e9 e5       	ldi	r30, 0x59	; 89
    29c2:	f0 e0       	ldi	r31, 0x00	; 0
    29c4:	80 81       	ld	r24, Z
    29c6:	8f 7e       	andi	r24, 0xEF	; 239
    29c8:	80 83       	st	Z, r24
	TCNT1_REG.Byte = 0;
    29ca:	ec e4       	ldi	r30, 0x4C	; 76
    29cc:	f0 e0       	ldi	r31, 0x00	; 0
    29ce:	11 82       	std	Z+1, r1	; 0x01
    29d0:	10 82       	st	Z, r1
	OCR1A_REG.Byte = 0;
    29d2:	ea e4       	ldi	r30, 0x4A	; 74
    29d4:	f0 e0       	ldi	r31, 0x00	; 0
    29d6:	11 82       	std	Z+1, r1	; 0x01
    29d8:	10 82       	st	Z, r1

	/* resetting pointer to point to NULL */
	g_callBackPtr = NULL_PTR;
    29da:	10 92 94 00 	sts	0x0094, r1
    29de:	10 92 93 00 	sts	0x0093, r1
}
    29e2:	cf 91       	pop	r28
    29e4:	df 91       	pop	r29
    29e6:	08 95       	ret

000029e8 <TIMER1_setCallBack>:

void TIMER1_setCallBack(void(*a_ptr)(void))
{
    29e8:	df 93       	push	r29
    29ea:	cf 93       	push	r28
    29ec:	00 d0       	rcall	.+0      	; 0x29ee <TIMER1_setCallBack+0x6>
    29ee:	cd b7       	in	r28, 0x3d	; 61
    29f0:	de b7       	in	r29, 0x3e	; 62
    29f2:	9a 83       	std	Y+2, r25	; 0x02
    29f4:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;	/* saving address of call back function */
    29f6:	89 81       	ldd	r24, Y+1	; 0x01
    29f8:	9a 81       	ldd	r25, Y+2	; 0x02
    29fa:	90 93 94 00 	sts	0x0094, r25
    29fe:	80 93 93 00 	sts	0x0093, r24
}
    2a02:	0f 90       	pop	r0
    2a04:	0f 90       	pop	r0
    2a06:	cf 91       	pop	r28
    2a08:	df 91       	pop	r29
    2a0a:	08 95       	ret

00002a0c <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    2a0c:	1f 92       	push	r1
    2a0e:	0f 92       	push	r0
    2a10:	0f b6       	in	r0, 0x3f	; 63
    2a12:	0f 92       	push	r0
    2a14:	11 24       	eor	r1, r1
    2a16:	2f 93       	push	r18
    2a18:	3f 93       	push	r19
    2a1a:	4f 93       	push	r20
    2a1c:	5f 93       	push	r21
    2a1e:	6f 93       	push	r22
    2a20:	7f 93       	push	r23
    2a22:	8f 93       	push	r24
    2a24:	9f 93       	push	r25
    2a26:	af 93       	push	r26
    2a28:	bf 93       	push	r27
    2a2a:	ef 93       	push	r30
    2a2c:	ff 93       	push	r31
    2a2e:	df 93       	push	r29
    2a30:	cf 93       	push	r28
    2a32:	cd b7       	in	r28, 0x3d	; 61
    2a34:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2a36:	80 91 93 00 	lds	r24, 0x0093
    2a3a:	90 91 94 00 	lds	r25, 0x0094
    2a3e:	00 97       	sbiw	r24, 0x00	; 0
    2a40:	29 f0       	breq	.+10     	; 0x2a4c <__vector_9+0x40>
	{
		(*g_callBackPtr)();		/* calling call back function */
    2a42:	e0 91 93 00 	lds	r30, 0x0093
    2a46:	f0 91 94 00 	lds	r31, 0x0094
    2a4a:	09 95       	icall
	}
}
    2a4c:	cf 91       	pop	r28
    2a4e:	df 91       	pop	r29
    2a50:	ff 91       	pop	r31
    2a52:	ef 91       	pop	r30
    2a54:	bf 91       	pop	r27
    2a56:	af 91       	pop	r26
    2a58:	9f 91       	pop	r25
    2a5a:	8f 91       	pop	r24
    2a5c:	7f 91       	pop	r23
    2a5e:	6f 91       	pop	r22
    2a60:	5f 91       	pop	r21
    2a62:	4f 91       	pop	r20
    2a64:	3f 91       	pop	r19
    2a66:	2f 91       	pop	r18
    2a68:	0f 90       	pop	r0
    2a6a:	0f be       	out	0x3f, r0	; 63
    2a6c:	0f 90       	pop	r0
    2a6e:	1f 90       	pop	r1
    2a70:	18 95       	reti

00002a72 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    2a72:	1f 92       	push	r1
    2a74:	0f 92       	push	r0
    2a76:	0f b6       	in	r0, 0x3f	; 63
    2a78:	0f 92       	push	r0
    2a7a:	11 24       	eor	r1, r1
    2a7c:	2f 93       	push	r18
    2a7e:	3f 93       	push	r19
    2a80:	4f 93       	push	r20
    2a82:	5f 93       	push	r21
    2a84:	6f 93       	push	r22
    2a86:	7f 93       	push	r23
    2a88:	8f 93       	push	r24
    2a8a:	9f 93       	push	r25
    2a8c:	af 93       	push	r26
    2a8e:	bf 93       	push	r27
    2a90:	ef 93       	push	r30
    2a92:	ff 93       	push	r31
    2a94:	df 93       	push	r29
    2a96:	cf 93       	push	r28
    2a98:	cd b7       	in	r28, 0x3d	; 61
    2a9a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2a9c:	80 91 93 00 	lds	r24, 0x0093
    2aa0:	90 91 94 00 	lds	r25, 0x0094
    2aa4:	00 97       	sbiw	r24, 0x00	; 0
    2aa6:	29 f0       	breq	.+10     	; 0x2ab2 <__vector_7+0x40>
	{
		(*g_callBackPtr)();		/* calling call back function */
    2aa8:	e0 91 93 00 	lds	r30, 0x0093
    2aac:	f0 91 94 00 	lds	r31, 0x0094
    2ab0:	09 95       	icall
	}
}
    2ab2:	cf 91       	pop	r28
    2ab4:	df 91       	pop	r29
    2ab6:	ff 91       	pop	r31
    2ab8:	ef 91       	pop	r30
    2aba:	bf 91       	pop	r27
    2abc:	af 91       	pop	r26
    2abe:	9f 91       	pop	r25
    2ac0:	8f 91       	pop	r24
    2ac2:	7f 91       	pop	r23
    2ac4:	6f 91       	pop	r22
    2ac6:	5f 91       	pop	r21
    2ac8:	4f 91       	pop	r20
    2aca:	3f 91       	pop	r19
    2acc:	2f 91       	pop	r18
    2ace:	0f 90       	pop	r0
    2ad0:	0f be       	out	0x3f, r0	; 63
    2ad2:	0f 90       	pop	r0
    2ad4:	1f 90       	pop	r1
    2ad6:	18 95       	reti

00002ad8 <TWI_init>:

#include "twi.h"
#include "avr_registers.h"

void TWI_init(TWI_ConfigType *config)
{
    2ad8:	df 93       	push	r29
    2ada:	cf 93       	push	r28
    2adc:	00 d0       	rcall	.+0      	; 0x2ade <TWI_init+0x6>
    2ade:	cd b7       	in	r28, 0x3d	; 61
    2ae0:	de b7       	in	r29, 0x3e	; 62
    2ae2:	9a 83       	std	Y+2, r25	; 0x02
    2ae4:	89 83       	std	Y+1, r24	; 0x01
	TWBR_REG.Byte = config -> bit_rate;
    2ae6:	a0 e2       	ldi	r26, 0x20	; 32
    2ae8:	b0 e0       	ldi	r27, 0x00	; 0
    2aea:	e9 81       	ldd	r30, Y+1	; 0x01
    2aec:	fa 81       	ldd	r31, Y+2	; 0x02
    2aee:	83 81       	ldd	r24, Z+3	; 0x03
    2af0:	94 81       	ldd	r25, Z+4	; 0x04
    2af2:	8c 93       	st	X, r24
	TWSR_REG.Byte = config -> prescaler;
    2af4:	a1 e2       	ldi	r26, 0x21	; 33
    2af6:	b0 e0       	ldi	r27, 0x00	; 0
    2af8:	e9 81       	ldd	r30, Y+1	; 0x01
    2afa:	fa 81       	ldd	r31, Y+2	; 0x02
    2afc:	80 81       	ld	r24, Z
    2afe:	8c 93       	st	X, r24

	TWAR_REG.Byte = config -> address;	/* set address */
    2b00:	a2 e2       	ldi	r26, 0x22	; 34
    2b02:	b0 e0       	ldi	r27, 0x00	; 0
    2b04:	e9 81       	ldd	r30, Y+1	; 0x01
    2b06:	fa 81       	ldd	r31, Y+2	; 0x02
    2b08:	81 81       	ldd	r24, Z+1	; 0x01
    2b0a:	92 81       	ldd	r25, Z+2	; 0x02
    2b0c:	8c 93       	st	X, r24

	TWCR_REG.Bits.TWEN_bit = 1;			/* enable TWI */
    2b0e:	e6 e5       	ldi	r30, 0x56	; 86
    2b10:	f0 e0       	ldi	r31, 0x00	; 0
    2b12:	80 81       	ld	r24, Z
    2b14:	84 60       	ori	r24, 0x04	; 4
    2b16:	80 83       	st	Z, r24
}
    2b18:	0f 90       	pop	r0
    2b1a:	0f 90       	pop	r0
    2b1c:	cf 91       	pop	r28
    2b1e:	df 91       	pop	r29
    2b20:	08 95       	ret

00002b22 <TWI_start>:

void TWI_start()
{
    2b22:	df 93       	push	r29
    2b24:	cf 93       	push	r28
    2b26:	cd b7       	in	r28, 0x3d	; 61
    2b28:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR_REG.Byte = 0b00000100;
    2b2a:	e6 e5       	ldi	r30, 0x56	; 86
    2b2c:	f0 e0       	ldi	r31, 0x00	; 0
    2b2e:	84 e0       	ldi	r24, 0x04	; 4
    2b30:	80 83       	st	Z, r24
	TWCR_REG.Bits.TWSTA_bit = 1;
    2b32:	e6 e5       	ldi	r30, 0x56	; 86
    2b34:	f0 e0       	ldi	r31, 0x00	; 0
    2b36:	80 81       	ld	r24, Z
    2b38:	80 62       	ori	r24, 0x20	; 32
    2b3a:	80 83       	st	Z, r24
	TWCR_REG.Bits.TWINT_bit = 1;
    2b3c:	e6 e5       	ldi	r30, 0x56	; 86
    2b3e:	f0 e0       	ldi	r31, 0x00	; 0
    2b40:	80 81       	ld	r24, Z
    2b42:	80 68       	ori	r24, 0x80	; 128
    2b44:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while(TWCR_REG.Bits.TWINT_bit == 0);
    2b46:	e6 e5       	ldi	r30, 0x56	; 86
    2b48:	f0 e0       	ldi	r31, 0x00	; 0
    2b4a:	80 81       	ld	r24, Z
    2b4c:	80 78       	andi	r24, 0x80	; 128
    2b4e:	88 23       	and	r24, r24
    2b50:	d1 f3       	breq	.-12     	; 0x2b46 <TWI_start+0x24>
}
    2b52:	cf 91       	pop	r28
    2b54:	df 91       	pop	r29
    2b56:	08 95       	ret

00002b58 <TWI_stop>:

void TWI_stop()
{
    2b58:	df 93       	push	r29
    2b5a:	cf 93       	push	r28
    2b5c:	cd b7       	in	r28, 0x3d	; 61
    2b5e:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR_REG.Byte = 0b00000100;
    2b60:	e6 e5       	ldi	r30, 0x56	; 86
    2b62:	f0 e0       	ldi	r31, 0x00	; 0
    2b64:	84 e0       	ldi	r24, 0x04	; 4
    2b66:	80 83       	st	Z, r24
	TWCR_REG.Bits.TWSTO_bit = 1;
    2b68:	e6 e5       	ldi	r30, 0x56	; 86
    2b6a:	f0 e0       	ldi	r31, 0x00	; 0
    2b6c:	80 81       	ld	r24, Z
    2b6e:	80 61       	ori	r24, 0x10	; 16
    2b70:	80 83       	st	Z, r24
	TWCR_REG.Bits.TWINT_bit = 1;
    2b72:	e6 e5       	ldi	r30, 0x56	; 86
    2b74:	f0 e0       	ldi	r31, 0x00	; 0
    2b76:	80 81       	ld	r24, Z
    2b78:	80 68       	ori	r24, 0x80	; 128
    2b7a:	80 83       	st	Z, r24
}
    2b7c:	cf 91       	pop	r28
    2b7e:	df 91       	pop	r29
    2b80:	08 95       	ret

00002b82 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    2b82:	df 93       	push	r29
    2b84:	cf 93       	push	r28
    2b86:	0f 92       	push	r0
    2b88:	cd b7       	in	r28, 0x3d	; 61
    2b8a:	de b7       	in	r29, 0x3e	; 62
    2b8c:	89 83       	std	Y+1, r24	; 0x01
	/* Put data On TWI data Register */
	TWDR_REG.Byte = data;
    2b8e:	e3 e2       	ldi	r30, 0x23	; 35
    2b90:	f0 e0       	ldi	r31, 0x00	; 0
    2b92:	89 81       	ldd	r24, Y+1	; 0x01
    2b94:	80 83       	st	Z, r24

	/*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR_REG.Byte = 0b00000100;
    2b96:	e6 e5       	ldi	r30, 0x56	; 86
    2b98:	f0 e0       	ldi	r31, 0x00	; 0
    2b9a:	84 e0       	ldi	r24, 0x04	; 4
    2b9c:	80 83       	st	Z, r24
	TWCR_REG.Bits.TWINT_bit = 1;
    2b9e:	e6 e5       	ldi	r30, 0x56	; 86
    2ba0:	f0 e0       	ldi	r31, 0x00	; 0
    2ba2:	80 81       	ld	r24, Z
    2ba4:	80 68       	ori	r24, 0x80	; 128
    2ba6:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	while(TWCR_REG.Bits.TWINT_bit == 0);
    2ba8:	e6 e5       	ldi	r30, 0x56	; 86
    2baa:	f0 e0       	ldi	r31, 0x00	; 0
    2bac:	80 81       	ld	r24, Z
    2bae:	80 78       	andi	r24, 0x80	; 128
    2bb0:	88 23       	and	r24, r24
    2bb2:	d1 f3       	breq	.-12     	; 0x2ba8 <TWI_writeByte+0x26>
}
    2bb4:	0f 90       	pop	r0
    2bb6:	cf 91       	pop	r28
    2bb8:	df 91       	pop	r29
    2bba:	08 95       	ret

00002bbc <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK()
{
    2bbc:	df 93       	push	r29
    2bbe:	cf 93       	push	r28
    2bc0:	cd b7       	in	r28, 0x3d	; 61
    2bc2:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR_REG.Byte = 0b00000100;
    2bc4:	e6 e5       	ldi	r30, 0x56	; 86
    2bc6:	f0 e0       	ldi	r31, 0x00	; 0
    2bc8:	84 e0       	ldi	r24, 0x04	; 4
    2bca:	80 83       	st	Z, r24
	TWCR_REG.Bits.TWEA_bit = 1;
    2bcc:	e6 e5       	ldi	r30, 0x56	; 86
    2bce:	f0 e0       	ldi	r31, 0x00	; 0
    2bd0:	80 81       	ld	r24, Z
    2bd2:	80 64       	ori	r24, 0x40	; 64
    2bd4:	80 83       	st	Z, r24
	TWCR_REG.Bits.TWINT_bit = 1;
    2bd6:	e6 e5       	ldi	r30, 0x56	; 86
    2bd8:	f0 e0       	ldi	r31, 0x00	; 0
    2bda:	80 81       	ld	r24, Z
    2bdc:	80 68       	ori	r24, 0x80	; 128
    2bde:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(TWCR_REG.Bits.TWINT_bit == 0);
    2be0:	e6 e5       	ldi	r30, 0x56	; 86
    2be2:	f0 e0       	ldi	r31, 0x00	; 0
    2be4:	80 81       	ld	r24, Z
    2be6:	80 78       	andi	r24, 0x80	; 128
    2be8:	88 23       	and	r24, r24
    2bea:	d1 f3       	breq	.-12     	; 0x2be0 <TWI_readByteWithACK+0x24>

    /* Read Data */
	return TWDR_REG.Byte;
    2bec:	e3 e2       	ldi	r30, 0x23	; 35
    2bee:	f0 e0       	ldi	r31, 0x00	; 0
    2bf0:	80 81       	ld	r24, Z
}
    2bf2:	cf 91       	pop	r28
    2bf4:	df 91       	pop	r29
    2bf6:	08 95       	ret

00002bf8 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK()
{
    2bf8:	df 93       	push	r29
    2bfa:	cf 93       	push	r28
    2bfc:	cd b7       	in	r28, 0x3d	; 61
    2bfe:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR_REG.Byte = 0b00000100;
    2c00:	e6 e5       	ldi	r30, 0x56	; 86
    2c02:	f0 e0       	ldi	r31, 0x00	; 0
    2c04:	84 e0       	ldi	r24, 0x04	; 4
    2c06:	80 83       	st	Z, r24
	TWCR_REG.Bits.TWINT_bit = 1;
    2c08:	e6 e5       	ldi	r30, 0x56	; 86
    2c0a:	f0 e0       	ldi	r31, 0x00	; 0
    2c0c:	80 81       	ld	r24, Z
    2c0e:	80 68       	ori	r24, 0x80	; 128
    2c10:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(TWCR_REG.Bits.TWINT_bit == 0);
    2c12:	e6 e5       	ldi	r30, 0x56	; 86
    2c14:	f0 e0       	ldi	r31, 0x00	; 0
    2c16:	80 81       	ld	r24, Z
    2c18:	80 78       	andi	r24, 0x80	; 128
    2c1a:	88 23       	and	r24, r24
    2c1c:	d1 f3       	breq	.-12     	; 0x2c12 <TWI_readByteWithNACK+0x1a>

    /* Read Data */
	return TWDR_REG.Byte;
    2c1e:	e3 e2       	ldi	r30, 0x23	; 35
    2c20:	f0 e0       	ldi	r31, 0x00	; 0
    2c22:	80 81       	ld	r24, Z
}
    2c24:	cf 91       	pop	r28
    2c26:	df 91       	pop	r29
    2c28:	08 95       	ret

00002c2a <TWI_getStatus>:

uint8 TWI_getStatus()
{
    2c2a:	df 93       	push	r29
    2c2c:	cf 93       	push	r28
    2c2e:	0f 92       	push	r0
    2c30:	cd b7       	in	r28, 0x3d	; 61
    2c32:	de b7       	in	r29, 0x3e	; 62
	uint8 status;

	/* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
	status = TWSR_REG.Byte & 0xF8;
    2c34:	e1 e2       	ldi	r30, 0x21	; 33
    2c36:	f0 e0       	ldi	r31, 0x00	; 0
    2c38:	80 81       	ld	r24, Z
    2c3a:	88 7f       	andi	r24, 0xF8	; 248
    2c3c:	89 83       	std	Y+1, r24	; 0x01
	return status;
    2c3e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c40:	0f 90       	pop	r0
    2c42:	cf 91       	pop	r28
    2c44:	df 91       	pop	r29
    2c46:	08 95       	ret

00002c48 <UART_init>:
#include "uart.h"
#include "avr_registers.h"


void UART_init(UART_CONFIG_TYPE* config)
{
    2c48:	df 93       	push	r29
    2c4a:	cf 93       	push	r28
    2c4c:	00 d0       	rcall	.+0      	; 0x2c4e <UART_init+0x6>
    2c4e:	00 d0       	rcall	.+0      	; 0x2c50 <UART_init+0x8>
    2c50:	cd b7       	in	r28, 0x3d	; 61
    2c52:	de b7       	in	r29, 0x3e	; 62
    2c54:	9c 83       	std	Y+4, r25	; 0x04
    2c56:	8b 83       	std	Y+3, r24	; 0x03

	uint16 ubrr_value = 0;			/* variable to calculate UBRR value from baud rate */
    2c58:	1a 82       	std	Y+2, r1	; 0x02
    2c5a:	19 82       	std	Y+1, r1	; 0x01

	UCSRA_REG.Byte = 0; 			/* clearing register at first */
    2c5c:	eb e2       	ldi	r30, 0x2B	; 43
    2c5e:	f0 e0       	ldi	r31, 0x00	; 0
    2c60:	10 82       	st	Z, r1

	UCSRA_REG.Bits.U2X_bit = 1;		/* enabling double USART transmission speed */
    2c62:	eb e2       	ldi	r30, 0x2B	; 43
    2c64:	f0 e0       	ldi	r31, 0x00	; 0
    2c66:	80 81       	ld	r24, Z
    2c68:	82 60       	ori	r24, 0x02	; 2
    2c6a:	80 83       	st	Z, r24

	UCSRB_REG.Byte = 0;				/* clearing register at first */
    2c6c:	ea e2       	ldi	r30, 0x2A	; 42
    2c6e:	f0 e0       	ldi	r31, 0x00	; 0
    2c70:	10 82       	st	Z, r1

	UCSRB_REG.Bits.RXEN_bit = 1;	/* Receiver Enable */
    2c72:	ea e2       	ldi	r30, 0x2A	; 42
    2c74:	f0 e0       	ldi	r31, 0x00	; 0
    2c76:	80 81       	ld	r24, Z
    2c78:	80 61       	ori	r24, 0x10	; 16
    2c7a:	80 83       	st	Z, r24
	UCSRB_REG.Bits.TXEN_bit = 1;	/* Transmitter Enable */
    2c7c:	ea e2       	ldi	r30, 0x2A	; 42
    2c7e:	f0 e0       	ldi	r31, 0x00	; 0
    2c80:	80 81       	ld	r24, Z
    2c82:	88 60       	ori	r24, 0x08	; 8
    2c84:	80 83       	st	Z, r24


	/* setting UCSZ2 Bit if char size = 9 */
	if(config -> charSize == _9BIT)
    2c86:	eb 81       	ldd	r30, Y+3	; 0x03
    2c88:	fc 81       	ldd	r31, Y+4	; 0x04
    2c8a:	82 81       	ldd	r24, Z+2	; 0x02
    2c8c:	87 30       	cpi	r24, 0x07	; 7
    2c8e:	51 f4       	brne	.+20     	; 0x2ca4 <UART_init+0x5c>
	{
		UCSRB_REG.Bits.UCSZ2_bit = 1;
    2c90:	ea e2       	ldi	r30, 0x2A	; 42
    2c92:	f0 e0       	ldi	r31, 0x00	; 0
    2c94:	80 81       	ld	r24, Z
    2c96:	84 60       	ori	r24, 0x04	; 4
    2c98:	80 83       	st	Z, r24
		config -> charSize = 3;
    2c9a:	eb 81       	ldd	r30, Y+3	; 0x03
    2c9c:	fc 81       	ldd	r31, Y+4	; 0x04
    2c9e:	83 e0       	ldi	r24, 0x03	; 3
    2ca0:	82 83       	std	Z+2, r24	; 0x02
    2ca2:	05 c0       	rjmp	.+10     	; 0x2cae <UART_init+0x66>
	}
	else
	{
		UCSRB_REG.Bits.UCSZ2_bit = 0;
    2ca4:	ea e2       	ldi	r30, 0x2A	; 42
    2ca6:	f0 e0       	ldi	r31, 0x00	; 0
    2ca8:	80 81       	ld	r24, Z
    2caa:	8b 7f       	andi	r24, 0xFB	; 251
    2cac:	80 83       	st	Z, r24
	}


	/* setting URSEL bit to write in UCSRC register */
	/* clearing register at first */
	UCSRC_REG.Byte = 0;
    2cae:	e0 e4       	ldi	r30, 0x40	; 64
    2cb0:	f0 e0       	ldi	r31, 0x00	; 0
    2cb2:	10 82       	st	Z, r1

	/* configuring stop bit (1 bit or 2 bits) */
	UCSRC_REG.Bits.USBS_bit = config -> stopBit;
    2cb4:	a0 e4       	ldi	r26, 0x40	; 64
    2cb6:	b0 e0       	ldi	r27, 0x00	; 0
    2cb8:	eb 81       	ldd	r30, Y+3	; 0x03
    2cba:	fc 81       	ldd	r31, Y+4	; 0x04
    2cbc:	81 81       	ldd	r24, Z+1	; 0x01
    2cbe:	81 70       	andi	r24, 0x01	; 1
    2cc0:	81 70       	andi	r24, 0x01	; 1
    2cc2:	98 2f       	mov	r25, r24
    2cc4:	99 0f       	add	r25, r25
    2cc6:	99 0f       	add	r25, r25
    2cc8:	99 0f       	add	r25, r25
    2cca:	8c 91       	ld	r24, X
    2ccc:	87 7f       	andi	r24, 0xF7	; 247
    2cce:	89 2b       	or	r24, r25
    2cd0:	8c 93       	st	X, r24

	/* configuring parity */
	UCSRC_REG.Byte = (UCSRC_REG.Byte & 0b11001111) | ((config -> parity) << 4);
    2cd2:	a0 e4       	ldi	r26, 0x40	; 64
    2cd4:	b0 e0       	ldi	r27, 0x00	; 0
    2cd6:	e0 e4       	ldi	r30, 0x40	; 64
    2cd8:	f0 e0       	ldi	r31, 0x00	; 0
    2cda:	80 81       	ld	r24, Z
    2cdc:	28 2f       	mov	r18, r24
    2cde:	2f 7c       	andi	r18, 0xCF	; 207
    2ce0:	eb 81       	ldd	r30, Y+3	; 0x03
    2ce2:	fc 81       	ldd	r31, Y+4	; 0x04
    2ce4:	80 81       	ld	r24, Z
    2ce6:	88 2f       	mov	r24, r24
    2ce8:	90 e0       	ldi	r25, 0x00	; 0
    2cea:	82 95       	swap	r24
    2cec:	92 95       	swap	r25
    2cee:	90 7f       	andi	r25, 0xF0	; 240
    2cf0:	98 27       	eor	r25, r24
    2cf2:	80 7f       	andi	r24, 0xF0	; 240
    2cf4:	98 27       	eor	r25, r24
    2cf6:	82 2b       	or	r24, r18
    2cf8:	8c 93       	st	X, r24

	/* configuring char size */
	UCSRC_REG.Byte = (UCSRC_REG.Byte & 0b11111001) | ((config -> charSize) << 1);
    2cfa:	a0 e4       	ldi	r26, 0x40	; 64
    2cfc:	b0 e0       	ldi	r27, 0x00	; 0
    2cfe:	e0 e4       	ldi	r30, 0x40	; 64
    2d00:	f0 e0       	ldi	r31, 0x00	; 0
    2d02:	80 81       	ld	r24, Z
    2d04:	28 2f       	mov	r18, r24
    2d06:	29 7f       	andi	r18, 0xF9	; 249
    2d08:	eb 81       	ldd	r30, Y+3	; 0x03
    2d0a:	fc 81       	ldd	r31, Y+4	; 0x04
    2d0c:	82 81       	ldd	r24, Z+2	; 0x02
    2d0e:	88 2f       	mov	r24, r24
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	88 0f       	add	r24, r24
    2d14:	99 1f       	adc	r25, r25
    2d16:	82 2b       	or	r24, r18
    2d18:	8c 93       	st	X, r24

	/* calculating UBRR value */
	ubrr_value = (uint16)(((F_CPU / ((config -> baudRate) * 8UL))) - 1);
    2d1a:	eb 81       	ldd	r30, Y+3	; 0x03
    2d1c:	fc 81       	ldd	r31, Y+4	; 0x04
    2d1e:	83 81       	ldd	r24, Z+3	; 0x03
    2d20:	94 81       	ldd	r25, Z+4	; 0x04
    2d22:	a5 81       	ldd	r26, Z+5	; 0x05
    2d24:	b6 81       	ldd	r27, Z+6	; 0x06
    2d26:	88 0f       	add	r24, r24
    2d28:	99 1f       	adc	r25, r25
    2d2a:	aa 1f       	adc	r26, r26
    2d2c:	bb 1f       	adc	r27, r27
    2d2e:	88 0f       	add	r24, r24
    2d30:	99 1f       	adc	r25, r25
    2d32:	aa 1f       	adc	r26, r26
    2d34:	bb 1f       	adc	r27, r27
    2d36:	88 0f       	add	r24, r24
    2d38:	99 1f       	adc	r25, r25
    2d3a:	aa 1f       	adc	r26, r26
    2d3c:	bb 1f       	adc	r27, r27
    2d3e:	9c 01       	movw	r18, r24
    2d40:	ad 01       	movw	r20, r26
    2d42:	80 e0       	ldi	r24, 0x00	; 0
    2d44:	92 e1       	ldi	r25, 0x12	; 18
    2d46:	aa e7       	ldi	r26, 0x7A	; 122
    2d48:	b0 e0       	ldi	r27, 0x00	; 0
    2d4a:	bc 01       	movw	r22, r24
    2d4c:	cd 01       	movw	r24, r26
    2d4e:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <__udivmodsi4>
    2d52:	da 01       	movw	r26, r20
    2d54:	c9 01       	movw	r24, r18
    2d56:	01 97       	sbiw	r24, 0x01	; 1
    2d58:	9a 83       	std	Y+2, r25	; 0x02
    2d5a:	89 83       	std	Y+1, r24	; 0x01


	/* configuring baud rate */
	UBRRH_REG.Bits.UBRRH_bits = ubrr_value >> 8;
    2d5c:	e0 e4       	ldi	r30, 0x40	; 64
    2d5e:	f0 e0       	ldi	r31, 0x00	; 0
    2d60:	89 81       	ldd	r24, Y+1	; 0x01
    2d62:	9a 81       	ldd	r25, Y+2	; 0x02
    2d64:	89 2f       	mov	r24, r25
    2d66:	99 27       	eor	r25, r25
    2d68:	8f 70       	andi	r24, 0x0F	; 15
    2d6a:	98 2f       	mov	r25, r24
    2d6c:	9f 70       	andi	r25, 0x0F	; 15
    2d6e:	80 81       	ld	r24, Z
    2d70:	80 7f       	andi	r24, 0xF0	; 240
    2d72:	89 2b       	or	r24, r25
    2d74:	80 83       	st	Z, r24
	UBRRL_REG.Byte = ubrr_value;
    2d76:	e9 e2       	ldi	r30, 0x29	; 41
    2d78:	f0 e0       	ldi	r31, 0x00	; 0
    2d7a:	89 81       	ldd	r24, Y+1	; 0x01
    2d7c:	80 83       	st	Z, r24


}
    2d7e:	0f 90       	pop	r0
    2d80:	0f 90       	pop	r0
    2d82:	0f 90       	pop	r0
    2d84:	0f 90       	pop	r0
    2d86:	cf 91       	pop	r28
    2d88:	df 91       	pop	r29
    2d8a:	08 95       	ret

00002d8c <UART_sendByte>:

void UART_sendByte(uint8 byte)
{
    2d8c:	df 93       	push	r29
    2d8e:	cf 93       	push	r28
    2d90:	0f 92       	push	r0
    2d92:	cd b7       	in	r28, 0x3d	; 61
    2d94:	de b7       	in	r29, 0x3e	; 62
    2d96:	89 83       	std	Y+1, r24	; 0x01
	/* waiting for empty UDR flag */
	while(UCSRA_REG.Bits.UDRE_bit == 0);
    2d98:	eb e2       	ldi	r30, 0x2B	; 43
    2d9a:	f0 e0       	ldi	r31, 0x00	; 0
    2d9c:	80 81       	ld	r24, Z
    2d9e:	80 72       	andi	r24, 0x20	; 32
    2da0:	88 23       	and	r24, r24
    2da2:	d1 f3       	breq	.-12     	; 0x2d98 <UART_sendByte+0xc>

	UDR_REG.Byte = byte;	/* sending byte */
    2da4:	ec e2       	ldi	r30, 0x2C	; 44
    2da6:	f0 e0       	ldi	r31, 0x00	; 0
    2da8:	89 81       	ldd	r24, Y+1	; 0x01
    2daa:	80 83       	st	Z, r24
}
    2dac:	0f 90       	pop	r0
    2dae:	cf 91       	pop	r28
    2db0:	df 91       	pop	r29
    2db2:	08 95       	ret

00002db4 <UART_sendString>:

void UART_sendString(const uint8 *string)
{
    2db4:	df 93       	push	r29
    2db6:	cf 93       	push	r28
    2db8:	00 d0       	rcall	.+0      	; 0x2dba <UART_sendString+0x6>
    2dba:	0f 92       	push	r0
    2dbc:	cd b7       	in	r28, 0x3d	; 61
    2dbe:	de b7       	in	r29, 0x3e	; 62
    2dc0:	9b 83       	std	Y+3, r25	; 0x03
    2dc2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;	/* counter variable */
    2dc4:	19 82       	std	Y+1, r1	; 0x01
    2dc6:	0e c0       	rjmp	.+28     	; 0x2de4 <UART_sendString+0x30>

	while(string[i] != '\0')
	{
		UART_sendByte(string[i]);	/* sending byte */
    2dc8:	89 81       	ldd	r24, Y+1	; 0x01
    2dca:	28 2f       	mov	r18, r24
    2dcc:	30 e0       	ldi	r19, 0x00	; 0
    2dce:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd0:	9b 81       	ldd	r25, Y+3	; 0x03
    2dd2:	fc 01       	movw	r30, r24
    2dd4:	e2 0f       	add	r30, r18
    2dd6:	f3 1f       	adc	r31, r19
    2dd8:	80 81       	ld	r24, Z
    2dda:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <UART_sendByte>
		i++;	/* increamenting counter */
    2dde:	89 81       	ldd	r24, Y+1	; 0x01
    2de0:	8f 5f       	subi	r24, 0xFF	; 255
    2de2:	89 83       	std	Y+1, r24	; 0x01

void UART_sendString(const uint8 *string)
{
	uint8 i = 0;	/* counter variable */

	while(string[i] != '\0')
    2de4:	89 81       	ldd	r24, Y+1	; 0x01
    2de6:	28 2f       	mov	r18, r24
    2de8:	30 e0       	ldi	r19, 0x00	; 0
    2dea:	8a 81       	ldd	r24, Y+2	; 0x02
    2dec:	9b 81       	ldd	r25, Y+3	; 0x03
    2dee:	fc 01       	movw	r30, r24
    2df0:	e2 0f       	add	r30, r18
    2df2:	f3 1f       	adc	r31, r19
    2df4:	80 81       	ld	r24, Z
    2df6:	88 23       	and	r24, r24
    2df8:	39 f7       	brne	.-50     	; 0x2dc8 <UART_sendString+0x14>
	{
		UART_sendByte(string[i]);	/* sending byte */
		i++;	/* increamenting counter */
	}
}
    2dfa:	0f 90       	pop	r0
    2dfc:	0f 90       	pop	r0
    2dfe:	0f 90       	pop	r0
    2e00:	cf 91       	pop	r28
    2e02:	df 91       	pop	r29
    2e04:	08 95       	ret

00002e06 <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    2e06:	df 93       	push	r29
    2e08:	cf 93       	push	r28
    2e0a:	cd b7       	in	r28, 0x3d	; 61
    2e0c:	de b7       	in	r29, 0x3e	; 62
	/* waiting for recieving complete flag */
	while(UCSRA_REG.Bits.RXC_bit == 0);
    2e0e:	eb e2       	ldi	r30, 0x2B	; 43
    2e10:	f0 e0       	ldi	r31, 0x00	; 0
    2e12:	80 81       	ld	r24, Z
    2e14:	80 78       	andi	r24, 0x80	; 128
    2e16:	88 23       	and	r24, r24
    2e18:	d1 f3       	breq	.-12     	; 0x2e0e <UART_recieveByte+0x8>

	/* returning recieved byte */
	return UDR_REG.Byte;
    2e1a:	ec e2       	ldi	r30, 0x2C	; 44
    2e1c:	f0 e0       	ldi	r31, 0x00	; 0
    2e1e:	80 81       	ld	r24, Z
}
    2e20:	cf 91       	pop	r28
    2e22:	df 91       	pop	r29
    2e24:	08 95       	ret

00002e26 <UART_recieveString>:

void UART_recieveString(uint8 *string)
{
    2e26:	0f 93       	push	r16
    2e28:	1f 93       	push	r17
    2e2a:	df 93       	push	r29
    2e2c:	cf 93       	push	r28
    2e2e:	00 d0       	rcall	.+0      	; 0x2e30 <UART_recieveString+0xa>
    2e30:	0f 92       	push	r0
    2e32:	cd b7       	in	r28, 0x3d	; 61
    2e34:	de b7       	in	r29, 0x3e	; 62
    2e36:	9b 83       	std	Y+3, r25	; 0x03
    2e38:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;	/* counter variable */
    2e3a:	19 82       	std	Y+1, r1	; 0x01

	string[i] = UART_recieveByte();
    2e3c:	89 81       	ldd	r24, Y+1	; 0x01
    2e3e:	28 2f       	mov	r18, r24
    2e40:	30 e0       	ldi	r19, 0x00	; 0
    2e42:	8a 81       	ldd	r24, Y+2	; 0x02
    2e44:	9b 81       	ldd	r25, Y+3	; 0x03
    2e46:	8c 01       	movw	r16, r24
    2e48:	02 0f       	add	r16, r18
    2e4a:	13 1f       	adc	r17, r19
    2e4c:	0e 94 03 17 	call	0x2e06	; 0x2e06 <UART_recieveByte>
    2e50:	f8 01       	movw	r30, r16
    2e52:	80 83       	st	Z, r24
    2e54:	0f c0       	rjmp	.+30     	; 0x2e74 <UART_recieveString+0x4e>

	while(string[i] != UART_SYMBOL_OF_STRING)
	{
		i++;
    2e56:	89 81       	ldd	r24, Y+1	; 0x01
    2e58:	8f 5f       	subi	r24, 0xFF	; 255
    2e5a:	89 83       	std	Y+1, r24	; 0x01

		/* recieving string character by character */
		string[i] = UART_recieveByte();
    2e5c:	89 81       	ldd	r24, Y+1	; 0x01
    2e5e:	28 2f       	mov	r18, r24
    2e60:	30 e0       	ldi	r19, 0x00	; 0
    2e62:	8a 81       	ldd	r24, Y+2	; 0x02
    2e64:	9b 81       	ldd	r25, Y+3	; 0x03
    2e66:	8c 01       	movw	r16, r24
    2e68:	02 0f       	add	r16, r18
    2e6a:	13 1f       	adc	r17, r19
    2e6c:	0e 94 03 17 	call	0x2e06	; 0x2e06 <UART_recieveByte>
    2e70:	f8 01       	movw	r30, r16
    2e72:	80 83       	st	Z, r24
{
	uint8 i = 0;	/* counter variable */

	string[i] = UART_recieveByte();

	while(string[i] != UART_SYMBOL_OF_STRING)
    2e74:	89 81       	ldd	r24, Y+1	; 0x01
    2e76:	28 2f       	mov	r18, r24
    2e78:	30 e0       	ldi	r19, 0x00	; 0
    2e7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e7c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e7e:	fc 01       	movw	r30, r24
    2e80:	e2 0f       	add	r30, r18
    2e82:	f3 1f       	adc	r31, r19
    2e84:	80 81       	ld	r24, Z
    2e86:	83 32       	cpi	r24, 0x23	; 35
    2e88:	31 f7       	brne	.-52     	; 0x2e56 <UART_recieveString+0x30>

		/* recieving string character by character */
		string[i] = UART_recieveByte();
	}

	string[i] = '\0'; /* replacing end character symbol by null */
    2e8a:	89 81       	ldd	r24, Y+1	; 0x01
    2e8c:	28 2f       	mov	r18, r24
    2e8e:	30 e0       	ldi	r19, 0x00	; 0
    2e90:	8a 81       	ldd	r24, Y+2	; 0x02
    2e92:	9b 81       	ldd	r25, Y+3	; 0x03
    2e94:	fc 01       	movw	r30, r24
    2e96:	e2 0f       	add	r30, r18
    2e98:	f3 1f       	adc	r31, r19
    2e9a:	10 82       	st	Z, r1
}
    2e9c:	0f 90       	pop	r0
    2e9e:	0f 90       	pop	r0
    2ea0:	0f 90       	pop	r0
    2ea2:	cf 91       	pop	r28
    2ea4:	df 91       	pop	r29
    2ea6:	1f 91       	pop	r17
    2ea8:	0f 91       	pop	r16
    2eaa:	08 95       	ret

00002eac <__udivmodqi4>:
    2eac:	99 1b       	sub	r25, r25
    2eae:	79 e0       	ldi	r23, 0x09	; 9
    2eb0:	04 c0       	rjmp	.+8      	; 0x2eba <__udivmodqi4_ep>

00002eb2 <__udivmodqi4_loop>:
    2eb2:	99 1f       	adc	r25, r25
    2eb4:	96 17       	cp	r25, r22
    2eb6:	08 f0       	brcs	.+2      	; 0x2eba <__udivmodqi4_ep>
    2eb8:	96 1b       	sub	r25, r22

00002eba <__udivmodqi4_ep>:
    2eba:	88 1f       	adc	r24, r24
    2ebc:	7a 95       	dec	r23
    2ebe:	c9 f7       	brne	.-14     	; 0x2eb2 <__udivmodqi4_loop>
    2ec0:	80 95       	com	r24
    2ec2:	08 95       	ret

00002ec4 <__udivmodsi4>:
    2ec4:	a1 e2       	ldi	r26, 0x21	; 33
    2ec6:	1a 2e       	mov	r1, r26
    2ec8:	aa 1b       	sub	r26, r26
    2eca:	bb 1b       	sub	r27, r27
    2ecc:	fd 01       	movw	r30, r26
    2ece:	0d c0       	rjmp	.+26     	; 0x2eea <__udivmodsi4_ep>

00002ed0 <__udivmodsi4_loop>:
    2ed0:	aa 1f       	adc	r26, r26
    2ed2:	bb 1f       	adc	r27, r27
    2ed4:	ee 1f       	adc	r30, r30
    2ed6:	ff 1f       	adc	r31, r31
    2ed8:	a2 17       	cp	r26, r18
    2eda:	b3 07       	cpc	r27, r19
    2edc:	e4 07       	cpc	r30, r20
    2ede:	f5 07       	cpc	r31, r21
    2ee0:	20 f0       	brcs	.+8      	; 0x2eea <__udivmodsi4_ep>
    2ee2:	a2 1b       	sub	r26, r18
    2ee4:	b3 0b       	sbc	r27, r19
    2ee6:	e4 0b       	sbc	r30, r20
    2ee8:	f5 0b       	sbc	r31, r21

00002eea <__udivmodsi4_ep>:
    2eea:	66 1f       	adc	r22, r22
    2eec:	77 1f       	adc	r23, r23
    2eee:	88 1f       	adc	r24, r24
    2ef0:	99 1f       	adc	r25, r25
    2ef2:	1a 94       	dec	r1
    2ef4:	69 f7       	brne	.-38     	; 0x2ed0 <__udivmodsi4_loop>
    2ef6:	60 95       	com	r22
    2ef8:	70 95       	com	r23
    2efa:	80 95       	com	r24
    2efc:	90 95       	com	r25
    2efe:	9b 01       	movw	r18, r22
    2f00:	ac 01       	movw	r20, r24
    2f02:	bd 01       	movw	r22, r26
    2f04:	cf 01       	movw	r24, r30
    2f06:	08 95       	ret

00002f08 <__prologue_saves__>:
    2f08:	2f 92       	push	r2
    2f0a:	3f 92       	push	r3
    2f0c:	4f 92       	push	r4
    2f0e:	5f 92       	push	r5
    2f10:	6f 92       	push	r6
    2f12:	7f 92       	push	r7
    2f14:	8f 92       	push	r8
    2f16:	9f 92       	push	r9
    2f18:	af 92       	push	r10
    2f1a:	bf 92       	push	r11
    2f1c:	cf 92       	push	r12
    2f1e:	df 92       	push	r13
    2f20:	ef 92       	push	r14
    2f22:	ff 92       	push	r15
    2f24:	0f 93       	push	r16
    2f26:	1f 93       	push	r17
    2f28:	cf 93       	push	r28
    2f2a:	df 93       	push	r29
    2f2c:	cd b7       	in	r28, 0x3d	; 61
    2f2e:	de b7       	in	r29, 0x3e	; 62
    2f30:	ca 1b       	sub	r28, r26
    2f32:	db 0b       	sbc	r29, r27
    2f34:	0f b6       	in	r0, 0x3f	; 63
    2f36:	f8 94       	cli
    2f38:	de bf       	out	0x3e, r29	; 62
    2f3a:	0f be       	out	0x3f, r0	; 63
    2f3c:	cd bf       	out	0x3d, r28	; 61
    2f3e:	09 94       	ijmp

00002f40 <__epilogue_restores__>:
    2f40:	2a 88       	ldd	r2, Y+18	; 0x12
    2f42:	39 88       	ldd	r3, Y+17	; 0x11
    2f44:	48 88       	ldd	r4, Y+16	; 0x10
    2f46:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f48:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f4a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f4c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f4e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f50:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f52:	b9 84       	ldd	r11, Y+9	; 0x09
    2f54:	c8 84       	ldd	r12, Y+8	; 0x08
    2f56:	df 80       	ldd	r13, Y+7	; 0x07
    2f58:	ee 80       	ldd	r14, Y+6	; 0x06
    2f5a:	fd 80       	ldd	r15, Y+5	; 0x05
    2f5c:	0c 81       	ldd	r16, Y+4	; 0x04
    2f5e:	1b 81       	ldd	r17, Y+3	; 0x03
    2f60:	aa 81       	ldd	r26, Y+2	; 0x02
    2f62:	b9 81       	ldd	r27, Y+1	; 0x01
    2f64:	ce 0f       	add	r28, r30
    2f66:	d1 1d       	adc	r29, r1
    2f68:	0f b6       	in	r0, 0x3f	; 63
    2f6a:	f8 94       	cli
    2f6c:	de bf       	out	0x3e, r29	; 62
    2f6e:	0f be       	out	0x3f, r0	; 63
    2f70:	cd bf       	out	0x3d, r28	; 61
    2f72:	ed 01       	movw	r28, r26
    2f74:	08 95       	ret

00002f76 <_exit>:
    2f76:	f8 94       	cli

00002f78 <__stop_program>:
    2f78:	ff cf       	rjmp	.-2      	; 0x2f78 <__stop_program>
