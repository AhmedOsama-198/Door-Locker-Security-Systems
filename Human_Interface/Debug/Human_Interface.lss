
Human_Interface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003904  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a6  00800060  00003904  00003998  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800106  00800106  00003a3e  2**0
                  ALLOC
  3 .stab         00003180  00000000  00000000  00003a40  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000305e  00000000  00000000  00006bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00009c1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00009d5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00009ece  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000bb17  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ca02  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000d7b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000d910  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000db9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e36b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 7d 1a 	jmp	0x34fa	; 0x34fa <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 4a 1a 	jmp	0x3494	; 0x3494 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e0       	ldi	r30, 0x04	; 4
      68:	f9 e3       	ldi	r31, 0x39	; 57
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 30       	cpi	r26, 0x06	; 6
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e0       	ldi	r26, 0x06	; 6
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 30       	cpi	r26, 0x0B	; 11
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 80 1c 	jmp	0x3900	; 0x3900 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 04 1c 	jmp	0x3808	; 0x3808 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae ed       	ldi	r26, 0xDE	; 222
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 20 1c 	jmp	0x3840	; 0x3840 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 10 1c 	jmp	0x3820	; 0x3820 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2c 1c 	jmp	0x3858	; 0x3858 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 10 1c 	jmp	0x3820	; 0x3820 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2c 1c 	jmp	0x3858	; 0x3858 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 04 1c 	jmp	0x3808	; 0x3808 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e ed       	ldi	r24, 0xDE	; 222
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 20 1c 	jmp	0x3840	; 0x3840 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 10 1c 	jmp	0x3820	; 0x3820 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 2c 1c 	jmp	0x3858	; 0x3858 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 10 1c 	jmp	0x3820	; 0x3820 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 2c 1c 	jmp	0x3858	; 0x3858 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 10 1c 	jmp	0x3820	; 0x3820 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 2c 1c 	jmp	0x3858	; 0x3858 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 14 1c 	jmp	0x3828	; 0x3828 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 30 1c 	jmp	0x3860	; 0x3860 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:

/*******************************************************************************
 *                                Main Funciton                                *
 *******************************************************************************/
int main()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	e4 97       	sbiw	r28, 0x34	; 52
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	 */
	APPLICATION_STATE state;

	uint8 key;

	UART_CONFIG_TYPE uartConfig = {DISABLE_PARITY, _1BIT, _8BIT, 9600};
     b5a:	9e 01       	movw	r18, r28
     b5c:	2f 5e       	subi	r18, 0xEF	; 239
     b5e:	3f 4f       	sbci	r19, 0xFF	; 255
     b60:	3f a3       	std	Y+39, r19	; 0x27
     b62:	2e a3       	std	Y+38, r18	; 0x26
     b64:	82 ef       	ldi	r24, 0xF2	; 242
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	99 a7       	std	Y+41, r25	; 0x29
     b6a:	88 a7       	std	Y+40, r24	; 0x28
     b6c:	97 e0       	ldi	r25, 0x07	; 7
     b6e:	9a a7       	std	Y+42, r25	; 0x2a
     b70:	e8 a5       	ldd	r30, Y+40	; 0x28
     b72:	f9 a5       	ldd	r31, Y+41	; 0x29
     b74:	00 80       	ld	r0, Z
     b76:	28 a5       	ldd	r18, Y+40	; 0x28
     b78:	39 a5       	ldd	r19, Y+41	; 0x29
     b7a:	2f 5f       	subi	r18, 0xFF	; 255
     b7c:	3f 4f       	sbci	r19, 0xFF	; 255
     b7e:	39 a7       	std	Y+41, r19	; 0x29
     b80:	28 a7       	std	Y+40, r18	; 0x28
     b82:	ee a1       	ldd	r30, Y+38	; 0x26
     b84:	ff a1       	ldd	r31, Y+39	; 0x27
     b86:	00 82       	st	Z, r0
     b88:	2e a1       	ldd	r18, Y+38	; 0x26
     b8a:	3f a1       	ldd	r19, Y+39	; 0x27
     b8c:	2f 5f       	subi	r18, 0xFF	; 255
     b8e:	3f 4f       	sbci	r19, 0xFF	; 255
     b90:	3f a3       	std	Y+39, r19	; 0x27
     b92:	2e a3       	std	Y+38, r18	; 0x26
     b94:	3a a5       	ldd	r19, Y+42	; 0x2a
     b96:	31 50       	subi	r19, 0x01	; 1
     b98:	3a a7       	std	Y+42, r19	; 0x2a
     b9a:	8a a5       	ldd	r24, Y+42	; 0x2a
     b9c:	88 23       	and	r24, r24
     b9e:	41 f7       	brne	.-48     	; 0xb70 <main+0x2a>

	/* initializing UART with certain configurations*/
	UART_init(&uartConfig);
     ba0:	ce 01       	movw	r24, r28
     ba2:	41 96       	adiw	r24, 0x11	; 17
     ba4:	0e 94 b0 1a 	call	0x3560	; 0x3560 <UART_init>

	/* initializing LCD */
	LCD_init();
     ba8:	0e 94 76 14 	call	0x28ec	; 0x28ec <LCD_init>

	/* enabling Global interrupt mask bit */
	SREG_REG.Bits.I_Bit = 1;
     bac:	ef e5       	ldi	r30, 0x5F	; 95
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	80 81       	ld	r24, Z
     bb2:	80 68       	ori	r24, 0x80	; 128
     bb4:	80 83       	st	Z, r24

	while(1)
	{
		/* ECU1 waits for ECU2 to ask it then respond
		 * then receive the state of application */
		while(UART_recieveByte() != MC2_ASK);
     bb6:	0e 94 8f 1b 	call	0x371e	; 0x371e <UART_recieveByte>
     bba:	81 30       	cpi	r24, 0x01	; 1
     bbc:	e1 f7       	brne	.-8      	; 0xbb6 <main+0x70>
		UART_sendByte(MC1_READY);
     bbe:	82 e0       	ldi	r24, 0x02	; 2
     bc0:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <UART_sendByte>
		state = UART_recieveByte();
     bc4:	0e 94 8f 1b 	call	0x371e	; 0x371e <UART_recieveByte>
     bc8:	88 8b       	std	Y+16, r24	; 0x10

		switch(state)
     bca:	88 89       	ldd	r24, Y+16	; 0x10
     bcc:	e8 2f       	mov	r30, r24
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	fd a3       	std	Y+37, r31	; 0x25
     bd2:	ec a3       	std	Y+36, r30	; 0x24
     bd4:	2c a1       	ldd	r18, Y+36	; 0x24
     bd6:	3d a1       	ldd	r19, Y+37	; 0x25
     bd8:	22 30       	cpi	r18, 0x02	; 2
     bda:	31 05       	cpc	r19, r1
     bdc:	09 f4       	brne	.+2      	; 0xbe0 <main+0x9a>
     bde:	bd c0       	rjmp	.+378    	; 0xd5a <main+0x214>
     be0:	8c a1       	ldd	r24, Y+36	; 0x24
     be2:	9d a1       	ldd	r25, Y+37	; 0x25
     be4:	83 30       	cpi	r24, 0x03	; 3
     be6:	91 05       	cpc	r25, r1
     be8:	54 f4       	brge	.+20     	; 0xbfe <main+0xb8>
     bea:	ec a1       	ldd	r30, Y+36	; 0x24
     bec:	fd a1       	ldd	r31, Y+37	; 0x25
     bee:	30 97       	sbiw	r30, 0x00	; 0
     bf0:	c9 f0       	breq	.+50     	; 0xc24 <main+0xde>
     bf2:	2c a1       	ldd	r18, Y+36	; 0x24
     bf4:	3d a1       	ldd	r19, Y+37	; 0x25
     bf6:	21 30       	cpi	r18, 0x01	; 1
     bf8:	31 05       	cpc	r19, r1
     bfa:	c9 f0       	breq	.+50     	; 0xc2e <main+0xe8>
     bfc:	dc cf       	rjmp	.-72     	; 0xbb6 <main+0x70>
     bfe:	8c a1       	ldd	r24, Y+36	; 0x24
     c00:	9d a1       	ldd	r25, Y+37	; 0x25
     c02:	84 30       	cpi	r24, 0x04	; 4
     c04:	91 05       	cpc	r25, r1
     c06:	09 f4       	brne	.+2      	; 0xc0a <main+0xc4>
     c08:	b2 c0       	rjmp	.+356    	; 0xd6e <main+0x228>
     c0a:	ec a1       	ldd	r30, Y+36	; 0x24
     c0c:	fd a1       	ldd	r31, Y+37	; 0x25
     c0e:	e4 30       	cpi	r30, 0x04	; 4
     c10:	f1 05       	cpc	r31, r1
     c12:	0c f4       	brge	.+2      	; 0xc16 <main+0xd0>
     c14:	a7 c0       	rjmp	.+334    	; 0xd64 <main+0x21e>
     c16:	2c a1       	ldd	r18, Y+36	; 0x24
     c18:	3d a1       	ldd	r19, Y+37	; 0x25
     c1a:	25 30       	cpi	r18, 0x05	; 5
     c1c:	31 05       	cpc	r19, r1
     c1e:	09 f4       	brne	.+2      	; 0xc22 <main+0xdc>
     c20:	da c0       	rjmp	.+436    	; 0xdd6 <main+0x290>
     c22:	c9 cf       	rjmp	.-110    	; 0xbb6 <main+0x70>
		{
		case CREATE_PASS:

			createPass();
     c24:	0e 94 9f 08 	call	0x113e	; 0x113e <createPass>
			state = WAITING;	/* changing state to waiting state */
     c28:	86 e0       	ldi	r24, 0x06	; 6
     c2a:	88 8b       	std	Y+16, r24	; 0x10
     c2c:	c4 cf       	rjmp	.-120    	; 0xbb6 <main+0x70>
			break;

		case MAIN_SCREEN:
		{
			LCD_clearScreen();
     c2e:	0e 94 74 19 	call	0x32e8	; 0x32e8 <LCD_clearScreen>
			LCD_displayString((uint8*)"+:Open Door");
     c32:	80 e6       	ldi	r24, 0x60	; 96
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <LCD_displayString>
			LCD_displayStringRowColumn(1,0,(uint8*)"-:Change Password");
     c3a:	2c e6       	ldi	r18, 0x6C	; 108
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	60 e0       	ldi	r22, 0x00	; 0
     c42:	a9 01       	movw	r20, r18
     c44:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <LCD_displayStringRowColumn>

			while(1)
			{
				/* loop until user press one of the two options */
				key = KEYPAD_getPressedKey();
     c48:	0e 94 92 13 	call	0x2724	; 0x2724 <KEYPAD_getPressedKey>
     c4c:	8f 87       	std	Y+15, r24	; 0x0f
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	aa ef       	ldi	r26, 0xFA	; 250
     c54:	b3 e4       	ldi	r27, 0x43	; 67
     c56:	8b 87       	std	Y+11, r24	; 0x0b
     c58:	9c 87       	std	Y+12, r25	; 0x0c
     c5a:	ad 87       	std	Y+13, r26	; 0x0d
     c5c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c5e:	6b 85       	ldd	r22, Y+11	; 0x0b
     c60:	7c 85       	ldd	r23, Y+12	; 0x0c
     c62:	8d 85       	ldd	r24, Y+13	; 0x0d
     c64:	9e 85       	ldd	r25, Y+14	; 0x0e
     c66:	20 e0       	ldi	r18, 0x00	; 0
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	4a ef       	ldi	r20, 0xFA	; 250
     c6c:	54 e4       	ldi	r21, 0x44	; 68
     c6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c72:	dc 01       	movw	r26, r24
     c74:	cb 01       	movw	r24, r22
     c76:	8f 83       	std	Y+7, r24	; 0x07
     c78:	98 87       	std	Y+8, r25	; 0x08
     c7a:	a9 87       	std	Y+9, r26	; 0x09
     c7c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c7e:	6f 81       	ldd	r22, Y+7	; 0x07
     c80:	78 85       	ldd	r23, Y+8	; 0x08
     c82:	89 85       	ldd	r24, Y+9	; 0x09
     c84:	9a 85       	ldd	r25, Y+10	; 0x0a
     c86:	20 e0       	ldi	r18, 0x00	; 0
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	40 e8       	ldi	r20, 0x80	; 128
     c8c:	5f e3       	ldi	r21, 0x3F	; 63
     c8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c92:	88 23       	and	r24, r24
     c94:	2c f4       	brge	.+10     	; 0xca0 <main+0x15a>
		__ticks = 1;
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	9e 83       	std	Y+6, r25	; 0x06
     c9c:	8d 83       	std	Y+5, r24	; 0x05
     c9e:	3f c0       	rjmp	.+126    	; 0xd1e <main+0x1d8>
	else if (__tmp > 65535)
     ca0:	6f 81       	ldd	r22, Y+7	; 0x07
     ca2:	78 85       	ldd	r23, Y+8	; 0x08
     ca4:	89 85       	ldd	r24, Y+9	; 0x09
     ca6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ca8:	20 e0       	ldi	r18, 0x00	; 0
     caa:	3f ef       	ldi	r19, 0xFF	; 255
     cac:	4f e7       	ldi	r20, 0x7F	; 127
     cae:	57 e4       	ldi	r21, 0x47	; 71
     cb0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cb4:	18 16       	cp	r1, r24
     cb6:	4c f5       	brge	.+82     	; 0xd0a <main+0x1c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cb8:	6b 85       	ldd	r22, Y+11	; 0x0b
     cba:	7c 85       	ldd	r23, Y+12	; 0x0c
     cbc:	8d 85       	ldd	r24, Y+13	; 0x0d
     cbe:	9e 85       	ldd	r25, Y+14	; 0x0e
     cc0:	20 e0       	ldi	r18, 0x00	; 0
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	40 e2       	ldi	r20, 0x20	; 32
     cc6:	51 e4       	ldi	r21, 0x41	; 65
     cc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ccc:	dc 01       	movw	r26, r24
     cce:	cb 01       	movw	r24, r22
     cd0:	bc 01       	movw	r22, r24
     cd2:	cd 01       	movw	r24, r26
     cd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cd8:	dc 01       	movw	r26, r24
     cda:	cb 01       	movw	r24, r22
     cdc:	9e 83       	std	Y+6, r25	; 0x06
     cde:	8d 83       	std	Y+5, r24	; 0x05
     ce0:	0f c0       	rjmp	.+30     	; 0xd00 <main+0x1ba>
     ce2:	88 ec       	ldi	r24, 0xC8	; 200
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	9c 83       	std	Y+4, r25	; 0x04
     ce8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cea:	8b 81       	ldd	r24, Y+3	; 0x03
     cec:	9c 81       	ldd	r25, Y+4	; 0x04
     cee:	01 97       	sbiw	r24, 0x01	; 1
     cf0:	f1 f7       	brne	.-4      	; 0xcee <main+0x1a8>
     cf2:	9c 83       	std	Y+4, r25	; 0x04
     cf4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cf6:	8d 81       	ldd	r24, Y+5	; 0x05
     cf8:	9e 81       	ldd	r25, Y+6	; 0x06
     cfa:	01 97       	sbiw	r24, 0x01	; 1
     cfc:	9e 83       	std	Y+6, r25	; 0x06
     cfe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d00:	8d 81       	ldd	r24, Y+5	; 0x05
     d02:	9e 81       	ldd	r25, Y+6	; 0x06
     d04:	00 97       	sbiw	r24, 0x00	; 0
     d06:	69 f7       	brne	.-38     	; 0xce2 <main+0x19c>
     d08:	14 c0       	rjmp	.+40     	; 0xd32 <main+0x1ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d0a:	6f 81       	ldd	r22, Y+7	; 0x07
     d0c:	78 85       	ldd	r23, Y+8	; 0x08
     d0e:	89 85       	ldd	r24, Y+9	; 0x09
     d10:	9a 85       	ldd	r25, Y+10	; 0x0a
     d12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d16:	dc 01       	movw	r26, r24
     d18:	cb 01       	movw	r24, r22
     d1a:	9e 83       	std	Y+6, r25	; 0x06
     d1c:	8d 83       	std	Y+5, r24	; 0x05
     d1e:	8d 81       	ldd	r24, Y+5	; 0x05
     d20:	9e 81       	ldd	r25, Y+6	; 0x06
     d22:	9a 83       	std	Y+2, r25	; 0x02
     d24:	89 83       	std	Y+1, r24	; 0x01
     d26:	89 81       	ldd	r24, Y+1	; 0x01
     d28:	9a 81       	ldd	r25, Y+2	; 0x02
     d2a:	01 97       	sbiw	r24, 0x01	; 1
     d2c:	f1 f7       	brne	.-4      	; 0xd2a <main+0x1e4>
     d2e:	9a 83       	std	Y+2, r25	; 0x02
     d30:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(500);	/* delay for keypad */

				if(key == '+' || key == '-')
     d32:	8f 85       	ldd	r24, Y+15	; 0x0f
     d34:	8b 32       	cpi	r24, 0x2B	; 43
     d36:	21 f0       	breq	.+8      	; 0xd40 <main+0x1fa>
     d38:	8f 85       	ldd	r24, Y+15	; 0x0f
     d3a:	8d 32       	cpi	r24, 0x2D	; 45
     d3c:	09 f0       	breq	.+2      	; 0xd40 <main+0x1fa>
     d3e:	84 cf       	rjmp	.-248    	; 0xc48 <main+0x102>
					break;
			}
			/* ECU1 asks ECU2 and waits for its
			 * response then sends the pressed key*/
			UART_sendByte(MC1_ASK);
     d40:	83 e0       	ldi	r24, 0x03	; 3
     d42:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <UART_sendByte>
			while(UART_recieveByte() != MC2_READY);
     d46:	0e 94 8f 1b 	call	0x371e	; 0x371e <UART_recieveByte>
     d4a:	84 30       	cpi	r24, 0x04	; 4
     d4c:	e1 f7       	brne	.-8      	; 0xd46 <main+0x200>
			UART_sendByte(key);
     d4e:	8f 85       	ldd	r24, Y+15	; 0x0f
     d50:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <UART_sendByte>
		}
		state = WAITING;	/* changing state to waiting state */
     d54:	86 e0       	ldi	r24, 0x06	; 6
     d56:	88 8b       	std	Y+16, r24	; 0x10
     d58:	2e cf       	rjmp	.-420    	; 0xbb6 <main+0x70>
		break;

		case OPEN_DOOR:
		{
			sendPass();
     d5a:	0e 94 d6 07 	call	0xfac	; 0xfac <sendPass>
		}
		state = WAITING;	/* changing state to waiting state */
     d5e:	86 e0       	ldi	r24, 0x06	; 6
     d60:	88 8b       	std	Y+16, r24	; 0x10
     d62:	29 cf       	rjmp	.-430    	; 0xbb6 <main+0x70>
		break;

		case CHANGE_PASS:
		{
			sendPass();
     d64:	0e 94 d6 07 	call	0xfac	; 0xfac <sendPass>
		}
		state = WAITING;	/* changing state to waiting state */
     d68:	86 e0       	ldi	r24, 0x06	; 6
     d6a:	88 8b       	std	Y+16, r24	; 0x10
     d6c:	24 cf       	rjmp	.-440    	; 0xbb6 <main+0x70>

		case DOOR_UNLOCKING:
		{
			/* setting a freeze flag to hold application
			 * while door is opening and closing */
			freezeFlag = 1;
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	80 93 06 01 	sts	0x0106, r24

			Timer1_ConfigType timer1Config = {0, 10, F_CPU_1024, TIMER1_COMPARE};
     d74:	ce 01       	movw	r24, r28
     d76:	48 96       	adiw	r24, 0x18	; 24
     d78:	9c a7       	std	Y+44, r25	; 0x2c
     d7a:	8b a7       	std	Y+43, r24	; 0x2b
     d7c:	ec ee       	ldi	r30, 0xEC	; 236
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	fe a7       	std	Y+46, r31	; 0x2e
     d82:	ed a7       	std	Y+45, r30	; 0x2d
     d84:	f6 e0       	ldi	r31, 0x06	; 6
     d86:	ff a7       	std	Y+47, r31	; 0x2f
     d88:	ed a5       	ldd	r30, Y+45	; 0x2d
     d8a:	fe a5       	ldd	r31, Y+46	; 0x2e
     d8c:	00 80       	ld	r0, Z
     d8e:	2d a5       	ldd	r18, Y+45	; 0x2d
     d90:	3e a5       	ldd	r19, Y+46	; 0x2e
     d92:	2f 5f       	subi	r18, 0xFF	; 255
     d94:	3f 4f       	sbci	r19, 0xFF	; 255
     d96:	3e a7       	std	Y+46, r19	; 0x2e
     d98:	2d a7       	std	Y+45, r18	; 0x2d
     d9a:	eb a5       	ldd	r30, Y+43	; 0x2b
     d9c:	fc a5       	ldd	r31, Y+44	; 0x2c
     d9e:	00 82       	st	Z, r0
     da0:	2b a5       	ldd	r18, Y+43	; 0x2b
     da2:	3c a5       	ldd	r19, Y+44	; 0x2c
     da4:	2f 5f       	subi	r18, 0xFF	; 255
     da6:	3f 4f       	sbci	r19, 0xFF	; 255
     da8:	3c a7       	std	Y+44, r19	; 0x2c
     daa:	2b a7       	std	Y+43, r18	; 0x2b
     dac:	3f a5       	ldd	r19, Y+47	; 0x2f
     dae:	31 50       	subi	r19, 0x01	; 1
     db0:	3f a7       	std	Y+47, r19	; 0x2f
     db2:	8f a5       	ldd	r24, Y+47	; 0x2f
     db4:	88 23       	and	r24, r24
     db6:	41 f7       	brne	.-48     	; 0xd88 <main+0x242>
			TIMER1_setCallBack(openDoorCallBackFunction);
     db8:	8f e1       	ldi	r24, 0x1F	; 31
     dba:	97 e0       	ldi	r25, 0x07	; 7
     dbc:	0e 94 38 1a 	call	0x3470	; 0x3470 <TIMER1_setCallBack>

			/* initializing time with specific configurations */
			TIMER1_init(&timer1Config);
     dc0:	ce 01       	movw	r24, r28
     dc2:	48 96       	adiw	r24, 0x18	; 24
     dc4:	0e 94 a3 19 	call	0x3346	; 0x3346 <TIMER1_init>

			/* loop until door activity is complete */
			while(freezeFlag == 1);
     dc8:	80 91 06 01 	lds	r24, 0x0106
     dcc:	81 30       	cpi	r24, 0x01	; 1
     dce:	e1 f3       	breq	.-8      	; 0xdc8 <main+0x282>
		}
		state = WAITING;	/* changing state to waiting state */
     dd0:	86 e0       	ldi	r24, 0x06	; 6
     dd2:	88 8b       	std	Y+16, r24	; 0x10
     dd4:	f0 ce       	rjmp	.-544    	; 0xbb6 <main+0x70>

		case ALARM:
		{
			/* setting a freeze flag to hold application
			 * while alarm is on */
			freezeFlag = 1;
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	80 93 06 01 	sts	0x0106, r24
			Timer1_ConfigType timer1Config = {65525, 0, F_CPU_1024, TIMER1_OVERFLOW};
     ddc:	fe 01       	movw	r30, r28
     dde:	7e 96       	adiw	r30, 0x1e	; 30
     de0:	f9 ab       	std	Y+49, r31	; 0x31
     de2:	e8 ab       	std	Y+48, r30	; 0x30
     de4:	26 ee       	ldi	r18, 0xE6	; 230
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	3b ab       	std	Y+51, r19	; 0x33
     dea:	2a ab       	std	Y+50, r18	; 0x32
     dec:	36 e0       	ldi	r19, 0x06	; 6
     dee:	3c ab       	std	Y+52, r19	; 0x34
     df0:	ea a9       	ldd	r30, Y+50	; 0x32
     df2:	fb a9       	ldd	r31, Y+51	; 0x33
     df4:	00 80       	ld	r0, Z
     df6:	2a a9       	ldd	r18, Y+50	; 0x32
     df8:	3b a9       	ldd	r19, Y+51	; 0x33
     dfa:	2f 5f       	subi	r18, 0xFF	; 255
     dfc:	3f 4f       	sbci	r19, 0xFF	; 255
     dfe:	3b ab       	std	Y+51, r19	; 0x33
     e00:	2a ab       	std	Y+50, r18	; 0x32
     e02:	e8 a9       	ldd	r30, Y+48	; 0x30
     e04:	f9 a9       	ldd	r31, Y+49	; 0x31
     e06:	00 82       	st	Z, r0
     e08:	28 a9       	ldd	r18, Y+48	; 0x30
     e0a:	39 a9       	ldd	r19, Y+49	; 0x31
     e0c:	2f 5f       	subi	r18, 0xFF	; 255
     e0e:	3f 4f       	sbci	r19, 0xFF	; 255
     e10:	39 ab       	std	Y+49, r19	; 0x31
     e12:	28 ab       	std	Y+48, r18	; 0x30
     e14:	3c a9       	ldd	r19, Y+52	; 0x34
     e16:	31 50       	subi	r19, 0x01	; 1
     e18:	3c ab       	std	Y+52, r19	; 0x34
     e1a:	8c a9       	ldd	r24, Y+52	; 0x34
     e1c:	88 23       	and	r24, r24
     e1e:	41 f7       	brne	.-48     	; 0xdf0 <main+0x2aa>
			TIMER1_setCallBack(alarmCallBackFunction);
     e20:	86 e8       	ldi	r24, 0x86	; 134
     e22:	97 e0       	ldi	r25, 0x07	; 7
     e24:	0e 94 38 1a 	call	0x3470	; 0x3470 <TIMER1_setCallBack>

			/* initializing time with specific configurations */
			TIMER1_init(&timer1Config);
     e28:	ce 01       	movw	r24, r28
     e2a:	4e 96       	adiw	r24, 0x1e	; 30
     e2c:	0e 94 a3 19 	call	0x3346	; 0x3346 <TIMER1_init>

			/* setting state of application to the main state */
			while(freezeFlag == 1);
     e30:	80 91 06 01 	lds	r24, 0x0106
     e34:	81 30       	cpi	r24, 0x01	; 1
     e36:	e1 f3       	breq	.-8      	; 0xe30 <main+0x2ea>
		}
		state = WAITING;	/* changing state to waiting state */
     e38:	86 e0       	ldi	r24, 0x06	; 6
     e3a:	88 8b       	std	Y+16, r24	; 0x10
     e3c:	bc ce       	rjmp	.-648    	; 0xbb6 <main+0x70>

00000e3e <openDoorCallBackFunction>:
 *                             Functions Definitions                           *
 *******************************************************************************/


void openDoorCallBackFunction(void)
{
     e3e:	df 93       	push	r29
     e40:	cf 93       	push	r28
     e42:	cd b7       	in	r28, 0x3d	; 61
     e44:	de b7       	in	r29, 0x3e	; 62
     e46:	2b 97       	sbiw	r28, 0x0b	; 11
     e48:	0f b6       	in	r0, 0x3f	; 63
     e4a:	f8 94       	cli
     e4c:	de bf       	out	0x3e, r29	; 62
     e4e:	0f be       	out	0x3f, r0	; 63
     e50:	cd bf       	out	0x3d, r28	; 61
	static uint8 tick = 0;
	tick++;		/* Increment interrupt counter */
     e52:	80 91 07 01 	lds	r24, 0x0107
     e56:	8f 5f       	subi	r24, 0xFF	; 255
     e58:	80 93 07 01 	sts	0x0107, r24

	if(tick == 1)
     e5c:	80 91 07 01 	lds	r24, 0x0107
     e60:	81 30       	cpi	r24, 0x01	; 1
     e62:	59 f5       	brne	.+86     	; 0xeba <openDoorCallBackFunction+0x7c>
	{
		/* configuring timer with compare mood to
		 * generate an interrupt request every 3 seconds */
		Timer1_ConfigType timer1Config = {0, 23438, F_CPU_1024, TIMER1_COMPARE};
     e64:	ce 01       	movw	r24, r28
     e66:	01 96       	adiw	r24, 0x01	; 1
     e68:	98 87       	std	Y+8, r25	; 0x08
     e6a:	8f 83       	std	Y+7, r24	; 0x07
     e6c:	e9 ef       	ldi	r30, 0xF9	; 249
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	fa 87       	std	Y+10, r31	; 0x0a
     e72:	e9 87       	std	Y+9, r30	; 0x09
     e74:	f6 e0       	ldi	r31, 0x06	; 6
     e76:	fb 87       	std	Y+11, r31	; 0x0b
     e78:	e9 85       	ldd	r30, Y+9	; 0x09
     e7a:	fa 85       	ldd	r31, Y+10	; 0x0a
     e7c:	00 80       	ld	r0, Z
     e7e:	89 85       	ldd	r24, Y+9	; 0x09
     e80:	9a 85       	ldd	r25, Y+10	; 0x0a
     e82:	01 96       	adiw	r24, 0x01	; 1
     e84:	9a 87       	std	Y+10, r25	; 0x0a
     e86:	89 87       	std	Y+9, r24	; 0x09
     e88:	ef 81       	ldd	r30, Y+7	; 0x07
     e8a:	f8 85       	ldd	r31, Y+8	; 0x08
     e8c:	00 82       	st	Z, r0
     e8e:	8f 81       	ldd	r24, Y+7	; 0x07
     e90:	98 85       	ldd	r25, Y+8	; 0x08
     e92:	01 96       	adiw	r24, 0x01	; 1
     e94:	98 87       	std	Y+8, r25	; 0x08
     e96:	8f 83       	std	Y+7, r24	; 0x07
     e98:	9b 85       	ldd	r25, Y+11	; 0x0b
     e9a:	91 50       	subi	r25, 0x01	; 1
     e9c:	9b 87       	std	Y+11, r25	; 0x0b
     e9e:	eb 85       	ldd	r30, Y+11	; 0x0b
     ea0:	ee 23       	and	r30, r30
     ea2:	51 f7       	brne	.-44     	; 0xe78 <openDoorCallBackFunction+0x3a>
		TIMER1_init(&timer1Config);
     ea4:	ce 01       	movw	r24, r28
     ea6:	01 96       	adiw	r24, 0x01	; 1
     ea8:	0e 94 a3 19 	call	0x3346	; 0x3346 <TIMER1_init>

		/* displaying required message on LCD */
		LCD_clearScreen();
     eac:	0e 94 74 19 	call	0x32e8	; 0x32e8 <LCD_clearScreen>
		LCD_displayString((uint8*)"Unlocking Door");
     eb0:	8e e7       	ldi	r24, 0x7E	; 126
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <LCD_displayString>
     eb8:	20 c0       	rjmp	.+64     	; 0xefa <openDoorCallBackFunction+0xbc>
	}
	else if(tick == 6)
     eba:	80 91 07 01 	lds	r24, 0x0107
     ebe:	86 30       	cpi	r24, 0x06	; 6
     ec0:	39 f4       	brne	.+14     	; 0xed0 <openDoorCallBackFunction+0x92>
	{
		/* displaying required message on LCD */
		LCD_clearScreen();
     ec2:	0e 94 74 19 	call	0x32e8	; 0x32e8 <LCD_clearScreen>
		LCD_displayString((uint8*)"Door is open");
     ec6:	8d e8       	ldi	r24, 0x8D	; 141
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <LCD_displayString>
     ece:	15 c0       	rjmp	.+42     	; 0xefa <openDoorCallBackFunction+0xbc>
	}
	else if(tick == 7)
     ed0:	80 91 07 01 	lds	r24, 0x0107
     ed4:	87 30       	cpi	r24, 0x07	; 7
     ed6:	39 f4       	brne	.+14     	; 0xee6 <openDoorCallBackFunction+0xa8>
	{
		/* displaying required message on LCD */
		LCD_clearScreen();
     ed8:	0e 94 74 19 	call	0x32e8	; 0x32e8 <LCD_clearScreen>
		LCD_displayString((uint8*)"Locking Door");
     edc:	8a e9       	ldi	r24, 0x9A	; 154
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <LCD_displayString>
     ee4:	0a c0       	rjmp	.+20     	; 0xefa <openDoorCallBackFunction+0xbc>
	}
	else if(tick == 12)
     ee6:	80 91 07 01 	lds	r24, 0x0107
     eea:	8c 30       	cpi	r24, 0x0C	; 12
     eec:	31 f4       	brne	.+12     	; 0xefa <openDoorCallBackFunction+0xbc>
	{
		tick = 0;				/* clear interrupt counter */
     eee:	10 92 07 01 	sts	0x0107, r1

		freezeFlag = 0;			/* clear freeze flag */
     ef2:	10 92 06 01 	sts	0x0106, r1

		TIMER1_deInit();		/* de-initializing timer */
     ef6:	0e 94 15 1a 	call	0x342a	; 0x342a <TIMER1_deInit>
	}
}
     efa:	2b 96       	adiw	r28, 0x0b	; 11
     efc:	0f b6       	in	r0, 0x3f	; 63
     efe:	f8 94       	cli
     f00:	de bf       	out	0x3e, r29	; 62
     f02:	0f be       	out	0x3f, r0	; 63
     f04:	cd bf       	out	0x3d, r28	; 61
     f06:	cf 91       	pop	r28
     f08:	df 91       	pop	r29
     f0a:	08 95       	ret

00000f0c <alarmCallBackFunction>:

/********************************************************************************/

void alarmCallBackFunction(void)
{
     f0c:	df 93       	push	r29
     f0e:	cf 93       	push	r28
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
     f14:	2b 97       	sbiw	r28, 0x0b	; 11
     f16:	0f b6       	in	r0, 0x3f	; 63
     f18:	f8 94       	cli
     f1a:	de bf       	out	0x3e, r29	; 62
     f1c:	0f be       	out	0x3f, r0	; 63
     f1e:	cd bf       	out	0x3d, r28	; 61
	static uint8 tick = 0;
	tick++;		/* Increment interrupt counter */
     f20:	80 91 08 01 	lds	r24, 0x0108
     f24:	8f 5f       	subi	r24, 0xFF	; 255
     f26:	80 93 08 01 	sts	0x0108, r24

	if(tick == 1)
     f2a:	80 91 08 01 	lds	r24, 0x0108
     f2e:	81 30       	cpi	r24, 0x01	; 1
     f30:	51 f5       	brne	.+84     	; 0xf86 <alarmCallBackFunction+0x7a>
	{
		/* configuring timer with compare mood to
		 * generate an interrupt request every 8 seconds */
		Timer1_ConfigType timer1Config = {0, 0, F_CPU_1024, TIMER1_OVERFLOW};
     f32:	ce 01       	movw	r24, r28
     f34:	01 96       	adiw	r24, 0x01	; 1
     f36:	98 87       	std	Y+8, r25	; 0x08
     f38:	8f 83       	std	Y+7, r24	; 0x07
     f3a:	ef ef       	ldi	r30, 0xFF	; 255
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	fa 87       	std	Y+10, r31	; 0x0a
     f40:	e9 87       	std	Y+9, r30	; 0x09
     f42:	f6 e0       	ldi	r31, 0x06	; 6
     f44:	fb 87       	std	Y+11, r31	; 0x0b
     f46:	e9 85       	ldd	r30, Y+9	; 0x09
     f48:	fa 85       	ldd	r31, Y+10	; 0x0a
     f4a:	00 80       	ld	r0, Z
     f4c:	89 85       	ldd	r24, Y+9	; 0x09
     f4e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f50:	01 96       	adiw	r24, 0x01	; 1
     f52:	9a 87       	std	Y+10, r25	; 0x0a
     f54:	89 87       	std	Y+9, r24	; 0x09
     f56:	ef 81       	ldd	r30, Y+7	; 0x07
     f58:	f8 85       	ldd	r31, Y+8	; 0x08
     f5a:	00 82       	st	Z, r0
     f5c:	8f 81       	ldd	r24, Y+7	; 0x07
     f5e:	98 85       	ldd	r25, Y+8	; 0x08
     f60:	01 96       	adiw	r24, 0x01	; 1
     f62:	98 87       	std	Y+8, r25	; 0x08
     f64:	8f 83       	std	Y+7, r24	; 0x07
     f66:	9b 85       	ldd	r25, Y+11	; 0x0b
     f68:	91 50       	subi	r25, 0x01	; 1
     f6a:	9b 87       	std	Y+11, r25	; 0x0b
     f6c:	eb 85       	ldd	r30, Y+11	; 0x0b
     f6e:	ee 23       	and	r30, r30
     f70:	51 f7       	brne	.-44     	; 0xf46 <alarmCallBackFunction+0x3a>
		TIMER1_init(&timer1Config);
     f72:	ce 01       	movw	r24, r28
     f74:	01 96       	adiw	r24, 0x01	; 1
     f76:	0e 94 a3 19 	call	0x3346	; 0x3346 <TIMER1_init>

		/* displaying required message on LCD */
		LCD_clearScreen();
     f7a:	0e 94 74 19 	call	0x32e8	; 0x32e8 <LCD_clearScreen>
		LCD_displayString((uint8*)"ERROR!!!!");
     f7e:	87 ea       	ldi	r24, 0xA7	; 167
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <LCD_displayString>
	}
	if(tick == 7)
     f86:	80 91 08 01 	lds	r24, 0x0108
     f8a:	87 30       	cpi	r24, 0x07	; 7
     f8c:	31 f4       	brne	.+12     	; 0xf9a <alarmCallBackFunction+0x8e>
	{
		tick = 0;				/* clear interrupt counter */
     f8e:	10 92 08 01 	sts	0x0108, r1

		freezeFlag = 0;			/* clear freeze flag */
     f92:	10 92 06 01 	sts	0x0106, r1

		TIMER1_deInit();		/* de-initializing timer */
     f96:	0e 94 15 1a 	call	0x342a	; 0x342a <TIMER1_deInit>
	}
}
     f9a:	2b 96       	adiw	r28, 0x0b	; 11
     f9c:	0f b6       	in	r0, 0x3f	; 63
     f9e:	f8 94       	cli
     fa0:	de bf       	out	0x3e, r29	; 62
     fa2:	0f be       	out	0x3f, r0	; 63
     fa4:	cd bf       	out	0x3d, r28	; 61
     fa6:	cf 91       	pop	r28
     fa8:	df 91       	pop	r29
     faa:	08 95       	ret

00000fac <sendPass>:

/********************************************************************************/

void sendPass (void)
{
     fac:	0f 93       	push	r16
     fae:	1f 93       	push	r17
     fb0:	df 93       	push	r29
     fb2:	cf 93       	push	r28
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
     fb8:	65 97       	sbiw	r28, 0x15	; 21
     fba:	0f b6       	in	r0, 0x3f	; 63
     fbc:	f8 94       	cli
     fbe:	de bf       	out	0x3e, r29	; 62
     fc0:	0f be       	out	0x3f, r0	; 63
     fc2:	cd bf       	out	0x3d, r28	; 61
	uint8 password[5];	/* variable to store password from KEYPAD */

	LCD_clearScreen();
     fc4:	0e 94 74 19 	call	0x32e8	; 0x32e8 <LCD_clearScreen>
	LCD_displayString((uint8*)"Plz Enter Pass:");
     fc8:	81 eb       	ldi	r24, 0xB1	; 177
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <LCD_displayString>
	LCD_moveCursor(1,0);
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	60 e0       	ldi	r22, 0x00	; 0
     fd4:	0e 94 19 19 	call	0x3232	; 0x3232 <LCD_moveCursor>

	for(uint8 i = 0; i < 5; i++)
     fd8:	18 8a       	std	Y+16, r1	; 0x10
     fda:	84 c0       	rjmp	.+264    	; 0x10e4 <sendPass+0x138>
	{
		password[i] = KEYPAD_getPressedKey();
     fdc:	88 89       	ldd	r24, Y+16	; 0x10
     fde:	08 2f       	mov	r16, r24
     fe0:	10 e0       	ldi	r17, 0x00	; 0
     fe2:	0e 94 92 13 	call	0x2724	; 0x2724 <KEYPAD_getPressedKey>
     fe6:	28 2f       	mov	r18, r24
     fe8:	ce 01       	movw	r24, r28
     fea:	41 96       	adiw	r24, 0x11	; 17
     fec:	fc 01       	movw	r30, r24
     fee:	e0 0f       	add	r30, r16
     ff0:	f1 1f       	adc	r31, r17
     ff2:	20 83       	st	Z, r18
		LCD_displayCharacter('*');
     ff4:	8a e2       	ldi	r24, 0x2A	; 42
     ff6:	0e 94 01 17 	call	0x2e02	; 0x2e02 <LCD_displayCharacter>
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	aa ef       	ldi	r26, 0xFA	; 250
    1000:	b3 e4       	ldi	r27, 0x43	; 67
    1002:	8b 87       	std	Y+11, r24	; 0x0b
    1004:	9c 87       	std	Y+12, r25	; 0x0c
    1006:	ad 87       	std	Y+13, r26	; 0x0d
    1008:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    100a:	6b 85       	ldd	r22, Y+11	; 0x0b
    100c:	7c 85       	ldd	r23, Y+12	; 0x0c
    100e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1010:	9e 85       	ldd	r25, Y+14	; 0x0e
    1012:	20 e0       	ldi	r18, 0x00	; 0
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	4a ef       	ldi	r20, 0xFA	; 250
    1018:	54 e4       	ldi	r21, 0x44	; 68
    101a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    101e:	dc 01       	movw	r26, r24
    1020:	cb 01       	movw	r24, r22
    1022:	8f 83       	std	Y+7, r24	; 0x07
    1024:	98 87       	std	Y+8, r25	; 0x08
    1026:	a9 87       	std	Y+9, r26	; 0x09
    1028:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    102a:	6f 81       	ldd	r22, Y+7	; 0x07
    102c:	78 85       	ldd	r23, Y+8	; 0x08
    102e:	89 85       	ldd	r24, Y+9	; 0x09
    1030:	9a 85       	ldd	r25, Y+10	; 0x0a
    1032:	20 e0       	ldi	r18, 0x00	; 0
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	40 e8       	ldi	r20, 0x80	; 128
    1038:	5f e3       	ldi	r21, 0x3F	; 63
    103a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    103e:	88 23       	and	r24, r24
    1040:	2c f4       	brge	.+10     	; 0x104c <sendPass+0xa0>
		__ticks = 1;
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	9e 83       	std	Y+6, r25	; 0x06
    1048:	8d 83       	std	Y+5, r24	; 0x05
    104a:	3f c0       	rjmp	.+126    	; 0x10ca <sendPass+0x11e>
	else if (__tmp > 65535)
    104c:	6f 81       	ldd	r22, Y+7	; 0x07
    104e:	78 85       	ldd	r23, Y+8	; 0x08
    1050:	89 85       	ldd	r24, Y+9	; 0x09
    1052:	9a 85       	ldd	r25, Y+10	; 0x0a
    1054:	20 e0       	ldi	r18, 0x00	; 0
    1056:	3f ef       	ldi	r19, 0xFF	; 255
    1058:	4f e7       	ldi	r20, 0x7F	; 127
    105a:	57 e4       	ldi	r21, 0x47	; 71
    105c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1060:	18 16       	cp	r1, r24
    1062:	4c f5       	brge	.+82     	; 0x10b6 <sendPass+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1064:	6b 85       	ldd	r22, Y+11	; 0x0b
    1066:	7c 85       	ldd	r23, Y+12	; 0x0c
    1068:	8d 85       	ldd	r24, Y+13	; 0x0d
    106a:	9e 85       	ldd	r25, Y+14	; 0x0e
    106c:	20 e0       	ldi	r18, 0x00	; 0
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	40 e2       	ldi	r20, 0x20	; 32
    1072:	51 e4       	ldi	r21, 0x41	; 65
    1074:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1078:	dc 01       	movw	r26, r24
    107a:	cb 01       	movw	r24, r22
    107c:	bc 01       	movw	r22, r24
    107e:	cd 01       	movw	r24, r26
    1080:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1084:	dc 01       	movw	r26, r24
    1086:	cb 01       	movw	r24, r22
    1088:	9e 83       	std	Y+6, r25	; 0x06
    108a:	8d 83       	std	Y+5, r24	; 0x05
    108c:	0f c0       	rjmp	.+30     	; 0x10ac <sendPass+0x100>
    108e:	88 ec       	ldi	r24, 0xC8	; 200
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	9c 83       	std	Y+4, r25	; 0x04
    1094:	8b 83       	std	Y+3, r24	; 0x03
    1096:	8b 81       	ldd	r24, Y+3	; 0x03
    1098:	9c 81       	ldd	r25, Y+4	; 0x04
    109a:	01 97       	sbiw	r24, 0x01	; 1
    109c:	f1 f7       	brne	.-4      	; 0x109a <sendPass+0xee>
    109e:	9c 83       	std	Y+4, r25	; 0x04
    10a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10a2:	8d 81       	ldd	r24, Y+5	; 0x05
    10a4:	9e 81       	ldd	r25, Y+6	; 0x06
    10a6:	01 97       	sbiw	r24, 0x01	; 1
    10a8:	9e 83       	std	Y+6, r25	; 0x06
    10aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ac:	8d 81       	ldd	r24, Y+5	; 0x05
    10ae:	9e 81       	ldd	r25, Y+6	; 0x06
    10b0:	00 97       	sbiw	r24, 0x00	; 0
    10b2:	69 f7       	brne	.-38     	; 0x108e <sendPass+0xe2>
    10b4:	14 c0       	rjmp	.+40     	; 0x10de <sendPass+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10b6:	6f 81       	ldd	r22, Y+7	; 0x07
    10b8:	78 85       	ldd	r23, Y+8	; 0x08
    10ba:	89 85       	ldd	r24, Y+9	; 0x09
    10bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    10be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10c2:	dc 01       	movw	r26, r24
    10c4:	cb 01       	movw	r24, r22
    10c6:	9e 83       	std	Y+6, r25	; 0x06
    10c8:	8d 83       	std	Y+5, r24	; 0x05
    10ca:	8d 81       	ldd	r24, Y+5	; 0x05
    10cc:	9e 81       	ldd	r25, Y+6	; 0x06
    10ce:	9a 83       	std	Y+2, r25	; 0x02
    10d0:	89 83       	std	Y+1, r24	; 0x01
    10d2:	89 81       	ldd	r24, Y+1	; 0x01
    10d4:	9a 81       	ldd	r25, Y+2	; 0x02
    10d6:	01 97       	sbiw	r24, 0x01	; 1
    10d8:	f1 f7       	brne	.-4      	; 0x10d6 <sendPass+0x12a>
    10da:	9a 83       	std	Y+2, r25	; 0x02
    10dc:	89 83       	std	Y+1, r24	; 0x01

	LCD_clearScreen();
	LCD_displayString((uint8*)"Plz Enter Pass:");
	LCD_moveCursor(1,0);

	for(uint8 i = 0; i < 5; i++)
    10de:	88 89       	ldd	r24, Y+16	; 0x10
    10e0:	8f 5f       	subi	r24, 0xFF	; 255
    10e2:	88 8b       	std	Y+16, r24	; 0x10
    10e4:	88 89       	ldd	r24, Y+16	; 0x10
    10e6:	85 30       	cpi	r24, 0x05	; 5
    10e8:	08 f4       	brcc	.+2      	; 0x10ec <sendPass+0x140>
    10ea:	78 cf       	rjmp	.-272    	; 0xfdc <sendPass+0x30>
		LCD_displayCharacter('*');
		_delay_ms(500);	/* delay for keypad */
	}

	/* waiting for user to press enter key */
	while(KEYPAD_getPressedKey() != '=');
    10ec:	0e 94 92 13 	call	0x2724	; 0x2724 <KEYPAD_getPressedKey>
    10f0:	8d 33       	cpi	r24, 0x3D	; 61
    10f2:	e1 f7       	brne	.-8      	; 0x10ec <sendPass+0x140>
	for(uint8 i = 0; i < 5 ; i++)
    10f4:	1f 86       	std	Y+15, r1	; 0x0f
    10f6:	15 c0       	rjmp	.+42     	; 0x1122 <sendPass+0x176>
	{
		/* ECU1 asks ECU2 and waits for its
		 * response then sends the pressed key*/
		UART_sendByte(MC1_ASK);
    10f8:	83 e0       	ldi	r24, 0x03	; 3
    10fa:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <UART_sendByte>
		while(UART_recieveByte() != MC2_READY);
    10fe:	0e 94 8f 1b 	call	0x371e	; 0x371e <UART_recieveByte>
    1102:	84 30       	cpi	r24, 0x04	; 4
    1104:	e1 f7       	brne	.-8      	; 0x10fe <sendPass+0x152>
		UART_sendByte(password[i]);
    1106:	8f 85       	ldd	r24, Y+15	; 0x0f
    1108:	28 2f       	mov	r18, r24
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	ce 01       	movw	r24, r28
    110e:	41 96       	adiw	r24, 0x11	; 17
    1110:	fc 01       	movw	r30, r24
    1112:	e2 0f       	add	r30, r18
    1114:	f3 1f       	adc	r31, r19
    1116:	80 81       	ld	r24, Z
    1118:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <UART_sendByte>
		_delay_ms(500);	/* delay for keypad */
	}

	/* waiting for user to press enter key */
	while(KEYPAD_getPressedKey() != '=');
	for(uint8 i = 0; i < 5 ; i++)
    111c:	8f 85       	ldd	r24, Y+15	; 0x0f
    111e:	8f 5f       	subi	r24, 0xFF	; 255
    1120:	8f 87       	std	Y+15, r24	; 0x0f
    1122:	8f 85       	ldd	r24, Y+15	; 0x0f
    1124:	85 30       	cpi	r24, 0x05	; 5
    1126:	40 f3       	brcs	.-48     	; 0x10f8 <sendPass+0x14c>
		 * response then sends the pressed key*/
		UART_sendByte(MC1_ASK);
		while(UART_recieveByte() != MC2_READY);
		UART_sendByte(password[i]);
	}
}
    1128:	65 96       	adiw	r28, 0x15	; 21
    112a:	0f b6       	in	r0, 0x3f	; 63
    112c:	f8 94       	cli
    112e:	de bf       	out	0x3e, r29	; 62
    1130:	0f be       	out	0x3f, r0	; 63
    1132:	cd bf       	out	0x3d, r28	; 61
    1134:	cf 91       	pop	r28
    1136:	df 91       	pop	r29
    1138:	1f 91       	pop	r17
    113a:	0f 91       	pop	r16
    113c:	08 95       	ret

0000113e <createPass>:

/********************************************************************************/

void createPass(void)
{
    113e:	0f 93       	push	r16
    1140:	1f 93       	push	r17
    1142:	df 93       	push	r29
    1144:	cf 93       	push	r28
    1146:	cd b7       	in	r28, 0x3d	; 61
    1148:	de b7       	in	r29, 0x3e	; 62
    114a:	e7 97       	sbiw	r28, 0x37	; 55
    114c:	0f b6       	in	r0, 0x3f	; 63
    114e:	f8 94       	cli
    1150:	de bf       	out	0x3e, r29	; 62
    1152:	0f be       	out	0x3f, r0	; 63
    1154:	cd bf       	out	0x3d, r28	; 61
	uint8 password[5],repass[5];

	LCD_clearScreen();
    1156:	0e 94 74 19 	call	0x32e8	; 0x32e8 <LCD_clearScreen>
	LCD_displayString((uint8*)"Plz Enter Pass:");
    115a:	81 eb       	ldi	r24, 0xB1	; 177
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <LCD_displayString>
	LCD_moveCursor(1,0);
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	60 e0       	ldi	r22, 0x00	; 0
    1166:	0e 94 19 19 	call	0x3232	; 0x3232 <LCD_moveCursor>
	for(uint8 i = 0; i < 5 ; i++)
    116a:	1d a6       	std	Y+45, r1	; 0x2d
    116c:	84 c0       	rjmp	.+264    	; 0x1276 <createPass+0x138>
	{
		/* 5 number password is saved from
		 * KEYPAD in local variable array and
		 * displayed as (*) on LCD*/
		password[i] = KEYPAD_getPressedKey();
    116e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1170:	08 2f       	mov	r16, r24
    1172:	10 e0       	ldi	r17, 0x00	; 0
    1174:	0e 94 92 13 	call	0x2724	; 0x2724 <KEYPAD_getPressedKey>
    1178:	28 2f       	mov	r18, r24
    117a:	ce 01       	movw	r24, r28
    117c:	8e 96       	adiw	r24, 0x2e	; 46
    117e:	fc 01       	movw	r30, r24
    1180:	e0 0f       	add	r30, r16
    1182:	f1 1f       	adc	r31, r17
    1184:	20 83       	st	Z, r18

		LCD_displayCharacter('*');
    1186:	8a e2       	ldi	r24, 0x2A	; 42
    1188:	0e 94 01 17 	call	0x2e02	; 0x2e02 <LCD_displayCharacter>
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	aa ef       	ldi	r26, 0xFA	; 250
    1192:	b3 e4       	ldi	r27, 0x43	; 67
    1194:	8f a3       	std	Y+39, r24	; 0x27
    1196:	98 a7       	std	Y+40, r25	; 0x28
    1198:	a9 a7       	std	Y+41, r26	; 0x29
    119a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    119c:	6f a1       	ldd	r22, Y+39	; 0x27
    119e:	78 a5       	ldd	r23, Y+40	; 0x28
    11a0:	89 a5       	ldd	r24, Y+41	; 0x29
    11a2:	9a a5       	ldd	r25, Y+42	; 0x2a
    11a4:	20 e0       	ldi	r18, 0x00	; 0
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	4a ef       	ldi	r20, 0xFA	; 250
    11aa:	54 e4       	ldi	r21, 0x44	; 68
    11ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11b0:	dc 01       	movw	r26, r24
    11b2:	cb 01       	movw	r24, r22
    11b4:	8b a3       	std	Y+35, r24	; 0x23
    11b6:	9c a3       	std	Y+36, r25	; 0x24
    11b8:	ad a3       	std	Y+37, r26	; 0x25
    11ba:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    11bc:	6b a1       	ldd	r22, Y+35	; 0x23
    11be:	7c a1       	ldd	r23, Y+36	; 0x24
    11c0:	8d a1       	ldd	r24, Y+37	; 0x25
    11c2:	9e a1       	ldd	r25, Y+38	; 0x26
    11c4:	20 e0       	ldi	r18, 0x00	; 0
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	40 e8       	ldi	r20, 0x80	; 128
    11ca:	5f e3       	ldi	r21, 0x3F	; 63
    11cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11d0:	88 23       	and	r24, r24
    11d2:	2c f4       	brge	.+10     	; 0x11de <createPass+0xa0>
		__ticks = 1;
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	9a a3       	std	Y+34, r25	; 0x22
    11da:	89 a3       	std	Y+33, r24	; 0x21
    11dc:	3f c0       	rjmp	.+126    	; 0x125c <createPass+0x11e>
	else if (__tmp > 65535)
    11de:	6b a1       	ldd	r22, Y+35	; 0x23
    11e0:	7c a1       	ldd	r23, Y+36	; 0x24
    11e2:	8d a1       	ldd	r24, Y+37	; 0x25
    11e4:	9e a1       	ldd	r25, Y+38	; 0x26
    11e6:	20 e0       	ldi	r18, 0x00	; 0
    11e8:	3f ef       	ldi	r19, 0xFF	; 255
    11ea:	4f e7       	ldi	r20, 0x7F	; 127
    11ec:	57 e4       	ldi	r21, 0x47	; 71
    11ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11f2:	18 16       	cp	r1, r24
    11f4:	4c f5       	brge	.+82     	; 0x1248 <createPass+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11f6:	6f a1       	ldd	r22, Y+39	; 0x27
    11f8:	78 a5       	ldd	r23, Y+40	; 0x28
    11fa:	89 a5       	ldd	r24, Y+41	; 0x29
    11fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    11fe:	20 e0       	ldi	r18, 0x00	; 0
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	40 e2       	ldi	r20, 0x20	; 32
    1204:	51 e4       	ldi	r21, 0x41	; 65
    1206:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    120a:	dc 01       	movw	r26, r24
    120c:	cb 01       	movw	r24, r22
    120e:	bc 01       	movw	r22, r24
    1210:	cd 01       	movw	r24, r26
    1212:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1216:	dc 01       	movw	r26, r24
    1218:	cb 01       	movw	r24, r22
    121a:	9a a3       	std	Y+34, r25	; 0x22
    121c:	89 a3       	std	Y+33, r24	; 0x21
    121e:	0f c0       	rjmp	.+30     	; 0x123e <createPass+0x100>
    1220:	88 ec       	ldi	r24, 0xC8	; 200
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	98 a3       	std	Y+32, r25	; 0x20
    1226:	8f 8f       	std	Y+31, r24	; 0x1f
    1228:	8f 8d       	ldd	r24, Y+31	; 0x1f
    122a:	98 a1       	ldd	r25, Y+32	; 0x20
    122c:	01 97       	sbiw	r24, 0x01	; 1
    122e:	f1 f7       	brne	.-4      	; 0x122c <createPass+0xee>
    1230:	98 a3       	std	Y+32, r25	; 0x20
    1232:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1234:	89 a1       	ldd	r24, Y+33	; 0x21
    1236:	9a a1       	ldd	r25, Y+34	; 0x22
    1238:	01 97       	sbiw	r24, 0x01	; 1
    123a:	9a a3       	std	Y+34, r25	; 0x22
    123c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    123e:	89 a1       	ldd	r24, Y+33	; 0x21
    1240:	9a a1       	ldd	r25, Y+34	; 0x22
    1242:	00 97       	sbiw	r24, 0x00	; 0
    1244:	69 f7       	brne	.-38     	; 0x1220 <createPass+0xe2>
    1246:	14 c0       	rjmp	.+40     	; 0x1270 <createPass+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1248:	6b a1       	ldd	r22, Y+35	; 0x23
    124a:	7c a1       	ldd	r23, Y+36	; 0x24
    124c:	8d a1       	ldd	r24, Y+37	; 0x25
    124e:	9e a1       	ldd	r25, Y+38	; 0x26
    1250:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1254:	dc 01       	movw	r26, r24
    1256:	cb 01       	movw	r24, r22
    1258:	9a a3       	std	Y+34, r25	; 0x22
    125a:	89 a3       	std	Y+33, r24	; 0x21
    125c:	89 a1       	ldd	r24, Y+33	; 0x21
    125e:	9a a1       	ldd	r25, Y+34	; 0x22
    1260:	9e 8f       	std	Y+30, r25	; 0x1e
    1262:	8d 8f       	std	Y+29, r24	; 0x1d
    1264:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1266:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1268:	01 97       	sbiw	r24, 0x01	; 1
    126a:	f1 f7       	brne	.-4      	; 0x1268 <createPass+0x12a>
    126c:	9e 8f       	std	Y+30, r25	; 0x1e
    126e:	8d 8f       	std	Y+29, r24	; 0x1d
	uint8 password[5],repass[5];

	LCD_clearScreen();
	LCD_displayString((uint8*)"Plz Enter Pass:");
	LCD_moveCursor(1,0);
	for(uint8 i = 0; i < 5 ; i++)
    1270:	8d a5       	ldd	r24, Y+45	; 0x2d
    1272:	8f 5f       	subi	r24, 0xFF	; 255
    1274:	8d a7       	std	Y+45, r24	; 0x2d
    1276:	8d a5       	ldd	r24, Y+45	; 0x2d
    1278:	85 30       	cpi	r24, 0x05	; 5
    127a:	08 f4       	brcc	.+2      	; 0x127e <createPass+0x140>
    127c:	78 cf       	rjmp	.-272    	; 0x116e <createPass+0x30>

		_delay_ms(500);	/* delay for keypad */
	}

	/* waiting for user to press enter key */
	while(KEYPAD_getPressedKey() != '=');
    127e:	0e 94 92 13 	call	0x2724	; 0x2724 <KEYPAD_getPressedKey>
    1282:	8d 33       	cpi	r24, 0x3D	; 61
    1284:	e1 f7       	brne	.-8      	; 0x127e <createPass+0x140>

	LCD_clearScreen();
    1286:	0e 94 74 19 	call	0x32e8	; 0x32e8 <LCD_clearScreen>
	LCD_displayString((uint8*)"Plz re-enter the");
    128a:	81 ec       	ldi	r24, 0xC1	; 193
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <LCD_displayString>
	LCD_moveCursor(1,0);
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	60 e0       	ldi	r22, 0x00	; 0
    1296:	0e 94 19 19 	call	0x3232	; 0x3232 <LCD_moveCursor>
	LCD_displayString((uint8*)"same Pass: ");
    129a:	82 ed       	ldi	r24, 0xD2	; 210
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <LCD_displayString>
    12a2:	80 e0       	ldi	r24, 0x00	; 0
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	aa ef       	ldi	r26, 0xFA	; 250
    12a8:	b3 e4       	ldi	r27, 0x43	; 67
    12aa:	89 8f       	std	Y+25, r24	; 0x19
    12ac:	9a 8f       	std	Y+26, r25	; 0x1a
    12ae:	ab 8f       	std	Y+27, r26	; 0x1b
    12b0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12b2:	69 8d       	ldd	r22, Y+25	; 0x19
    12b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12ba:	20 e0       	ldi	r18, 0x00	; 0
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	4a ef       	ldi	r20, 0xFA	; 250
    12c0:	54 e4       	ldi	r21, 0x44	; 68
    12c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12c6:	dc 01       	movw	r26, r24
    12c8:	cb 01       	movw	r24, r22
    12ca:	8d 8b       	std	Y+21, r24	; 0x15
    12cc:	9e 8b       	std	Y+22, r25	; 0x16
    12ce:	af 8b       	std	Y+23, r26	; 0x17
    12d0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    12d2:	6d 89       	ldd	r22, Y+21	; 0x15
    12d4:	7e 89       	ldd	r23, Y+22	; 0x16
    12d6:	8f 89       	ldd	r24, Y+23	; 0x17
    12d8:	98 8d       	ldd	r25, Y+24	; 0x18
    12da:	20 e0       	ldi	r18, 0x00	; 0
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	40 e8       	ldi	r20, 0x80	; 128
    12e0:	5f e3       	ldi	r21, 0x3F	; 63
    12e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12e6:	88 23       	and	r24, r24
    12e8:	2c f4       	brge	.+10     	; 0x12f4 <createPass+0x1b6>
		__ticks = 1;
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	9c 8b       	std	Y+20, r25	; 0x14
    12f0:	8b 8b       	std	Y+19, r24	; 0x13
    12f2:	3f c0       	rjmp	.+126    	; 0x1372 <createPass+0x234>
	else if (__tmp > 65535)
    12f4:	6d 89       	ldd	r22, Y+21	; 0x15
    12f6:	7e 89       	ldd	r23, Y+22	; 0x16
    12f8:	8f 89       	ldd	r24, Y+23	; 0x17
    12fa:	98 8d       	ldd	r25, Y+24	; 0x18
    12fc:	20 e0       	ldi	r18, 0x00	; 0
    12fe:	3f ef       	ldi	r19, 0xFF	; 255
    1300:	4f e7       	ldi	r20, 0x7F	; 127
    1302:	57 e4       	ldi	r21, 0x47	; 71
    1304:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1308:	18 16       	cp	r1, r24
    130a:	4c f5       	brge	.+82     	; 0x135e <createPass+0x220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    130c:	69 8d       	ldd	r22, Y+25	; 0x19
    130e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1310:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1312:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1314:	20 e0       	ldi	r18, 0x00	; 0
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	40 e2       	ldi	r20, 0x20	; 32
    131a:	51 e4       	ldi	r21, 0x41	; 65
    131c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1320:	dc 01       	movw	r26, r24
    1322:	cb 01       	movw	r24, r22
    1324:	bc 01       	movw	r22, r24
    1326:	cd 01       	movw	r24, r26
    1328:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    132c:	dc 01       	movw	r26, r24
    132e:	cb 01       	movw	r24, r22
    1330:	9c 8b       	std	Y+20, r25	; 0x14
    1332:	8b 8b       	std	Y+19, r24	; 0x13
    1334:	0f c0       	rjmp	.+30     	; 0x1354 <createPass+0x216>
    1336:	88 ec       	ldi	r24, 0xC8	; 200
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	9a 8b       	std	Y+18, r25	; 0x12
    133c:	89 8b       	std	Y+17, r24	; 0x11
    133e:	89 89       	ldd	r24, Y+17	; 0x11
    1340:	9a 89       	ldd	r25, Y+18	; 0x12
    1342:	01 97       	sbiw	r24, 0x01	; 1
    1344:	f1 f7       	brne	.-4      	; 0x1342 <createPass+0x204>
    1346:	9a 8b       	std	Y+18, r25	; 0x12
    1348:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    134a:	8b 89       	ldd	r24, Y+19	; 0x13
    134c:	9c 89       	ldd	r25, Y+20	; 0x14
    134e:	01 97       	sbiw	r24, 0x01	; 1
    1350:	9c 8b       	std	Y+20, r25	; 0x14
    1352:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1354:	8b 89       	ldd	r24, Y+19	; 0x13
    1356:	9c 89       	ldd	r25, Y+20	; 0x14
    1358:	00 97       	sbiw	r24, 0x00	; 0
    135a:	69 f7       	brne	.-38     	; 0x1336 <createPass+0x1f8>
    135c:	14 c0       	rjmp	.+40     	; 0x1386 <createPass+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    135e:	6d 89       	ldd	r22, Y+21	; 0x15
    1360:	7e 89       	ldd	r23, Y+22	; 0x16
    1362:	8f 89       	ldd	r24, Y+23	; 0x17
    1364:	98 8d       	ldd	r25, Y+24	; 0x18
    1366:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    136a:	dc 01       	movw	r26, r24
    136c:	cb 01       	movw	r24, r22
    136e:	9c 8b       	std	Y+20, r25	; 0x14
    1370:	8b 8b       	std	Y+19, r24	; 0x13
    1372:	8b 89       	ldd	r24, Y+19	; 0x13
    1374:	9c 89       	ldd	r25, Y+20	; 0x14
    1376:	98 8b       	std	Y+16, r25	; 0x10
    1378:	8f 87       	std	Y+15, r24	; 0x0f
    137a:	8f 85       	ldd	r24, Y+15	; 0x0f
    137c:	98 89       	ldd	r25, Y+16	; 0x10
    137e:	01 97       	sbiw	r24, 0x01	; 1
    1380:	f1 f7       	brne	.-4      	; 0x137e <createPass+0x240>
    1382:	98 8b       	std	Y+16, r25	; 0x10
    1384:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(500);	/* delay for keypad */
	for(uint8 i = 0; i < 5; i++)
    1386:	1c a6       	std	Y+44, r1	; 0x2c
    1388:	84 c0       	rjmp	.+264    	; 0x1492 <createPass+0x354>
	{
		/* 5 number password is saved from
		 * KEYPAD in local variable array and
		 * displayed as (*) on LCD*/
		repass[i] = KEYPAD_getPressedKey();
    138a:	8c a5       	ldd	r24, Y+44	; 0x2c
    138c:	08 2f       	mov	r16, r24
    138e:	10 e0       	ldi	r17, 0x00	; 0
    1390:	0e 94 92 13 	call	0x2724	; 0x2724 <KEYPAD_getPressedKey>
    1394:	28 2f       	mov	r18, r24
    1396:	ce 01       	movw	r24, r28
    1398:	c3 96       	adiw	r24, 0x33	; 51
    139a:	fc 01       	movw	r30, r24
    139c:	e0 0f       	add	r30, r16
    139e:	f1 1f       	adc	r31, r17
    13a0:	20 83       	st	Z, r18

		LCD_displayCharacter('*');
    13a2:	8a e2       	ldi	r24, 0x2A	; 42
    13a4:	0e 94 01 17 	call	0x2e02	; 0x2e02 <LCD_displayCharacter>
    13a8:	80 e0       	ldi	r24, 0x00	; 0
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	aa ef       	ldi	r26, 0xFA	; 250
    13ae:	b3 e4       	ldi	r27, 0x43	; 67
    13b0:	8b 87       	std	Y+11, r24	; 0x0b
    13b2:	9c 87       	std	Y+12, r25	; 0x0c
    13b4:	ad 87       	std	Y+13, r26	; 0x0d
    13b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    13ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    13bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    13be:	9e 85       	ldd	r25, Y+14	; 0x0e
    13c0:	20 e0       	ldi	r18, 0x00	; 0
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	4a ef       	ldi	r20, 0xFA	; 250
    13c6:	54 e4       	ldi	r21, 0x44	; 68
    13c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13cc:	dc 01       	movw	r26, r24
    13ce:	cb 01       	movw	r24, r22
    13d0:	8f 83       	std	Y+7, r24	; 0x07
    13d2:	98 87       	std	Y+8, r25	; 0x08
    13d4:	a9 87       	std	Y+9, r26	; 0x09
    13d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13d8:	6f 81       	ldd	r22, Y+7	; 0x07
    13da:	78 85       	ldd	r23, Y+8	; 0x08
    13dc:	89 85       	ldd	r24, Y+9	; 0x09
    13de:	9a 85       	ldd	r25, Y+10	; 0x0a
    13e0:	20 e0       	ldi	r18, 0x00	; 0
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	40 e8       	ldi	r20, 0x80	; 128
    13e6:	5f e3       	ldi	r21, 0x3F	; 63
    13e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13ec:	88 23       	and	r24, r24
    13ee:	2c f4       	brge	.+10     	; 0x13fa <createPass+0x2bc>
		__ticks = 1;
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	9e 83       	std	Y+6, r25	; 0x06
    13f6:	8d 83       	std	Y+5, r24	; 0x05
    13f8:	3f c0       	rjmp	.+126    	; 0x1478 <createPass+0x33a>
	else if (__tmp > 65535)
    13fa:	6f 81       	ldd	r22, Y+7	; 0x07
    13fc:	78 85       	ldd	r23, Y+8	; 0x08
    13fe:	89 85       	ldd	r24, Y+9	; 0x09
    1400:	9a 85       	ldd	r25, Y+10	; 0x0a
    1402:	20 e0       	ldi	r18, 0x00	; 0
    1404:	3f ef       	ldi	r19, 0xFF	; 255
    1406:	4f e7       	ldi	r20, 0x7F	; 127
    1408:	57 e4       	ldi	r21, 0x47	; 71
    140a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    140e:	18 16       	cp	r1, r24
    1410:	4c f5       	brge	.+82     	; 0x1464 <createPass+0x326>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1412:	6b 85       	ldd	r22, Y+11	; 0x0b
    1414:	7c 85       	ldd	r23, Y+12	; 0x0c
    1416:	8d 85       	ldd	r24, Y+13	; 0x0d
    1418:	9e 85       	ldd	r25, Y+14	; 0x0e
    141a:	20 e0       	ldi	r18, 0x00	; 0
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	40 e2       	ldi	r20, 0x20	; 32
    1420:	51 e4       	ldi	r21, 0x41	; 65
    1422:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1426:	dc 01       	movw	r26, r24
    1428:	cb 01       	movw	r24, r22
    142a:	bc 01       	movw	r22, r24
    142c:	cd 01       	movw	r24, r26
    142e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1432:	dc 01       	movw	r26, r24
    1434:	cb 01       	movw	r24, r22
    1436:	9e 83       	std	Y+6, r25	; 0x06
    1438:	8d 83       	std	Y+5, r24	; 0x05
    143a:	0f c0       	rjmp	.+30     	; 0x145a <createPass+0x31c>
    143c:	88 ec       	ldi	r24, 0xC8	; 200
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	9c 83       	std	Y+4, r25	; 0x04
    1442:	8b 83       	std	Y+3, r24	; 0x03
    1444:	8b 81       	ldd	r24, Y+3	; 0x03
    1446:	9c 81       	ldd	r25, Y+4	; 0x04
    1448:	01 97       	sbiw	r24, 0x01	; 1
    144a:	f1 f7       	brne	.-4      	; 0x1448 <createPass+0x30a>
    144c:	9c 83       	std	Y+4, r25	; 0x04
    144e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1450:	8d 81       	ldd	r24, Y+5	; 0x05
    1452:	9e 81       	ldd	r25, Y+6	; 0x06
    1454:	01 97       	sbiw	r24, 0x01	; 1
    1456:	9e 83       	std	Y+6, r25	; 0x06
    1458:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    145a:	8d 81       	ldd	r24, Y+5	; 0x05
    145c:	9e 81       	ldd	r25, Y+6	; 0x06
    145e:	00 97       	sbiw	r24, 0x00	; 0
    1460:	69 f7       	brne	.-38     	; 0x143c <createPass+0x2fe>
    1462:	14 c0       	rjmp	.+40     	; 0x148c <createPass+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1464:	6f 81       	ldd	r22, Y+7	; 0x07
    1466:	78 85       	ldd	r23, Y+8	; 0x08
    1468:	89 85       	ldd	r24, Y+9	; 0x09
    146a:	9a 85       	ldd	r25, Y+10	; 0x0a
    146c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1470:	dc 01       	movw	r26, r24
    1472:	cb 01       	movw	r24, r22
    1474:	9e 83       	std	Y+6, r25	; 0x06
    1476:	8d 83       	std	Y+5, r24	; 0x05
    1478:	8d 81       	ldd	r24, Y+5	; 0x05
    147a:	9e 81       	ldd	r25, Y+6	; 0x06
    147c:	9a 83       	std	Y+2, r25	; 0x02
    147e:	89 83       	std	Y+1, r24	; 0x01
    1480:	89 81       	ldd	r24, Y+1	; 0x01
    1482:	9a 81       	ldd	r25, Y+2	; 0x02
    1484:	01 97       	sbiw	r24, 0x01	; 1
    1486:	f1 f7       	brne	.-4      	; 0x1484 <createPass+0x346>
    1488:	9a 83       	std	Y+2, r25	; 0x02
    148a:	89 83       	std	Y+1, r24	; 0x01
	LCD_displayString((uint8*)"Plz re-enter the");
	LCD_moveCursor(1,0);
	LCD_displayString((uint8*)"same Pass: ");

	_delay_ms(500);	/* delay for keypad */
	for(uint8 i = 0; i < 5; i++)
    148c:	8c a5       	ldd	r24, Y+44	; 0x2c
    148e:	8f 5f       	subi	r24, 0xFF	; 255
    1490:	8c a7       	std	Y+44, r24	; 0x2c
    1492:	8c a5       	ldd	r24, Y+44	; 0x2c
    1494:	85 30       	cpi	r24, 0x05	; 5
    1496:	08 f4       	brcc	.+2      	; 0x149a <createPass+0x35c>
    1498:	78 cf       	rjmp	.-272    	; 0x138a <createPass+0x24c>

		_delay_ms(500);	/* delay for keypad */
	}

	/* waiting for user to press enter key */
	while(KEYPAD_getPressedKey() != '=');
    149a:	0e 94 92 13 	call	0x2724	; 0x2724 <KEYPAD_getPressedKey>
    149e:	8d 33       	cpi	r24, 0x3D	; 61
    14a0:	e1 f7       	brne	.-8      	; 0x149a <createPass+0x35c>

	for(uint8 i = 0; i < 5; i++)
    14a2:	1b a6       	std	Y+43, r1	; 0x2b
    14a4:	27 c0       	rjmp	.+78     	; 0x14f4 <createPass+0x3b6>
	{
		/* ECU1 asks ECU2 and waits for its
		 * response then sends the 2 passwords*/
		UART_sendByte(MC1_ASK);
    14a6:	83 e0       	ldi	r24, 0x03	; 3
    14a8:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <UART_sendByte>
		while(UART_recieveByte() != MC2_READY);
    14ac:	0e 94 8f 1b 	call	0x371e	; 0x371e <UART_recieveByte>
    14b0:	84 30       	cpi	r24, 0x04	; 4
    14b2:	e1 f7       	brne	.-8      	; 0x14ac <createPass+0x36e>
		UART_sendByte(password[i]);
    14b4:	8b a5       	ldd	r24, Y+43	; 0x2b
    14b6:	28 2f       	mov	r18, r24
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	ce 01       	movw	r24, r28
    14bc:	8e 96       	adiw	r24, 0x2e	; 46
    14be:	fc 01       	movw	r30, r24
    14c0:	e2 0f       	add	r30, r18
    14c2:	f3 1f       	adc	r31, r19
    14c4:	80 81       	ld	r24, Z
    14c6:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <UART_sendByte>

		UART_sendByte(MC1_ASK);
    14ca:	83 e0       	ldi	r24, 0x03	; 3
    14cc:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <UART_sendByte>
		while(UART_recieveByte() != MC2_READY);
    14d0:	0e 94 8f 1b 	call	0x371e	; 0x371e <UART_recieveByte>
    14d4:	84 30       	cpi	r24, 0x04	; 4
    14d6:	e1 f7       	brne	.-8      	; 0x14d0 <createPass+0x392>
		UART_sendByte(repass[i]);
    14d8:	8b a5       	ldd	r24, Y+43	; 0x2b
    14da:	28 2f       	mov	r18, r24
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	ce 01       	movw	r24, r28
    14e0:	c3 96       	adiw	r24, 0x33	; 51
    14e2:	fc 01       	movw	r30, r24
    14e4:	e2 0f       	add	r30, r18
    14e6:	f3 1f       	adc	r31, r19
    14e8:	80 81       	ld	r24, Z
    14ea:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <UART_sendByte>
	}

	/* waiting for user to press enter key */
	while(KEYPAD_getPressedKey() != '=');

	for(uint8 i = 0; i < 5; i++)
    14ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    14f0:	8f 5f       	subi	r24, 0xFF	; 255
    14f2:	8b a7       	std	Y+43, r24	; 0x2b
    14f4:	8b a5       	ldd	r24, Y+43	; 0x2b
    14f6:	85 30       	cpi	r24, 0x05	; 5
    14f8:	b0 f2       	brcs	.-84     	; 0x14a6 <createPass+0x368>

		UART_sendByte(MC1_ASK);
		while(UART_recieveByte() != MC2_READY);
		UART_sendByte(repass[i]);
	}
}
    14fa:	e7 96       	adiw	r28, 0x37	; 55
    14fc:	0f b6       	in	r0, 0x3f	; 63
    14fe:	f8 94       	cli
    1500:	de bf       	out	0x3e, r29	; 62
    1502:	0f be       	out	0x3f, r0	; 63
    1504:	cd bf       	out	0x3d, r28	; 61
    1506:	cf 91       	pop	r28
    1508:	df 91       	pop	r29
    150a:	1f 91       	pop	r17
    150c:	0f 91       	pop	r16
    150e:	08 95       	ret

00001510 <GPIO_setupPinDirection>:
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */

void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1510:	df 93       	push	r29
    1512:	cf 93       	push	r28
    1514:	cd b7       	in	r28, 0x3d	; 61
    1516:	de b7       	in	r29, 0x3e	; 62
    1518:	2d 97       	sbiw	r28, 0x0d	; 13
    151a:	0f b6       	in	r0, 0x3f	; 63
    151c:	f8 94       	cli
    151e:	de bf       	out	0x3e, r29	; 62
    1520:	0f be       	out	0x3f, r0	; 63
    1522:	cd bf       	out	0x3d, r28	; 61
    1524:	89 83       	std	Y+1, r24	; 0x01
    1526:	6a 83       	std	Y+2, r22	; 0x02
    1528:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	88 30       	cpi	r24, 0x08	; 8
    152e:	08 f0       	brcs	.+2      	; 0x1532 <GPIO_setupPinDirection+0x22>
    1530:	a9 c2       	rjmp	.+1362   	; 0x1a84 <GPIO_setupPinDirection+0x574>
    1532:	89 81       	ldd	r24, Y+1	; 0x01
    1534:	84 30       	cpi	r24, 0x04	; 4
    1536:	08 f0       	brcs	.+2      	; 0x153a <GPIO_setupPinDirection+0x2a>
    1538:	a5 c2       	rjmp	.+1354   	; 0x1a84 <GPIO_setupPinDirection+0x574>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    153a:	89 81       	ldd	r24, Y+1	; 0x01
    153c:	28 2f       	mov	r18, r24
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	3d 87       	std	Y+13, r19	; 0x0d
    1542:	2c 87       	std	Y+12, r18	; 0x0c
    1544:	8c 85       	ldd	r24, Y+12	; 0x0c
    1546:	9d 85       	ldd	r25, Y+13	; 0x0d
    1548:	81 30       	cpi	r24, 0x01	; 1
    154a:	91 05       	cpc	r25, r1
    154c:	09 f4       	brne	.+2      	; 0x1550 <GPIO_setupPinDirection+0x40>
    154e:	b8 c0       	rjmp	.+368    	; 0x16c0 <GPIO_setupPinDirection+0x1b0>
    1550:	2c 85       	ldd	r18, Y+12	; 0x0c
    1552:	3d 85       	ldd	r19, Y+13	; 0x0d
    1554:	22 30       	cpi	r18, 0x02	; 2
    1556:	31 05       	cpc	r19, r1
    1558:	2c f4       	brge	.+10     	; 0x1564 <GPIO_setupPinDirection+0x54>
    155a:	8c 85       	ldd	r24, Y+12	; 0x0c
    155c:	9d 85       	ldd	r25, Y+13	; 0x0d
    155e:	00 97       	sbiw	r24, 0x00	; 0
    1560:	71 f0       	breq	.+28     	; 0x157e <GPIO_setupPinDirection+0x6e>
    1562:	90 c2       	rjmp	.+1312   	; 0x1a84 <GPIO_setupPinDirection+0x574>
    1564:	2c 85       	ldd	r18, Y+12	; 0x0c
    1566:	3d 85       	ldd	r19, Y+13	; 0x0d
    1568:	22 30       	cpi	r18, 0x02	; 2
    156a:	31 05       	cpc	r19, r1
    156c:	09 f4       	brne	.+2      	; 0x1570 <GPIO_setupPinDirection+0x60>
    156e:	49 c1       	rjmp	.+658    	; 0x1802 <GPIO_setupPinDirection+0x2f2>
    1570:	8c 85       	ldd	r24, Y+12	; 0x0c
    1572:	9d 85       	ldd	r25, Y+13	; 0x0d
    1574:	83 30       	cpi	r24, 0x03	; 3
    1576:	91 05       	cpc	r25, r1
    1578:	09 f4       	brne	.+2      	; 0x157c <GPIO_setupPinDirection+0x6c>
    157a:	e4 c1       	rjmp	.+968    	; 0x1944 <GPIO_setupPinDirection+0x434>
    157c:	83 c2       	rjmp	.+1286   	; 0x1a84 <GPIO_setupPinDirection+0x574>
		{
		case PORTA_ID:
		{
			switch(pin_num)
    157e:	8a 81       	ldd	r24, Y+2	; 0x02
    1580:	28 2f       	mov	r18, r24
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	3b 87       	std	Y+11, r19	; 0x0b
    1586:	2a 87       	std	Y+10, r18	; 0x0a
    1588:	8a 85       	ldd	r24, Y+10	; 0x0a
    158a:	9b 85       	ldd	r25, Y+11	; 0x0b
    158c:	83 30       	cpi	r24, 0x03	; 3
    158e:	91 05       	cpc	r25, r1
    1590:	09 f4       	brne	.+2      	; 0x1594 <GPIO_setupPinDirection+0x84>
    1592:	51 c0       	rjmp	.+162    	; 0x1636 <GPIO_setupPinDirection+0x126>
    1594:	2a 85       	ldd	r18, Y+10	; 0x0a
    1596:	3b 85       	ldd	r19, Y+11	; 0x0b
    1598:	24 30       	cpi	r18, 0x04	; 4
    159a:	31 05       	cpc	r19, r1
    159c:	7c f4       	brge	.+30     	; 0x15bc <GPIO_setupPinDirection+0xac>
    159e:	8a 85       	ldd	r24, Y+10	; 0x0a
    15a0:	9b 85       	ldd	r25, Y+11	; 0x0b
    15a2:	81 30       	cpi	r24, 0x01	; 1
    15a4:	91 05       	cpc	r25, r1
    15a6:	71 f1       	breq	.+92     	; 0x1604 <GPIO_setupPinDirection+0xf4>
    15a8:	2a 85       	ldd	r18, Y+10	; 0x0a
    15aa:	3b 85       	ldd	r19, Y+11	; 0x0b
    15ac:	22 30       	cpi	r18, 0x02	; 2
    15ae:	31 05       	cpc	r19, r1
    15b0:	ac f5       	brge	.+106    	; 0x161c <GPIO_setupPinDirection+0x10c>
    15b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    15b4:	9b 85       	ldd	r25, Y+11	; 0x0b
    15b6:	00 97       	sbiw	r24, 0x00	; 0
    15b8:	d1 f0       	breq	.+52     	; 0x15ee <GPIO_setupPinDirection+0xde>
    15ba:	64 c2       	rjmp	.+1224   	; 0x1a84 <GPIO_setupPinDirection+0x574>
    15bc:	2a 85       	ldd	r18, Y+10	; 0x0a
    15be:	3b 85       	ldd	r19, Y+11	; 0x0b
    15c0:	25 30       	cpi	r18, 0x05	; 5
    15c2:	31 05       	cpc	r19, r1
    15c4:	09 f4       	brne	.+2      	; 0x15c8 <GPIO_setupPinDirection+0xb8>
    15c6:	52 c0       	rjmp	.+164    	; 0x166c <GPIO_setupPinDirection+0x15c>
    15c8:	8a 85       	ldd	r24, Y+10	; 0x0a
    15ca:	9b 85       	ldd	r25, Y+11	; 0x0b
    15cc:	85 30       	cpi	r24, 0x05	; 5
    15ce:	91 05       	cpc	r25, r1
    15d0:	0c f4       	brge	.+2      	; 0x15d4 <GPIO_setupPinDirection+0xc4>
    15d2:	3f c0       	rjmp	.+126    	; 0x1652 <GPIO_setupPinDirection+0x142>
    15d4:	2a 85       	ldd	r18, Y+10	; 0x0a
    15d6:	3b 85       	ldd	r19, Y+11	; 0x0b
    15d8:	26 30       	cpi	r18, 0x06	; 6
    15da:	31 05       	cpc	r19, r1
    15dc:	09 f4       	brne	.+2      	; 0x15e0 <GPIO_setupPinDirection+0xd0>
    15de:	54 c0       	rjmp	.+168    	; 0x1688 <GPIO_setupPinDirection+0x178>
    15e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    15e2:	9b 85       	ldd	r25, Y+11	; 0x0b
    15e4:	87 30       	cpi	r24, 0x07	; 7
    15e6:	91 05       	cpc	r25, r1
    15e8:	09 f4       	brne	.+2      	; 0x15ec <GPIO_setupPinDirection+0xdc>
    15ea:	5d c0       	rjmp	.+186    	; 0x16a6 <GPIO_setupPinDirection+0x196>
    15ec:	4b c2       	rjmp	.+1174   	; 0x1a84 <GPIO_setupPinDirection+0x574>
			{
			case 0:
				DDRA_REG.Bits.Bit0 = direction;
    15ee:	ea e3       	ldi	r30, 0x3A	; 58
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	8b 81       	ldd	r24, Y+3	; 0x03
    15f4:	81 70       	andi	r24, 0x01	; 1
    15f6:	98 2f       	mov	r25, r24
    15f8:	91 70       	andi	r25, 0x01	; 1
    15fa:	80 81       	ld	r24, Z
    15fc:	8e 7f       	andi	r24, 0xFE	; 254
    15fe:	89 2b       	or	r24, r25
    1600:	80 83       	st	Z, r24
    1602:	40 c2       	rjmp	.+1152   	; 0x1a84 <GPIO_setupPinDirection+0x574>
				break;
			case 1:
				DDRA_REG.Bits.Bit1 = direction;
    1604:	ea e3       	ldi	r30, 0x3A	; 58
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	8b 81       	ldd	r24, Y+3	; 0x03
    160a:	81 70       	andi	r24, 0x01	; 1
    160c:	81 70       	andi	r24, 0x01	; 1
    160e:	98 2f       	mov	r25, r24
    1610:	99 0f       	add	r25, r25
    1612:	80 81       	ld	r24, Z
    1614:	8d 7f       	andi	r24, 0xFD	; 253
    1616:	89 2b       	or	r24, r25
    1618:	80 83       	st	Z, r24
    161a:	34 c2       	rjmp	.+1128   	; 0x1a84 <GPIO_setupPinDirection+0x574>
				break;
			case 2:
				DDRA_REG.Bits.Bit2 = direction;
    161c:	ea e3       	ldi	r30, 0x3A	; 58
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	8b 81       	ldd	r24, Y+3	; 0x03
    1622:	81 70       	andi	r24, 0x01	; 1
    1624:	81 70       	andi	r24, 0x01	; 1
    1626:	98 2f       	mov	r25, r24
    1628:	99 0f       	add	r25, r25
    162a:	99 0f       	add	r25, r25
    162c:	80 81       	ld	r24, Z
    162e:	8b 7f       	andi	r24, 0xFB	; 251
    1630:	89 2b       	or	r24, r25
    1632:	80 83       	st	Z, r24
    1634:	27 c2       	rjmp	.+1102   	; 0x1a84 <GPIO_setupPinDirection+0x574>
				break;
			case 3:
				DDRA_REG.Bits.Bit3 = direction;
    1636:	ea e3       	ldi	r30, 0x3A	; 58
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	8b 81       	ldd	r24, Y+3	; 0x03
    163c:	81 70       	andi	r24, 0x01	; 1
    163e:	81 70       	andi	r24, 0x01	; 1
    1640:	98 2f       	mov	r25, r24
    1642:	99 0f       	add	r25, r25
    1644:	99 0f       	add	r25, r25
    1646:	99 0f       	add	r25, r25
    1648:	80 81       	ld	r24, Z
    164a:	87 7f       	andi	r24, 0xF7	; 247
    164c:	89 2b       	or	r24, r25
    164e:	80 83       	st	Z, r24
    1650:	19 c2       	rjmp	.+1074   	; 0x1a84 <GPIO_setupPinDirection+0x574>
				break;
			case 4:
				DDRA_REG.Bits.Bit4 = direction;
    1652:	ea e3       	ldi	r30, 0x3A	; 58
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	8b 81       	ldd	r24, Y+3	; 0x03
    1658:	81 70       	andi	r24, 0x01	; 1
    165a:	81 70       	andi	r24, 0x01	; 1
    165c:	98 2f       	mov	r25, r24
    165e:	92 95       	swap	r25
    1660:	90 7f       	andi	r25, 0xF0	; 240
    1662:	80 81       	ld	r24, Z
    1664:	8f 7e       	andi	r24, 0xEF	; 239
    1666:	89 2b       	or	r24, r25
    1668:	80 83       	st	Z, r24
    166a:	0c c2       	rjmp	.+1048   	; 0x1a84 <GPIO_setupPinDirection+0x574>
				break;
			case 5:
				DDRA_REG.Bits.Bit5 = direction;
    166c:	ea e3       	ldi	r30, 0x3A	; 58
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	8b 81       	ldd	r24, Y+3	; 0x03
    1672:	81 70       	andi	r24, 0x01	; 1
    1674:	81 70       	andi	r24, 0x01	; 1
    1676:	98 2f       	mov	r25, r24
    1678:	92 95       	swap	r25
    167a:	99 0f       	add	r25, r25
    167c:	90 7e       	andi	r25, 0xE0	; 224
    167e:	80 81       	ld	r24, Z
    1680:	8f 7d       	andi	r24, 0xDF	; 223
    1682:	89 2b       	or	r24, r25
    1684:	80 83       	st	Z, r24
    1686:	fe c1       	rjmp	.+1020   	; 0x1a84 <GPIO_setupPinDirection+0x574>
				break;
			case 6:
				DDRA_REG.Bits.Bit6 = direction;
    1688:	ea e3       	ldi	r30, 0x3A	; 58
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	8b 81       	ldd	r24, Y+3	; 0x03
    168e:	81 70       	andi	r24, 0x01	; 1
    1690:	81 70       	andi	r24, 0x01	; 1
    1692:	98 2f       	mov	r25, r24
    1694:	92 95       	swap	r25
    1696:	99 0f       	add	r25, r25
    1698:	99 0f       	add	r25, r25
    169a:	90 7c       	andi	r25, 0xC0	; 192
    169c:	80 81       	ld	r24, Z
    169e:	8f 7b       	andi	r24, 0xBF	; 191
    16a0:	89 2b       	or	r24, r25
    16a2:	80 83       	st	Z, r24
    16a4:	ef c1       	rjmp	.+990    	; 0x1a84 <GPIO_setupPinDirection+0x574>
				break;
			case 7:
				DDRA_REG.Bits.Bit7 = direction;
    16a6:	ea e3       	ldi	r30, 0x3A	; 58
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	8b 81       	ldd	r24, Y+3	; 0x03
    16ac:	81 70       	andi	r24, 0x01	; 1
    16ae:	98 2f       	mov	r25, r24
    16b0:	97 95       	ror	r25
    16b2:	99 27       	eor	r25, r25
    16b4:	97 95       	ror	r25
    16b6:	80 81       	ld	r24, Z
    16b8:	8f 77       	andi	r24, 0x7F	; 127
    16ba:	89 2b       	or	r24, r25
    16bc:	80 83       	st	Z, r24
    16be:	e2 c1       	rjmp	.+964    	; 0x1a84 <GPIO_setupPinDirection+0x574>
			}
			break;
		}
		case PORTB_ID:
		{
			switch(pin_num)
    16c0:	8a 81       	ldd	r24, Y+2	; 0x02
    16c2:	28 2f       	mov	r18, r24
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	39 87       	std	Y+9, r19	; 0x09
    16c8:	28 87       	std	Y+8, r18	; 0x08
    16ca:	88 85       	ldd	r24, Y+8	; 0x08
    16cc:	99 85       	ldd	r25, Y+9	; 0x09
    16ce:	83 30       	cpi	r24, 0x03	; 3
    16d0:	91 05       	cpc	r25, r1
    16d2:	09 f4       	brne	.+2      	; 0x16d6 <GPIO_setupPinDirection+0x1c6>
    16d4:	51 c0       	rjmp	.+162    	; 0x1778 <GPIO_setupPinDirection+0x268>
    16d6:	28 85       	ldd	r18, Y+8	; 0x08
    16d8:	39 85       	ldd	r19, Y+9	; 0x09
    16da:	24 30       	cpi	r18, 0x04	; 4
    16dc:	31 05       	cpc	r19, r1
    16de:	7c f4       	brge	.+30     	; 0x16fe <GPIO_setupPinDirection+0x1ee>
    16e0:	88 85       	ldd	r24, Y+8	; 0x08
    16e2:	99 85       	ldd	r25, Y+9	; 0x09
    16e4:	81 30       	cpi	r24, 0x01	; 1
    16e6:	91 05       	cpc	r25, r1
    16e8:	71 f1       	breq	.+92     	; 0x1746 <GPIO_setupPinDirection+0x236>
    16ea:	28 85       	ldd	r18, Y+8	; 0x08
    16ec:	39 85       	ldd	r19, Y+9	; 0x09
    16ee:	22 30       	cpi	r18, 0x02	; 2
    16f0:	31 05       	cpc	r19, r1
    16f2:	ac f5       	brge	.+106    	; 0x175e <GPIO_setupPinDirection+0x24e>
    16f4:	88 85       	ldd	r24, Y+8	; 0x08
    16f6:	99 85       	ldd	r25, Y+9	; 0x09
    16f8:	00 97       	sbiw	r24, 0x00	; 0
    16fa:	d1 f0       	breq	.+52     	; 0x1730 <GPIO_setupPinDirection+0x220>
    16fc:	c3 c1       	rjmp	.+902    	; 0x1a84 <GPIO_setupPinDirection+0x574>
    16fe:	28 85       	ldd	r18, Y+8	; 0x08
    1700:	39 85       	ldd	r19, Y+9	; 0x09
    1702:	25 30       	cpi	r18, 0x05	; 5
    1704:	31 05       	cpc	r19, r1
    1706:	09 f4       	brne	.+2      	; 0x170a <GPIO_setupPinDirection+0x1fa>
    1708:	52 c0       	rjmp	.+164    	; 0x17ae <GPIO_setupPinDirection+0x29e>
    170a:	88 85       	ldd	r24, Y+8	; 0x08
    170c:	99 85       	ldd	r25, Y+9	; 0x09
    170e:	85 30       	cpi	r24, 0x05	; 5
    1710:	91 05       	cpc	r25, r1
    1712:	0c f4       	brge	.+2      	; 0x1716 <GPIO_setupPinDirection+0x206>
    1714:	3f c0       	rjmp	.+126    	; 0x1794 <GPIO_setupPinDirection+0x284>
    1716:	28 85       	ldd	r18, Y+8	; 0x08
    1718:	39 85       	ldd	r19, Y+9	; 0x09
    171a:	26 30       	cpi	r18, 0x06	; 6
    171c:	31 05       	cpc	r19, r1
    171e:	09 f4       	brne	.+2      	; 0x1722 <GPIO_setupPinDirection+0x212>
    1720:	54 c0       	rjmp	.+168    	; 0x17ca <GPIO_setupPinDirection+0x2ba>
    1722:	88 85       	ldd	r24, Y+8	; 0x08
    1724:	99 85       	ldd	r25, Y+9	; 0x09
    1726:	87 30       	cpi	r24, 0x07	; 7
    1728:	91 05       	cpc	r25, r1
    172a:	09 f4       	brne	.+2      	; 0x172e <GPIO_setupPinDirection+0x21e>
    172c:	5d c0       	rjmp	.+186    	; 0x17e8 <GPIO_setupPinDirection+0x2d8>
    172e:	aa c1       	rjmp	.+852    	; 0x1a84 <GPIO_setupPinDirection+0x574>
			{
			case 0:
				DDRB_REG.Bits.Bit0 = direction;
    1730:	e7 e3       	ldi	r30, 0x37	; 55
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	8b 81       	ldd	r24, Y+3	; 0x03
    1736:	81 70       	andi	r24, 0x01	; 1
    1738:	98 2f       	mov	r25, r24
    173a:	91 70       	andi	r25, 0x01	; 1
    173c:	80 81       	ld	r24, Z
    173e:	8e 7f       	andi	r24, 0xFE	; 254
    1740:	89 2b       	or	r24, r25
    1742:	80 83       	st	Z, r24
    1744:	9f c1       	rjmp	.+830    	; 0x1a84 <GPIO_setupPinDirection+0x574>
				break;
			case 1:
				DDRB_REG.Bits.Bit1 = direction;
    1746:	e7 e3       	ldi	r30, 0x37	; 55
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	8b 81       	ldd	r24, Y+3	; 0x03
    174c:	81 70       	andi	r24, 0x01	; 1
    174e:	81 70       	andi	r24, 0x01	; 1
    1750:	98 2f       	mov	r25, r24
    1752:	99 0f       	add	r25, r25
    1754:	80 81       	ld	r24, Z
    1756:	8d 7f       	andi	r24, 0xFD	; 253
    1758:	89 2b       	or	r24, r25
    175a:	80 83       	st	Z, r24
    175c:	93 c1       	rjmp	.+806    	; 0x1a84 <GPIO_setupPinDirection+0x574>
				break;
			case 2:
				DDRB_REG.Bits.Bit2 = direction;
    175e:	e7 e3       	ldi	r30, 0x37	; 55
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	8b 81       	ldd	r24, Y+3	; 0x03
    1764:	81 70       	andi	r24, 0x01	; 1
    1766:	81 70       	andi	r24, 0x01	; 1
    1768:	98 2f       	mov	r25, r24
    176a:	99 0f       	add	r25, r25
    176c:	99 0f       	add	r25, r25
    176e:	80 81       	ld	r24, Z
    1770:	8b 7f       	andi	r24, 0xFB	; 251
    1772:	89 2b       	or	r24, r25
    1774:	80 83       	st	Z, r24
    1776:	86 c1       	rjmp	.+780    	; 0x1a84 <GPIO_setupPinDirection+0x574>
				break;
			case 3:
				DDRB_REG.Bits.Bit3 = direction;
    1778:	e7 e3       	ldi	r30, 0x37	; 55
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	8b 81       	ldd	r24, Y+3	; 0x03
    177e:	81 70       	andi	r24, 0x01	; 1
    1780:	81 70       	andi	r24, 0x01	; 1
    1782:	98 2f       	mov	r25, r24
    1784:	99 0f       	add	r25, r25
    1786:	99 0f       	add	r25, r25
    1788:	99 0f       	add	r25, r25
    178a:	80 81       	ld	r24, Z
    178c:	87 7f       	andi	r24, 0xF7	; 247
    178e:	89 2b       	or	r24, r25
    1790:	80 83       	st	Z, r24
    1792:	78 c1       	rjmp	.+752    	; 0x1a84 <GPIO_setupPinDirection+0x574>
				break;
			case 4:
				DDRB_REG.Bits.Bit4 = direction;
    1794:	e7 e3       	ldi	r30, 0x37	; 55
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	8b 81       	ldd	r24, Y+3	; 0x03
    179a:	81 70       	andi	r24, 0x01	; 1
    179c:	81 70       	andi	r24, 0x01	; 1
    179e:	98 2f       	mov	r25, r24
    17a0:	92 95       	swap	r25
    17a2:	90 7f       	andi	r25, 0xF0	; 240
    17a4:	80 81       	ld	r24, Z
    17a6:	8f 7e       	andi	r24, 0xEF	; 239
    17a8:	89 2b       	or	r24, r25
    17aa:	80 83       	st	Z, r24
    17ac:	6b c1       	rjmp	.+726    	; 0x1a84 <GPIO_setupPinDirection+0x574>
				break;
			case 5:
				DDRB_REG.Bits.Bit5 = direction;
    17ae:	e7 e3       	ldi	r30, 0x37	; 55
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	8b 81       	ldd	r24, Y+3	; 0x03
    17b4:	81 70       	andi	r24, 0x01	; 1
    17b6:	81 70       	andi	r24, 0x01	; 1
    17b8:	98 2f       	mov	r25, r24
    17ba:	92 95       	swap	r25
    17bc:	99 0f       	add	r25, r25
    17be:	90 7e       	andi	r25, 0xE0	; 224
    17c0:	80 81       	ld	r24, Z
    17c2:	8f 7d       	andi	r24, 0xDF	; 223
    17c4:	89 2b       	or	r24, r25
    17c6:	80 83       	st	Z, r24
    17c8:	5d c1       	rjmp	.+698    	; 0x1a84 <GPIO_setupPinDirection+0x574>
				break;
			case 6:
				DDRB_REG.Bits.Bit6 = direction;
    17ca:	e7 e3       	ldi	r30, 0x37	; 55
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	8b 81       	ldd	r24, Y+3	; 0x03
    17d0:	81 70       	andi	r24, 0x01	; 1
    17d2:	81 70       	andi	r24, 0x01	; 1
    17d4:	98 2f       	mov	r25, r24
    17d6:	92 95       	swap	r25
    17d8:	99 0f       	add	r25, r25
    17da:	99 0f       	add	r25, r25
    17dc:	90 7c       	andi	r25, 0xC0	; 192
    17de:	80 81       	ld	r24, Z
    17e0:	8f 7b       	andi	r24, 0xBF	; 191
    17e2:	89 2b       	or	r24, r25
    17e4:	80 83       	st	Z, r24
    17e6:	4e c1       	rjmp	.+668    	; 0x1a84 <GPIO_setupPinDirection+0x574>
				break;
			case 7:
				DDRB_REG.Bits.Bit7 = direction;
    17e8:	e7 e3       	ldi	r30, 0x37	; 55
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	8b 81       	ldd	r24, Y+3	; 0x03
    17ee:	81 70       	andi	r24, 0x01	; 1
    17f0:	98 2f       	mov	r25, r24
    17f2:	97 95       	ror	r25
    17f4:	99 27       	eor	r25, r25
    17f6:	97 95       	ror	r25
    17f8:	80 81       	ld	r24, Z
    17fa:	8f 77       	andi	r24, 0x7F	; 127
    17fc:	89 2b       	or	r24, r25
    17fe:	80 83       	st	Z, r24
    1800:	41 c1       	rjmp	.+642    	; 0x1a84 <GPIO_setupPinDirection+0x574>
			}
			break;
		}
		case PORTC_ID:
		{
			switch(pin_num)
    1802:	8a 81       	ldd	r24, Y+2	; 0x02
    1804:	28 2f       	mov	r18, r24
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	3f 83       	std	Y+7, r19	; 0x07
    180a:	2e 83       	std	Y+6, r18	; 0x06
    180c:	8e 81       	ldd	r24, Y+6	; 0x06
    180e:	9f 81       	ldd	r25, Y+7	; 0x07
    1810:	83 30       	cpi	r24, 0x03	; 3
    1812:	91 05       	cpc	r25, r1
    1814:	09 f4       	brne	.+2      	; 0x1818 <GPIO_setupPinDirection+0x308>
    1816:	51 c0       	rjmp	.+162    	; 0x18ba <GPIO_setupPinDirection+0x3aa>
    1818:	2e 81       	ldd	r18, Y+6	; 0x06
    181a:	3f 81       	ldd	r19, Y+7	; 0x07
    181c:	24 30       	cpi	r18, 0x04	; 4
    181e:	31 05       	cpc	r19, r1
    1820:	7c f4       	brge	.+30     	; 0x1840 <GPIO_setupPinDirection+0x330>
    1822:	8e 81       	ldd	r24, Y+6	; 0x06
    1824:	9f 81       	ldd	r25, Y+7	; 0x07
    1826:	81 30       	cpi	r24, 0x01	; 1
    1828:	91 05       	cpc	r25, r1
    182a:	71 f1       	breq	.+92     	; 0x1888 <GPIO_setupPinDirection+0x378>
    182c:	2e 81       	ldd	r18, Y+6	; 0x06
    182e:	3f 81       	ldd	r19, Y+7	; 0x07
    1830:	22 30       	cpi	r18, 0x02	; 2
    1832:	31 05       	cpc	r19, r1
    1834:	ac f5       	brge	.+106    	; 0x18a0 <GPIO_setupPinDirection+0x390>
    1836:	8e 81       	ldd	r24, Y+6	; 0x06
    1838:	9f 81       	ldd	r25, Y+7	; 0x07
    183a:	00 97       	sbiw	r24, 0x00	; 0
    183c:	d1 f0       	breq	.+52     	; 0x1872 <GPIO_setupPinDirection+0x362>
    183e:	22 c1       	rjmp	.+580    	; 0x1a84 <GPIO_setupPinDirection+0x574>
    1840:	2e 81       	ldd	r18, Y+6	; 0x06
    1842:	3f 81       	ldd	r19, Y+7	; 0x07
    1844:	25 30       	cpi	r18, 0x05	; 5
    1846:	31 05       	cpc	r19, r1
    1848:	09 f4       	brne	.+2      	; 0x184c <GPIO_setupPinDirection+0x33c>
    184a:	52 c0       	rjmp	.+164    	; 0x18f0 <GPIO_setupPinDirection+0x3e0>
    184c:	8e 81       	ldd	r24, Y+6	; 0x06
    184e:	9f 81       	ldd	r25, Y+7	; 0x07
    1850:	85 30       	cpi	r24, 0x05	; 5
    1852:	91 05       	cpc	r25, r1
    1854:	0c f4       	brge	.+2      	; 0x1858 <GPIO_setupPinDirection+0x348>
    1856:	3f c0       	rjmp	.+126    	; 0x18d6 <GPIO_setupPinDirection+0x3c6>
    1858:	2e 81       	ldd	r18, Y+6	; 0x06
    185a:	3f 81       	ldd	r19, Y+7	; 0x07
    185c:	26 30       	cpi	r18, 0x06	; 6
    185e:	31 05       	cpc	r19, r1
    1860:	09 f4       	brne	.+2      	; 0x1864 <GPIO_setupPinDirection+0x354>
    1862:	54 c0       	rjmp	.+168    	; 0x190c <GPIO_setupPinDirection+0x3fc>
    1864:	8e 81       	ldd	r24, Y+6	; 0x06
    1866:	9f 81       	ldd	r25, Y+7	; 0x07
    1868:	87 30       	cpi	r24, 0x07	; 7
    186a:	91 05       	cpc	r25, r1
    186c:	09 f4       	brne	.+2      	; 0x1870 <GPIO_setupPinDirection+0x360>
    186e:	5d c0       	rjmp	.+186    	; 0x192a <GPIO_setupPinDirection+0x41a>
    1870:	09 c1       	rjmp	.+530    	; 0x1a84 <GPIO_setupPinDirection+0x574>
			{
			case 0:
				DDRC_REG.Bits.Bit0 = direction;
    1872:	e4 e3       	ldi	r30, 0x34	; 52
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	8b 81       	ldd	r24, Y+3	; 0x03
    1878:	81 70       	andi	r24, 0x01	; 1
    187a:	98 2f       	mov	r25, r24
    187c:	91 70       	andi	r25, 0x01	; 1
    187e:	80 81       	ld	r24, Z
    1880:	8e 7f       	andi	r24, 0xFE	; 254
    1882:	89 2b       	or	r24, r25
    1884:	80 83       	st	Z, r24
    1886:	fe c0       	rjmp	.+508    	; 0x1a84 <GPIO_setupPinDirection+0x574>
				break;
			case 1:
				DDRC_REG.Bits.Bit1 = direction;
    1888:	e4 e3       	ldi	r30, 0x34	; 52
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	8b 81       	ldd	r24, Y+3	; 0x03
    188e:	81 70       	andi	r24, 0x01	; 1
    1890:	81 70       	andi	r24, 0x01	; 1
    1892:	98 2f       	mov	r25, r24
    1894:	99 0f       	add	r25, r25
    1896:	80 81       	ld	r24, Z
    1898:	8d 7f       	andi	r24, 0xFD	; 253
    189a:	89 2b       	or	r24, r25
    189c:	80 83       	st	Z, r24
    189e:	f2 c0       	rjmp	.+484    	; 0x1a84 <GPIO_setupPinDirection+0x574>
				break;
			case 2:
				DDRC_REG.Bits.Bit2 = direction;
    18a0:	e4 e3       	ldi	r30, 0x34	; 52
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	8b 81       	ldd	r24, Y+3	; 0x03
    18a6:	81 70       	andi	r24, 0x01	; 1
    18a8:	81 70       	andi	r24, 0x01	; 1
    18aa:	98 2f       	mov	r25, r24
    18ac:	99 0f       	add	r25, r25
    18ae:	99 0f       	add	r25, r25
    18b0:	80 81       	ld	r24, Z
    18b2:	8b 7f       	andi	r24, 0xFB	; 251
    18b4:	89 2b       	or	r24, r25
    18b6:	80 83       	st	Z, r24
    18b8:	e5 c0       	rjmp	.+458    	; 0x1a84 <GPIO_setupPinDirection+0x574>
				break;
			case 3:
				DDRC_REG.Bits.Bit3 = direction;
    18ba:	e4 e3       	ldi	r30, 0x34	; 52
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	8b 81       	ldd	r24, Y+3	; 0x03
    18c0:	81 70       	andi	r24, 0x01	; 1
    18c2:	81 70       	andi	r24, 0x01	; 1
    18c4:	98 2f       	mov	r25, r24
    18c6:	99 0f       	add	r25, r25
    18c8:	99 0f       	add	r25, r25
    18ca:	99 0f       	add	r25, r25
    18cc:	80 81       	ld	r24, Z
    18ce:	87 7f       	andi	r24, 0xF7	; 247
    18d0:	89 2b       	or	r24, r25
    18d2:	80 83       	st	Z, r24
    18d4:	d7 c0       	rjmp	.+430    	; 0x1a84 <GPIO_setupPinDirection+0x574>
				break;
			case 4:
				DDRC_REG.Bits.Bit4 = direction;
    18d6:	e4 e3       	ldi	r30, 0x34	; 52
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	8b 81       	ldd	r24, Y+3	; 0x03
    18dc:	81 70       	andi	r24, 0x01	; 1
    18de:	81 70       	andi	r24, 0x01	; 1
    18e0:	98 2f       	mov	r25, r24
    18e2:	92 95       	swap	r25
    18e4:	90 7f       	andi	r25, 0xF0	; 240
    18e6:	80 81       	ld	r24, Z
    18e8:	8f 7e       	andi	r24, 0xEF	; 239
    18ea:	89 2b       	or	r24, r25
    18ec:	80 83       	st	Z, r24
    18ee:	ca c0       	rjmp	.+404    	; 0x1a84 <GPIO_setupPinDirection+0x574>
				break;
			case 5:
				DDRC_REG.Bits.Bit5 = direction;
    18f0:	e4 e3       	ldi	r30, 0x34	; 52
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	8b 81       	ldd	r24, Y+3	; 0x03
    18f6:	81 70       	andi	r24, 0x01	; 1
    18f8:	81 70       	andi	r24, 0x01	; 1
    18fa:	98 2f       	mov	r25, r24
    18fc:	92 95       	swap	r25
    18fe:	99 0f       	add	r25, r25
    1900:	90 7e       	andi	r25, 0xE0	; 224
    1902:	80 81       	ld	r24, Z
    1904:	8f 7d       	andi	r24, 0xDF	; 223
    1906:	89 2b       	or	r24, r25
    1908:	80 83       	st	Z, r24
    190a:	bc c0       	rjmp	.+376    	; 0x1a84 <GPIO_setupPinDirection+0x574>
				break;
			case 6:
				DDRC_REG.Bits.Bit6 = direction;
    190c:	e4 e3       	ldi	r30, 0x34	; 52
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	8b 81       	ldd	r24, Y+3	; 0x03
    1912:	81 70       	andi	r24, 0x01	; 1
    1914:	81 70       	andi	r24, 0x01	; 1
    1916:	98 2f       	mov	r25, r24
    1918:	92 95       	swap	r25
    191a:	99 0f       	add	r25, r25
    191c:	99 0f       	add	r25, r25
    191e:	90 7c       	andi	r25, 0xC0	; 192
    1920:	80 81       	ld	r24, Z
    1922:	8f 7b       	andi	r24, 0xBF	; 191
    1924:	89 2b       	or	r24, r25
    1926:	80 83       	st	Z, r24
    1928:	ad c0       	rjmp	.+346    	; 0x1a84 <GPIO_setupPinDirection+0x574>
				break;
			case 7:
				DDRC_REG.Bits.Bit7 = direction;
    192a:	e4 e3       	ldi	r30, 0x34	; 52
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	8b 81       	ldd	r24, Y+3	; 0x03
    1930:	81 70       	andi	r24, 0x01	; 1
    1932:	98 2f       	mov	r25, r24
    1934:	97 95       	ror	r25
    1936:	99 27       	eor	r25, r25
    1938:	97 95       	ror	r25
    193a:	80 81       	ld	r24, Z
    193c:	8f 77       	andi	r24, 0x7F	; 127
    193e:	89 2b       	or	r24, r25
    1940:	80 83       	st	Z, r24
    1942:	a0 c0       	rjmp	.+320    	; 0x1a84 <GPIO_setupPinDirection+0x574>
			}
			break;
		}
		case PORTD_ID:
		{
			switch(pin_num)
    1944:	8a 81       	ldd	r24, Y+2	; 0x02
    1946:	28 2f       	mov	r18, r24
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	3d 83       	std	Y+5, r19	; 0x05
    194c:	2c 83       	std	Y+4, r18	; 0x04
    194e:	8c 81       	ldd	r24, Y+4	; 0x04
    1950:	9d 81       	ldd	r25, Y+5	; 0x05
    1952:	83 30       	cpi	r24, 0x03	; 3
    1954:	91 05       	cpc	r25, r1
    1956:	09 f4       	brne	.+2      	; 0x195a <GPIO_setupPinDirection+0x44a>
    1958:	51 c0       	rjmp	.+162    	; 0x19fc <GPIO_setupPinDirection+0x4ec>
    195a:	2c 81       	ldd	r18, Y+4	; 0x04
    195c:	3d 81       	ldd	r19, Y+5	; 0x05
    195e:	24 30       	cpi	r18, 0x04	; 4
    1960:	31 05       	cpc	r19, r1
    1962:	7c f4       	brge	.+30     	; 0x1982 <GPIO_setupPinDirection+0x472>
    1964:	8c 81       	ldd	r24, Y+4	; 0x04
    1966:	9d 81       	ldd	r25, Y+5	; 0x05
    1968:	81 30       	cpi	r24, 0x01	; 1
    196a:	91 05       	cpc	r25, r1
    196c:	71 f1       	breq	.+92     	; 0x19ca <GPIO_setupPinDirection+0x4ba>
    196e:	2c 81       	ldd	r18, Y+4	; 0x04
    1970:	3d 81       	ldd	r19, Y+5	; 0x05
    1972:	22 30       	cpi	r18, 0x02	; 2
    1974:	31 05       	cpc	r19, r1
    1976:	ac f5       	brge	.+106    	; 0x19e2 <GPIO_setupPinDirection+0x4d2>
    1978:	8c 81       	ldd	r24, Y+4	; 0x04
    197a:	9d 81       	ldd	r25, Y+5	; 0x05
    197c:	00 97       	sbiw	r24, 0x00	; 0
    197e:	d1 f0       	breq	.+52     	; 0x19b4 <GPIO_setupPinDirection+0x4a4>
    1980:	81 c0       	rjmp	.+258    	; 0x1a84 <GPIO_setupPinDirection+0x574>
    1982:	2c 81       	ldd	r18, Y+4	; 0x04
    1984:	3d 81       	ldd	r19, Y+5	; 0x05
    1986:	25 30       	cpi	r18, 0x05	; 5
    1988:	31 05       	cpc	r19, r1
    198a:	09 f4       	brne	.+2      	; 0x198e <GPIO_setupPinDirection+0x47e>
    198c:	52 c0       	rjmp	.+164    	; 0x1a32 <GPIO_setupPinDirection+0x522>
    198e:	8c 81       	ldd	r24, Y+4	; 0x04
    1990:	9d 81       	ldd	r25, Y+5	; 0x05
    1992:	85 30       	cpi	r24, 0x05	; 5
    1994:	91 05       	cpc	r25, r1
    1996:	0c f4       	brge	.+2      	; 0x199a <GPIO_setupPinDirection+0x48a>
    1998:	3f c0       	rjmp	.+126    	; 0x1a18 <GPIO_setupPinDirection+0x508>
    199a:	2c 81       	ldd	r18, Y+4	; 0x04
    199c:	3d 81       	ldd	r19, Y+5	; 0x05
    199e:	26 30       	cpi	r18, 0x06	; 6
    19a0:	31 05       	cpc	r19, r1
    19a2:	09 f4       	brne	.+2      	; 0x19a6 <GPIO_setupPinDirection+0x496>
    19a4:	54 c0       	rjmp	.+168    	; 0x1a4e <GPIO_setupPinDirection+0x53e>
    19a6:	8c 81       	ldd	r24, Y+4	; 0x04
    19a8:	9d 81       	ldd	r25, Y+5	; 0x05
    19aa:	87 30       	cpi	r24, 0x07	; 7
    19ac:	91 05       	cpc	r25, r1
    19ae:	09 f4       	brne	.+2      	; 0x19b2 <GPIO_setupPinDirection+0x4a2>
    19b0:	5d c0       	rjmp	.+186    	; 0x1a6c <GPIO_setupPinDirection+0x55c>
    19b2:	68 c0       	rjmp	.+208    	; 0x1a84 <GPIO_setupPinDirection+0x574>
			{
			case 0:
				DDRD_REG.Bits.Bit0 = direction;
    19b4:	e1 e3       	ldi	r30, 0x31	; 49
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ba:	81 70       	andi	r24, 0x01	; 1
    19bc:	98 2f       	mov	r25, r24
    19be:	91 70       	andi	r25, 0x01	; 1
    19c0:	80 81       	ld	r24, Z
    19c2:	8e 7f       	andi	r24, 0xFE	; 254
    19c4:	89 2b       	or	r24, r25
    19c6:	80 83       	st	Z, r24
    19c8:	5d c0       	rjmp	.+186    	; 0x1a84 <GPIO_setupPinDirection+0x574>
				break;
			case 1:
				DDRD_REG.Bits.Bit1 = direction;
    19ca:	e1 e3       	ldi	r30, 0x31	; 49
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	8b 81       	ldd	r24, Y+3	; 0x03
    19d0:	81 70       	andi	r24, 0x01	; 1
    19d2:	81 70       	andi	r24, 0x01	; 1
    19d4:	98 2f       	mov	r25, r24
    19d6:	99 0f       	add	r25, r25
    19d8:	80 81       	ld	r24, Z
    19da:	8d 7f       	andi	r24, 0xFD	; 253
    19dc:	89 2b       	or	r24, r25
    19de:	80 83       	st	Z, r24
    19e0:	51 c0       	rjmp	.+162    	; 0x1a84 <GPIO_setupPinDirection+0x574>
				break;
			case 2:
				DDRD_REG.Bits.Bit2 = direction;
    19e2:	e1 e3       	ldi	r30, 0x31	; 49
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	8b 81       	ldd	r24, Y+3	; 0x03
    19e8:	81 70       	andi	r24, 0x01	; 1
    19ea:	81 70       	andi	r24, 0x01	; 1
    19ec:	98 2f       	mov	r25, r24
    19ee:	99 0f       	add	r25, r25
    19f0:	99 0f       	add	r25, r25
    19f2:	80 81       	ld	r24, Z
    19f4:	8b 7f       	andi	r24, 0xFB	; 251
    19f6:	89 2b       	or	r24, r25
    19f8:	80 83       	st	Z, r24
    19fa:	44 c0       	rjmp	.+136    	; 0x1a84 <GPIO_setupPinDirection+0x574>
				break;
			case 3:
				DDRD_REG.Bits.Bit3 = direction;
    19fc:	e1 e3       	ldi	r30, 0x31	; 49
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	8b 81       	ldd	r24, Y+3	; 0x03
    1a02:	81 70       	andi	r24, 0x01	; 1
    1a04:	81 70       	andi	r24, 0x01	; 1
    1a06:	98 2f       	mov	r25, r24
    1a08:	99 0f       	add	r25, r25
    1a0a:	99 0f       	add	r25, r25
    1a0c:	99 0f       	add	r25, r25
    1a0e:	80 81       	ld	r24, Z
    1a10:	87 7f       	andi	r24, 0xF7	; 247
    1a12:	89 2b       	or	r24, r25
    1a14:	80 83       	st	Z, r24
    1a16:	36 c0       	rjmp	.+108    	; 0x1a84 <GPIO_setupPinDirection+0x574>
				break;
			case 4:
				DDRD_REG.Bits.Bit4 = direction;
    1a18:	e1 e3       	ldi	r30, 0x31	; 49
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1e:	81 70       	andi	r24, 0x01	; 1
    1a20:	81 70       	andi	r24, 0x01	; 1
    1a22:	98 2f       	mov	r25, r24
    1a24:	92 95       	swap	r25
    1a26:	90 7f       	andi	r25, 0xF0	; 240
    1a28:	80 81       	ld	r24, Z
    1a2a:	8f 7e       	andi	r24, 0xEF	; 239
    1a2c:	89 2b       	or	r24, r25
    1a2e:	80 83       	st	Z, r24
    1a30:	29 c0       	rjmp	.+82     	; 0x1a84 <GPIO_setupPinDirection+0x574>
				break;
			case 5:
				DDRD_REG.Bits.Bit5 = direction;
    1a32:	e1 e3       	ldi	r30, 0x31	; 49
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	8b 81       	ldd	r24, Y+3	; 0x03
    1a38:	81 70       	andi	r24, 0x01	; 1
    1a3a:	81 70       	andi	r24, 0x01	; 1
    1a3c:	98 2f       	mov	r25, r24
    1a3e:	92 95       	swap	r25
    1a40:	99 0f       	add	r25, r25
    1a42:	90 7e       	andi	r25, 0xE0	; 224
    1a44:	80 81       	ld	r24, Z
    1a46:	8f 7d       	andi	r24, 0xDF	; 223
    1a48:	89 2b       	or	r24, r25
    1a4a:	80 83       	st	Z, r24
    1a4c:	1b c0       	rjmp	.+54     	; 0x1a84 <GPIO_setupPinDirection+0x574>
				break;
			case 6:
				DDRD_REG.Bits.Bit6 = direction;
    1a4e:	e1 e3       	ldi	r30, 0x31	; 49
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	8b 81       	ldd	r24, Y+3	; 0x03
    1a54:	81 70       	andi	r24, 0x01	; 1
    1a56:	81 70       	andi	r24, 0x01	; 1
    1a58:	98 2f       	mov	r25, r24
    1a5a:	92 95       	swap	r25
    1a5c:	99 0f       	add	r25, r25
    1a5e:	99 0f       	add	r25, r25
    1a60:	90 7c       	andi	r25, 0xC0	; 192
    1a62:	80 81       	ld	r24, Z
    1a64:	8f 7b       	andi	r24, 0xBF	; 191
    1a66:	89 2b       	or	r24, r25
    1a68:	80 83       	st	Z, r24
    1a6a:	0c c0       	rjmp	.+24     	; 0x1a84 <GPIO_setupPinDirection+0x574>
				break;
			case 7:
				DDRD_REG.Bits.Bit7 = direction;
    1a6c:	e1 e3       	ldi	r30, 0x31	; 49
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	8b 81       	ldd	r24, Y+3	; 0x03
    1a72:	81 70       	andi	r24, 0x01	; 1
    1a74:	98 2f       	mov	r25, r24
    1a76:	97 95       	ror	r25
    1a78:	99 27       	eor	r25, r25
    1a7a:	97 95       	ror	r25
    1a7c:	80 81       	ld	r24, Z
    1a7e:	8f 77       	andi	r24, 0x7F	; 127
    1a80:	89 2b       	or	r24, r25
    1a82:	80 83       	st	Z, r24
			}
			break;
		}
		}
	}
}
    1a84:	2d 96       	adiw	r28, 0x0d	; 13
    1a86:	0f b6       	in	r0, 0x3f	; 63
    1a88:	f8 94       	cli
    1a8a:	de bf       	out	0x3e, r29	; 62
    1a8c:	0f be       	out	0x3f, r0	; 63
    1a8e:	cd bf       	out	0x3d, r28	; 61
    1a90:	cf 91       	pop	r28
    1a92:	df 91       	pop	r29
    1a94:	08 95       	ret

00001a96 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1a96:	df 93       	push	r29
    1a98:	cf 93       	push	r28
    1a9a:	cd b7       	in	r28, 0x3d	; 61
    1a9c:	de b7       	in	r29, 0x3e	; 62
    1a9e:	2d 97       	sbiw	r28, 0x0d	; 13
    1aa0:	0f b6       	in	r0, 0x3f	; 63
    1aa2:	f8 94       	cli
    1aa4:	de bf       	out	0x3e, r29	; 62
    1aa6:	0f be       	out	0x3f, r0	; 63
    1aa8:	cd bf       	out	0x3d, r28	; 61
    1aaa:	89 83       	std	Y+1, r24	; 0x01
    1aac:	6a 83       	std	Y+2, r22	; 0x02
    1aae:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1ab0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab2:	88 30       	cpi	r24, 0x08	; 8
    1ab4:	08 f0       	brcs	.+2      	; 0x1ab8 <GPIO_writePin+0x22>
    1ab6:	a9 c2       	rjmp	.+1362   	; 0x200a <GPIO_writePin+0x574>
    1ab8:	89 81       	ldd	r24, Y+1	; 0x01
    1aba:	84 30       	cpi	r24, 0x04	; 4
    1abc:	08 f0       	brcs	.+2      	; 0x1ac0 <GPIO_writePin+0x2a>
    1abe:	a5 c2       	rjmp	.+1354   	; 0x200a <GPIO_writePin+0x574>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1ac0:	89 81       	ldd	r24, Y+1	; 0x01
    1ac2:	28 2f       	mov	r18, r24
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	3d 87       	std	Y+13, r19	; 0x0d
    1ac8:	2c 87       	std	Y+12, r18	; 0x0c
    1aca:	8c 85       	ldd	r24, Y+12	; 0x0c
    1acc:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ace:	81 30       	cpi	r24, 0x01	; 1
    1ad0:	91 05       	cpc	r25, r1
    1ad2:	09 f4       	brne	.+2      	; 0x1ad6 <GPIO_writePin+0x40>
    1ad4:	b8 c0       	rjmp	.+368    	; 0x1c46 <GPIO_writePin+0x1b0>
    1ad6:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ad8:	3d 85       	ldd	r19, Y+13	; 0x0d
    1ada:	22 30       	cpi	r18, 0x02	; 2
    1adc:	31 05       	cpc	r19, r1
    1ade:	2c f4       	brge	.+10     	; 0x1aea <GPIO_writePin+0x54>
    1ae0:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ae2:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ae4:	00 97       	sbiw	r24, 0x00	; 0
    1ae6:	71 f0       	breq	.+28     	; 0x1b04 <GPIO_writePin+0x6e>
    1ae8:	90 c2       	rjmp	.+1312   	; 0x200a <GPIO_writePin+0x574>
    1aea:	2c 85       	ldd	r18, Y+12	; 0x0c
    1aec:	3d 85       	ldd	r19, Y+13	; 0x0d
    1aee:	22 30       	cpi	r18, 0x02	; 2
    1af0:	31 05       	cpc	r19, r1
    1af2:	09 f4       	brne	.+2      	; 0x1af6 <GPIO_writePin+0x60>
    1af4:	49 c1       	rjmp	.+658    	; 0x1d88 <GPIO_writePin+0x2f2>
    1af6:	8c 85       	ldd	r24, Y+12	; 0x0c
    1af8:	9d 85       	ldd	r25, Y+13	; 0x0d
    1afa:	83 30       	cpi	r24, 0x03	; 3
    1afc:	91 05       	cpc	r25, r1
    1afe:	09 f4       	brne	.+2      	; 0x1b02 <GPIO_writePin+0x6c>
    1b00:	e4 c1       	rjmp	.+968    	; 0x1eca <GPIO_writePin+0x434>
    1b02:	83 c2       	rjmp	.+1286   	; 0x200a <GPIO_writePin+0x574>
		{
		case PORTA_ID:
		{
			switch(pin_num)
    1b04:	8a 81       	ldd	r24, Y+2	; 0x02
    1b06:	28 2f       	mov	r18, r24
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	3b 87       	std	Y+11, r19	; 0x0b
    1b0c:	2a 87       	std	Y+10, r18	; 0x0a
    1b0e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b10:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b12:	83 30       	cpi	r24, 0x03	; 3
    1b14:	91 05       	cpc	r25, r1
    1b16:	09 f4       	brne	.+2      	; 0x1b1a <GPIO_writePin+0x84>
    1b18:	51 c0       	rjmp	.+162    	; 0x1bbc <GPIO_writePin+0x126>
    1b1a:	2a 85       	ldd	r18, Y+10	; 0x0a
    1b1c:	3b 85       	ldd	r19, Y+11	; 0x0b
    1b1e:	24 30       	cpi	r18, 0x04	; 4
    1b20:	31 05       	cpc	r19, r1
    1b22:	7c f4       	brge	.+30     	; 0x1b42 <GPIO_writePin+0xac>
    1b24:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b26:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b28:	81 30       	cpi	r24, 0x01	; 1
    1b2a:	91 05       	cpc	r25, r1
    1b2c:	71 f1       	breq	.+92     	; 0x1b8a <GPIO_writePin+0xf4>
    1b2e:	2a 85       	ldd	r18, Y+10	; 0x0a
    1b30:	3b 85       	ldd	r19, Y+11	; 0x0b
    1b32:	22 30       	cpi	r18, 0x02	; 2
    1b34:	31 05       	cpc	r19, r1
    1b36:	ac f5       	brge	.+106    	; 0x1ba2 <GPIO_writePin+0x10c>
    1b38:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b3a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b3c:	00 97       	sbiw	r24, 0x00	; 0
    1b3e:	d1 f0       	breq	.+52     	; 0x1b74 <GPIO_writePin+0xde>
    1b40:	64 c2       	rjmp	.+1224   	; 0x200a <GPIO_writePin+0x574>
    1b42:	2a 85       	ldd	r18, Y+10	; 0x0a
    1b44:	3b 85       	ldd	r19, Y+11	; 0x0b
    1b46:	25 30       	cpi	r18, 0x05	; 5
    1b48:	31 05       	cpc	r19, r1
    1b4a:	09 f4       	brne	.+2      	; 0x1b4e <GPIO_writePin+0xb8>
    1b4c:	52 c0       	rjmp	.+164    	; 0x1bf2 <GPIO_writePin+0x15c>
    1b4e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b50:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b52:	85 30       	cpi	r24, 0x05	; 5
    1b54:	91 05       	cpc	r25, r1
    1b56:	0c f4       	brge	.+2      	; 0x1b5a <GPIO_writePin+0xc4>
    1b58:	3f c0       	rjmp	.+126    	; 0x1bd8 <GPIO_writePin+0x142>
    1b5a:	2a 85       	ldd	r18, Y+10	; 0x0a
    1b5c:	3b 85       	ldd	r19, Y+11	; 0x0b
    1b5e:	26 30       	cpi	r18, 0x06	; 6
    1b60:	31 05       	cpc	r19, r1
    1b62:	09 f4       	brne	.+2      	; 0x1b66 <GPIO_writePin+0xd0>
    1b64:	54 c0       	rjmp	.+168    	; 0x1c0e <GPIO_writePin+0x178>
    1b66:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b68:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b6a:	87 30       	cpi	r24, 0x07	; 7
    1b6c:	91 05       	cpc	r25, r1
    1b6e:	09 f4       	brne	.+2      	; 0x1b72 <GPIO_writePin+0xdc>
    1b70:	5d c0       	rjmp	.+186    	; 0x1c2c <GPIO_writePin+0x196>
    1b72:	4b c2       	rjmp	.+1174   	; 0x200a <GPIO_writePin+0x574>
			{
			case 0:
				PORTA_REG.Bits.Bit0 = value;
    1b74:	eb e3       	ldi	r30, 0x3B	; 59
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7a:	81 70       	andi	r24, 0x01	; 1
    1b7c:	98 2f       	mov	r25, r24
    1b7e:	91 70       	andi	r25, 0x01	; 1
    1b80:	80 81       	ld	r24, Z
    1b82:	8e 7f       	andi	r24, 0xFE	; 254
    1b84:	89 2b       	or	r24, r25
    1b86:	80 83       	st	Z, r24
    1b88:	40 c2       	rjmp	.+1152   	; 0x200a <GPIO_writePin+0x574>
				break;
			case 1:
				PORTA_REG.Bits.Bit1 = value;
    1b8a:	eb e3       	ldi	r30, 0x3B	; 59
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b90:	81 70       	andi	r24, 0x01	; 1
    1b92:	81 70       	andi	r24, 0x01	; 1
    1b94:	98 2f       	mov	r25, r24
    1b96:	99 0f       	add	r25, r25
    1b98:	80 81       	ld	r24, Z
    1b9a:	8d 7f       	andi	r24, 0xFD	; 253
    1b9c:	89 2b       	or	r24, r25
    1b9e:	80 83       	st	Z, r24
    1ba0:	34 c2       	rjmp	.+1128   	; 0x200a <GPIO_writePin+0x574>
				break;
			case 2:
				PORTA_REG.Bits.Bit2 = value;
    1ba2:	eb e3       	ldi	r30, 0x3B	; 59
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba8:	81 70       	andi	r24, 0x01	; 1
    1baa:	81 70       	andi	r24, 0x01	; 1
    1bac:	98 2f       	mov	r25, r24
    1bae:	99 0f       	add	r25, r25
    1bb0:	99 0f       	add	r25, r25
    1bb2:	80 81       	ld	r24, Z
    1bb4:	8b 7f       	andi	r24, 0xFB	; 251
    1bb6:	89 2b       	or	r24, r25
    1bb8:	80 83       	st	Z, r24
    1bba:	27 c2       	rjmp	.+1102   	; 0x200a <GPIO_writePin+0x574>
				break;
			case 3:
				PORTA_REG.Bits.Bit3 = value;
    1bbc:	eb e3       	ldi	r30, 0x3B	; 59
    1bbe:	f0 e0       	ldi	r31, 0x00	; 0
    1bc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc2:	81 70       	andi	r24, 0x01	; 1
    1bc4:	81 70       	andi	r24, 0x01	; 1
    1bc6:	98 2f       	mov	r25, r24
    1bc8:	99 0f       	add	r25, r25
    1bca:	99 0f       	add	r25, r25
    1bcc:	99 0f       	add	r25, r25
    1bce:	80 81       	ld	r24, Z
    1bd0:	87 7f       	andi	r24, 0xF7	; 247
    1bd2:	89 2b       	or	r24, r25
    1bd4:	80 83       	st	Z, r24
    1bd6:	19 c2       	rjmp	.+1074   	; 0x200a <GPIO_writePin+0x574>
				break;
			case 4:
				PORTA_REG.Bits.Bit4 = value;
    1bd8:	eb e3       	ldi	r30, 0x3B	; 59
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bde:	81 70       	andi	r24, 0x01	; 1
    1be0:	81 70       	andi	r24, 0x01	; 1
    1be2:	98 2f       	mov	r25, r24
    1be4:	92 95       	swap	r25
    1be6:	90 7f       	andi	r25, 0xF0	; 240
    1be8:	80 81       	ld	r24, Z
    1bea:	8f 7e       	andi	r24, 0xEF	; 239
    1bec:	89 2b       	or	r24, r25
    1bee:	80 83       	st	Z, r24
    1bf0:	0c c2       	rjmp	.+1048   	; 0x200a <GPIO_writePin+0x574>
				break;
			case 5:
				PORTA_REG.Bits.Bit5 = value;
    1bf2:	eb e3       	ldi	r30, 0x3B	; 59
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf8:	81 70       	andi	r24, 0x01	; 1
    1bfa:	81 70       	andi	r24, 0x01	; 1
    1bfc:	98 2f       	mov	r25, r24
    1bfe:	92 95       	swap	r25
    1c00:	99 0f       	add	r25, r25
    1c02:	90 7e       	andi	r25, 0xE0	; 224
    1c04:	80 81       	ld	r24, Z
    1c06:	8f 7d       	andi	r24, 0xDF	; 223
    1c08:	89 2b       	or	r24, r25
    1c0a:	80 83       	st	Z, r24
    1c0c:	fe c1       	rjmp	.+1020   	; 0x200a <GPIO_writePin+0x574>
				break;
			case 6:
				PORTA_REG.Bits.Bit6 = value;
    1c0e:	eb e3       	ldi	r30, 0x3B	; 59
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	8b 81       	ldd	r24, Y+3	; 0x03
    1c14:	81 70       	andi	r24, 0x01	; 1
    1c16:	81 70       	andi	r24, 0x01	; 1
    1c18:	98 2f       	mov	r25, r24
    1c1a:	92 95       	swap	r25
    1c1c:	99 0f       	add	r25, r25
    1c1e:	99 0f       	add	r25, r25
    1c20:	90 7c       	andi	r25, 0xC0	; 192
    1c22:	80 81       	ld	r24, Z
    1c24:	8f 7b       	andi	r24, 0xBF	; 191
    1c26:	89 2b       	or	r24, r25
    1c28:	80 83       	st	Z, r24
    1c2a:	ef c1       	rjmp	.+990    	; 0x200a <GPIO_writePin+0x574>
				break;
			case 7:
				PORTA_REG.Bits.Bit7 = value;
    1c2c:	eb e3       	ldi	r30, 0x3B	; 59
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	8b 81       	ldd	r24, Y+3	; 0x03
    1c32:	81 70       	andi	r24, 0x01	; 1
    1c34:	98 2f       	mov	r25, r24
    1c36:	97 95       	ror	r25
    1c38:	99 27       	eor	r25, r25
    1c3a:	97 95       	ror	r25
    1c3c:	80 81       	ld	r24, Z
    1c3e:	8f 77       	andi	r24, 0x7F	; 127
    1c40:	89 2b       	or	r24, r25
    1c42:	80 83       	st	Z, r24
    1c44:	e2 c1       	rjmp	.+964    	; 0x200a <GPIO_writePin+0x574>
			}
			break;
		}
		case PORTB_ID:
		{
			switch(pin_num)
    1c46:	8a 81       	ldd	r24, Y+2	; 0x02
    1c48:	28 2f       	mov	r18, r24
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	39 87       	std	Y+9, r19	; 0x09
    1c4e:	28 87       	std	Y+8, r18	; 0x08
    1c50:	88 85       	ldd	r24, Y+8	; 0x08
    1c52:	99 85       	ldd	r25, Y+9	; 0x09
    1c54:	83 30       	cpi	r24, 0x03	; 3
    1c56:	91 05       	cpc	r25, r1
    1c58:	09 f4       	brne	.+2      	; 0x1c5c <GPIO_writePin+0x1c6>
    1c5a:	51 c0       	rjmp	.+162    	; 0x1cfe <GPIO_writePin+0x268>
    1c5c:	28 85       	ldd	r18, Y+8	; 0x08
    1c5e:	39 85       	ldd	r19, Y+9	; 0x09
    1c60:	24 30       	cpi	r18, 0x04	; 4
    1c62:	31 05       	cpc	r19, r1
    1c64:	7c f4       	brge	.+30     	; 0x1c84 <GPIO_writePin+0x1ee>
    1c66:	88 85       	ldd	r24, Y+8	; 0x08
    1c68:	99 85       	ldd	r25, Y+9	; 0x09
    1c6a:	81 30       	cpi	r24, 0x01	; 1
    1c6c:	91 05       	cpc	r25, r1
    1c6e:	71 f1       	breq	.+92     	; 0x1ccc <GPIO_writePin+0x236>
    1c70:	28 85       	ldd	r18, Y+8	; 0x08
    1c72:	39 85       	ldd	r19, Y+9	; 0x09
    1c74:	22 30       	cpi	r18, 0x02	; 2
    1c76:	31 05       	cpc	r19, r1
    1c78:	ac f5       	brge	.+106    	; 0x1ce4 <GPIO_writePin+0x24e>
    1c7a:	88 85       	ldd	r24, Y+8	; 0x08
    1c7c:	99 85       	ldd	r25, Y+9	; 0x09
    1c7e:	00 97       	sbiw	r24, 0x00	; 0
    1c80:	d1 f0       	breq	.+52     	; 0x1cb6 <GPIO_writePin+0x220>
    1c82:	c3 c1       	rjmp	.+902    	; 0x200a <GPIO_writePin+0x574>
    1c84:	28 85       	ldd	r18, Y+8	; 0x08
    1c86:	39 85       	ldd	r19, Y+9	; 0x09
    1c88:	25 30       	cpi	r18, 0x05	; 5
    1c8a:	31 05       	cpc	r19, r1
    1c8c:	09 f4       	brne	.+2      	; 0x1c90 <GPIO_writePin+0x1fa>
    1c8e:	52 c0       	rjmp	.+164    	; 0x1d34 <GPIO_writePin+0x29e>
    1c90:	88 85       	ldd	r24, Y+8	; 0x08
    1c92:	99 85       	ldd	r25, Y+9	; 0x09
    1c94:	85 30       	cpi	r24, 0x05	; 5
    1c96:	91 05       	cpc	r25, r1
    1c98:	0c f4       	brge	.+2      	; 0x1c9c <GPIO_writePin+0x206>
    1c9a:	3f c0       	rjmp	.+126    	; 0x1d1a <GPIO_writePin+0x284>
    1c9c:	28 85       	ldd	r18, Y+8	; 0x08
    1c9e:	39 85       	ldd	r19, Y+9	; 0x09
    1ca0:	26 30       	cpi	r18, 0x06	; 6
    1ca2:	31 05       	cpc	r19, r1
    1ca4:	09 f4       	brne	.+2      	; 0x1ca8 <GPIO_writePin+0x212>
    1ca6:	54 c0       	rjmp	.+168    	; 0x1d50 <GPIO_writePin+0x2ba>
    1ca8:	88 85       	ldd	r24, Y+8	; 0x08
    1caa:	99 85       	ldd	r25, Y+9	; 0x09
    1cac:	87 30       	cpi	r24, 0x07	; 7
    1cae:	91 05       	cpc	r25, r1
    1cb0:	09 f4       	brne	.+2      	; 0x1cb4 <GPIO_writePin+0x21e>
    1cb2:	5d c0       	rjmp	.+186    	; 0x1d6e <GPIO_writePin+0x2d8>
    1cb4:	aa c1       	rjmp	.+852    	; 0x200a <GPIO_writePin+0x574>
			{
			case 0:
				PORTB_REG.Bits.Bit0 = value;
    1cb6:	e8 e3       	ldi	r30, 0x38	; 56
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbc:	81 70       	andi	r24, 0x01	; 1
    1cbe:	98 2f       	mov	r25, r24
    1cc0:	91 70       	andi	r25, 0x01	; 1
    1cc2:	80 81       	ld	r24, Z
    1cc4:	8e 7f       	andi	r24, 0xFE	; 254
    1cc6:	89 2b       	or	r24, r25
    1cc8:	80 83       	st	Z, r24
    1cca:	9f c1       	rjmp	.+830    	; 0x200a <GPIO_writePin+0x574>
				break;
			case 1:
				PORTB_REG.Bits.Bit1 = value;
    1ccc:	e8 e3       	ldi	r30, 0x38	; 56
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd2:	81 70       	andi	r24, 0x01	; 1
    1cd4:	81 70       	andi	r24, 0x01	; 1
    1cd6:	98 2f       	mov	r25, r24
    1cd8:	99 0f       	add	r25, r25
    1cda:	80 81       	ld	r24, Z
    1cdc:	8d 7f       	andi	r24, 0xFD	; 253
    1cde:	89 2b       	or	r24, r25
    1ce0:	80 83       	st	Z, r24
    1ce2:	93 c1       	rjmp	.+806    	; 0x200a <GPIO_writePin+0x574>
				break;
			case 2:
				PORTB_REG.Bits.Bit2 = value;
    1ce4:	e8 e3       	ldi	r30, 0x38	; 56
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cea:	81 70       	andi	r24, 0x01	; 1
    1cec:	81 70       	andi	r24, 0x01	; 1
    1cee:	98 2f       	mov	r25, r24
    1cf0:	99 0f       	add	r25, r25
    1cf2:	99 0f       	add	r25, r25
    1cf4:	80 81       	ld	r24, Z
    1cf6:	8b 7f       	andi	r24, 0xFB	; 251
    1cf8:	89 2b       	or	r24, r25
    1cfa:	80 83       	st	Z, r24
    1cfc:	86 c1       	rjmp	.+780    	; 0x200a <GPIO_writePin+0x574>
				break;
			case 3:
				PORTB_REG.Bits.Bit3 = value;
    1cfe:	e8 e3       	ldi	r30, 0x38	; 56
    1d00:	f0 e0       	ldi	r31, 0x00	; 0
    1d02:	8b 81       	ldd	r24, Y+3	; 0x03
    1d04:	81 70       	andi	r24, 0x01	; 1
    1d06:	81 70       	andi	r24, 0x01	; 1
    1d08:	98 2f       	mov	r25, r24
    1d0a:	99 0f       	add	r25, r25
    1d0c:	99 0f       	add	r25, r25
    1d0e:	99 0f       	add	r25, r25
    1d10:	80 81       	ld	r24, Z
    1d12:	87 7f       	andi	r24, 0xF7	; 247
    1d14:	89 2b       	or	r24, r25
    1d16:	80 83       	st	Z, r24
    1d18:	78 c1       	rjmp	.+752    	; 0x200a <GPIO_writePin+0x574>
				break;
			case 4:
				PORTB_REG.Bits.Bit4 = value;
    1d1a:	e8 e3       	ldi	r30, 0x38	; 56
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d20:	81 70       	andi	r24, 0x01	; 1
    1d22:	81 70       	andi	r24, 0x01	; 1
    1d24:	98 2f       	mov	r25, r24
    1d26:	92 95       	swap	r25
    1d28:	90 7f       	andi	r25, 0xF0	; 240
    1d2a:	80 81       	ld	r24, Z
    1d2c:	8f 7e       	andi	r24, 0xEF	; 239
    1d2e:	89 2b       	or	r24, r25
    1d30:	80 83       	st	Z, r24
    1d32:	6b c1       	rjmp	.+726    	; 0x200a <GPIO_writePin+0x574>
				break;
			case 5:
				PORTB_REG.Bits.Bit5 = value;
    1d34:	e8 e3       	ldi	r30, 0x38	; 56
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3a:	81 70       	andi	r24, 0x01	; 1
    1d3c:	81 70       	andi	r24, 0x01	; 1
    1d3e:	98 2f       	mov	r25, r24
    1d40:	92 95       	swap	r25
    1d42:	99 0f       	add	r25, r25
    1d44:	90 7e       	andi	r25, 0xE0	; 224
    1d46:	80 81       	ld	r24, Z
    1d48:	8f 7d       	andi	r24, 0xDF	; 223
    1d4a:	89 2b       	or	r24, r25
    1d4c:	80 83       	st	Z, r24
    1d4e:	5d c1       	rjmp	.+698    	; 0x200a <GPIO_writePin+0x574>
				break;
			case 6:
				PORTB_REG.Bits.Bit6 = value;
    1d50:	e8 e3       	ldi	r30, 0x38	; 56
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	8b 81       	ldd	r24, Y+3	; 0x03
    1d56:	81 70       	andi	r24, 0x01	; 1
    1d58:	81 70       	andi	r24, 0x01	; 1
    1d5a:	98 2f       	mov	r25, r24
    1d5c:	92 95       	swap	r25
    1d5e:	99 0f       	add	r25, r25
    1d60:	99 0f       	add	r25, r25
    1d62:	90 7c       	andi	r25, 0xC0	; 192
    1d64:	80 81       	ld	r24, Z
    1d66:	8f 7b       	andi	r24, 0xBF	; 191
    1d68:	89 2b       	or	r24, r25
    1d6a:	80 83       	st	Z, r24
    1d6c:	4e c1       	rjmp	.+668    	; 0x200a <GPIO_writePin+0x574>
				break;
			case 7:
				PORTB_REG.Bits.Bit7 = value;
    1d6e:	e8 e3       	ldi	r30, 0x38	; 56
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	8b 81       	ldd	r24, Y+3	; 0x03
    1d74:	81 70       	andi	r24, 0x01	; 1
    1d76:	98 2f       	mov	r25, r24
    1d78:	97 95       	ror	r25
    1d7a:	99 27       	eor	r25, r25
    1d7c:	97 95       	ror	r25
    1d7e:	80 81       	ld	r24, Z
    1d80:	8f 77       	andi	r24, 0x7F	; 127
    1d82:	89 2b       	or	r24, r25
    1d84:	80 83       	st	Z, r24
    1d86:	41 c1       	rjmp	.+642    	; 0x200a <GPIO_writePin+0x574>
			}
			break;
		}
		case PORTC_ID:
		{
			switch(pin_num)
    1d88:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8a:	28 2f       	mov	r18, r24
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	3f 83       	std	Y+7, r19	; 0x07
    1d90:	2e 83       	std	Y+6, r18	; 0x06
    1d92:	8e 81       	ldd	r24, Y+6	; 0x06
    1d94:	9f 81       	ldd	r25, Y+7	; 0x07
    1d96:	83 30       	cpi	r24, 0x03	; 3
    1d98:	91 05       	cpc	r25, r1
    1d9a:	09 f4       	brne	.+2      	; 0x1d9e <GPIO_writePin+0x308>
    1d9c:	51 c0       	rjmp	.+162    	; 0x1e40 <GPIO_writePin+0x3aa>
    1d9e:	2e 81       	ldd	r18, Y+6	; 0x06
    1da0:	3f 81       	ldd	r19, Y+7	; 0x07
    1da2:	24 30       	cpi	r18, 0x04	; 4
    1da4:	31 05       	cpc	r19, r1
    1da6:	7c f4       	brge	.+30     	; 0x1dc6 <GPIO_writePin+0x330>
    1da8:	8e 81       	ldd	r24, Y+6	; 0x06
    1daa:	9f 81       	ldd	r25, Y+7	; 0x07
    1dac:	81 30       	cpi	r24, 0x01	; 1
    1dae:	91 05       	cpc	r25, r1
    1db0:	71 f1       	breq	.+92     	; 0x1e0e <GPIO_writePin+0x378>
    1db2:	2e 81       	ldd	r18, Y+6	; 0x06
    1db4:	3f 81       	ldd	r19, Y+7	; 0x07
    1db6:	22 30       	cpi	r18, 0x02	; 2
    1db8:	31 05       	cpc	r19, r1
    1dba:	ac f5       	brge	.+106    	; 0x1e26 <GPIO_writePin+0x390>
    1dbc:	8e 81       	ldd	r24, Y+6	; 0x06
    1dbe:	9f 81       	ldd	r25, Y+7	; 0x07
    1dc0:	00 97       	sbiw	r24, 0x00	; 0
    1dc2:	d1 f0       	breq	.+52     	; 0x1df8 <GPIO_writePin+0x362>
    1dc4:	22 c1       	rjmp	.+580    	; 0x200a <GPIO_writePin+0x574>
    1dc6:	2e 81       	ldd	r18, Y+6	; 0x06
    1dc8:	3f 81       	ldd	r19, Y+7	; 0x07
    1dca:	25 30       	cpi	r18, 0x05	; 5
    1dcc:	31 05       	cpc	r19, r1
    1dce:	09 f4       	brne	.+2      	; 0x1dd2 <GPIO_writePin+0x33c>
    1dd0:	52 c0       	rjmp	.+164    	; 0x1e76 <GPIO_writePin+0x3e0>
    1dd2:	8e 81       	ldd	r24, Y+6	; 0x06
    1dd4:	9f 81       	ldd	r25, Y+7	; 0x07
    1dd6:	85 30       	cpi	r24, 0x05	; 5
    1dd8:	91 05       	cpc	r25, r1
    1dda:	0c f4       	brge	.+2      	; 0x1dde <GPIO_writePin+0x348>
    1ddc:	3f c0       	rjmp	.+126    	; 0x1e5c <GPIO_writePin+0x3c6>
    1dde:	2e 81       	ldd	r18, Y+6	; 0x06
    1de0:	3f 81       	ldd	r19, Y+7	; 0x07
    1de2:	26 30       	cpi	r18, 0x06	; 6
    1de4:	31 05       	cpc	r19, r1
    1de6:	09 f4       	brne	.+2      	; 0x1dea <GPIO_writePin+0x354>
    1de8:	54 c0       	rjmp	.+168    	; 0x1e92 <GPIO_writePin+0x3fc>
    1dea:	8e 81       	ldd	r24, Y+6	; 0x06
    1dec:	9f 81       	ldd	r25, Y+7	; 0x07
    1dee:	87 30       	cpi	r24, 0x07	; 7
    1df0:	91 05       	cpc	r25, r1
    1df2:	09 f4       	brne	.+2      	; 0x1df6 <GPIO_writePin+0x360>
    1df4:	5d c0       	rjmp	.+186    	; 0x1eb0 <GPIO_writePin+0x41a>
    1df6:	09 c1       	rjmp	.+530    	; 0x200a <GPIO_writePin+0x574>
			{
			case 0:
				PORTC_REG.Bits.Bit0 = value;
    1df8:	e5 e3       	ldi	r30, 0x35	; 53
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfe:	81 70       	andi	r24, 0x01	; 1
    1e00:	98 2f       	mov	r25, r24
    1e02:	91 70       	andi	r25, 0x01	; 1
    1e04:	80 81       	ld	r24, Z
    1e06:	8e 7f       	andi	r24, 0xFE	; 254
    1e08:	89 2b       	or	r24, r25
    1e0a:	80 83       	st	Z, r24
    1e0c:	fe c0       	rjmp	.+508    	; 0x200a <GPIO_writePin+0x574>
				break;
			case 1:
				PORTC_REG.Bits.Bit1 = value;
    1e0e:	e5 e3       	ldi	r30, 0x35	; 53
    1e10:	f0 e0       	ldi	r31, 0x00	; 0
    1e12:	8b 81       	ldd	r24, Y+3	; 0x03
    1e14:	81 70       	andi	r24, 0x01	; 1
    1e16:	81 70       	andi	r24, 0x01	; 1
    1e18:	98 2f       	mov	r25, r24
    1e1a:	99 0f       	add	r25, r25
    1e1c:	80 81       	ld	r24, Z
    1e1e:	8d 7f       	andi	r24, 0xFD	; 253
    1e20:	89 2b       	or	r24, r25
    1e22:	80 83       	st	Z, r24
    1e24:	f2 c0       	rjmp	.+484    	; 0x200a <GPIO_writePin+0x574>
				break;
			case 2:
				PORTC_REG.Bits.Bit2 = value;
    1e26:	e5 e3       	ldi	r30, 0x35	; 53
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2c:	81 70       	andi	r24, 0x01	; 1
    1e2e:	81 70       	andi	r24, 0x01	; 1
    1e30:	98 2f       	mov	r25, r24
    1e32:	99 0f       	add	r25, r25
    1e34:	99 0f       	add	r25, r25
    1e36:	80 81       	ld	r24, Z
    1e38:	8b 7f       	andi	r24, 0xFB	; 251
    1e3a:	89 2b       	or	r24, r25
    1e3c:	80 83       	st	Z, r24
    1e3e:	e5 c0       	rjmp	.+458    	; 0x200a <GPIO_writePin+0x574>
				break;
			case 3:
				PORTC_REG.Bits.Bit3 = value;
    1e40:	e5 e3       	ldi	r30, 0x35	; 53
    1e42:	f0 e0       	ldi	r31, 0x00	; 0
    1e44:	8b 81       	ldd	r24, Y+3	; 0x03
    1e46:	81 70       	andi	r24, 0x01	; 1
    1e48:	81 70       	andi	r24, 0x01	; 1
    1e4a:	98 2f       	mov	r25, r24
    1e4c:	99 0f       	add	r25, r25
    1e4e:	99 0f       	add	r25, r25
    1e50:	99 0f       	add	r25, r25
    1e52:	80 81       	ld	r24, Z
    1e54:	87 7f       	andi	r24, 0xF7	; 247
    1e56:	89 2b       	or	r24, r25
    1e58:	80 83       	st	Z, r24
    1e5a:	d7 c0       	rjmp	.+430    	; 0x200a <GPIO_writePin+0x574>
				break;
			case 4:
				PORTC_REG.Bits.Bit4 = value;
    1e5c:	e5 e3       	ldi	r30, 0x35	; 53
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	8b 81       	ldd	r24, Y+3	; 0x03
    1e62:	81 70       	andi	r24, 0x01	; 1
    1e64:	81 70       	andi	r24, 0x01	; 1
    1e66:	98 2f       	mov	r25, r24
    1e68:	92 95       	swap	r25
    1e6a:	90 7f       	andi	r25, 0xF0	; 240
    1e6c:	80 81       	ld	r24, Z
    1e6e:	8f 7e       	andi	r24, 0xEF	; 239
    1e70:	89 2b       	or	r24, r25
    1e72:	80 83       	st	Z, r24
    1e74:	ca c0       	rjmp	.+404    	; 0x200a <GPIO_writePin+0x574>
				break;
			case 5:
				PORTC_REG.Bits.Bit5 = value;
    1e76:	e5 e3       	ldi	r30, 0x35	; 53
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7c:	81 70       	andi	r24, 0x01	; 1
    1e7e:	81 70       	andi	r24, 0x01	; 1
    1e80:	98 2f       	mov	r25, r24
    1e82:	92 95       	swap	r25
    1e84:	99 0f       	add	r25, r25
    1e86:	90 7e       	andi	r25, 0xE0	; 224
    1e88:	80 81       	ld	r24, Z
    1e8a:	8f 7d       	andi	r24, 0xDF	; 223
    1e8c:	89 2b       	or	r24, r25
    1e8e:	80 83       	st	Z, r24
    1e90:	bc c0       	rjmp	.+376    	; 0x200a <GPIO_writePin+0x574>
				break;
			case 6:
				PORTC_REG.Bits.Bit6 = value;
    1e92:	e5 e3       	ldi	r30, 0x35	; 53
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	8b 81       	ldd	r24, Y+3	; 0x03
    1e98:	81 70       	andi	r24, 0x01	; 1
    1e9a:	81 70       	andi	r24, 0x01	; 1
    1e9c:	98 2f       	mov	r25, r24
    1e9e:	92 95       	swap	r25
    1ea0:	99 0f       	add	r25, r25
    1ea2:	99 0f       	add	r25, r25
    1ea4:	90 7c       	andi	r25, 0xC0	; 192
    1ea6:	80 81       	ld	r24, Z
    1ea8:	8f 7b       	andi	r24, 0xBF	; 191
    1eaa:	89 2b       	or	r24, r25
    1eac:	80 83       	st	Z, r24
    1eae:	ad c0       	rjmp	.+346    	; 0x200a <GPIO_writePin+0x574>
				break;
			case 7:
				PORTC_REG.Bits.Bit7 = value;
    1eb0:	e5 e3       	ldi	r30, 0x35	; 53
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb6:	81 70       	andi	r24, 0x01	; 1
    1eb8:	98 2f       	mov	r25, r24
    1eba:	97 95       	ror	r25
    1ebc:	99 27       	eor	r25, r25
    1ebe:	97 95       	ror	r25
    1ec0:	80 81       	ld	r24, Z
    1ec2:	8f 77       	andi	r24, 0x7F	; 127
    1ec4:	89 2b       	or	r24, r25
    1ec6:	80 83       	st	Z, r24
    1ec8:	a0 c0       	rjmp	.+320    	; 0x200a <GPIO_writePin+0x574>
			}
			break;
		}
		case PORTD_ID:
		{
			switch(pin_num)
    1eca:	8a 81       	ldd	r24, Y+2	; 0x02
    1ecc:	28 2f       	mov	r18, r24
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	3d 83       	std	Y+5, r19	; 0x05
    1ed2:	2c 83       	std	Y+4, r18	; 0x04
    1ed4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ed6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ed8:	83 30       	cpi	r24, 0x03	; 3
    1eda:	91 05       	cpc	r25, r1
    1edc:	09 f4       	brne	.+2      	; 0x1ee0 <GPIO_writePin+0x44a>
    1ede:	51 c0       	rjmp	.+162    	; 0x1f82 <GPIO_writePin+0x4ec>
    1ee0:	2c 81       	ldd	r18, Y+4	; 0x04
    1ee2:	3d 81       	ldd	r19, Y+5	; 0x05
    1ee4:	24 30       	cpi	r18, 0x04	; 4
    1ee6:	31 05       	cpc	r19, r1
    1ee8:	7c f4       	brge	.+30     	; 0x1f08 <GPIO_writePin+0x472>
    1eea:	8c 81       	ldd	r24, Y+4	; 0x04
    1eec:	9d 81       	ldd	r25, Y+5	; 0x05
    1eee:	81 30       	cpi	r24, 0x01	; 1
    1ef0:	91 05       	cpc	r25, r1
    1ef2:	71 f1       	breq	.+92     	; 0x1f50 <GPIO_writePin+0x4ba>
    1ef4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ef6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ef8:	22 30       	cpi	r18, 0x02	; 2
    1efa:	31 05       	cpc	r19, r1
    1efc:	ac f5       	brge	.+106    	; 0x1f68 <GPIO_writePin+0x4d2>
    1efe:	8c 81       	ldd	r24, Y+4	; 0x04
    1f00:	9d 81       	ldd	r25, Y+5	; 0x05
    1f02:	00 97       	sbiw	r24, 0x00	; 0
    1f04:	d1 f0       	breq	.+52     	; 0x1f3a <GPIO_writePin+0x4a4>
    1f06:	81 c0       	rjmp	.+258    	; 0x200a <GPIO_writePin+0x574>
    1f08:	2c 81       	ldd	r18, Y+4	; 0x04
    1f0a:	3d 81       	ldd	r19, Y+5	; 0x05
    1f0c:	25 30       	cpi	r18, 0x05	; 5
    1f0e:	31 05       	cpc	r19, r1
    1f10:	09 f4       	brne	.+2      	; 0x1f14 <GPIO_writePin+0x47e>
    1f12:	52 c0       	rjmp	.+164    	; 0x1fb8 <GPIO_writePin+0x522>
    1f14:	8c 81       	ldd	r24, Y+4	; 0x04
    1f16:	9d 81       	ldd	r25, Y+5	; 0x05
    1f18:	85 30       	cpi	r24, 0x05	; 5
    1f1a:	91 05       	cpc	r25, r1
    1f1c:	0c f4       	brge	.+2      	; 0x1f20 <GPIO_writePin+0x48a>
    1f1e:	3f c0       	rjmp	.+126    	; 0x1f9e <GPIO_writePin+0x508>
    1f20:	2c 81       	ldd	r18, Y+4	; 0x04
    1f22:	3d 81       	ldd	r19, Y+5	; 0x05
    1f24:	26 30       	cpi	r18, 0x06	; 6
    1f26:	31 05       	cpc	r19, r1
    1f28:	09 f4       	brne	.+2      	; 0x1f2c <GPIO_writePin+0x496>
    1f2a:	54 c0       	rjmp	.+168    	; 0x1fd4 <GPIO_writePin+0x53e>
    1f2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f2e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f30:	87 30       	cpi	r24, 0x07	; 7
    1f32:	91 05       	cpc	r25, r1
    1f34:	09 f4       	brne	.+2      	; 0x1f38 <GPIO_writePin+0x4a2>
    1f36:	5d c0       	rjmp	.+186    	; 0x1ff2 <GPIO_writePin+0x55c>
    1f38:	68 c0       	rjmp	.+208    	; 0x200a <GPIO_writePin+0x574>
			{
			case 0:
				PORTD_REG.Bits.Bit0 = value;
    1f3a:	e2 e3       	ldi	r30, 0x32	; 50
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f40:	81 70       	andi	r24, 0x01	; 1
    1f42:	98 2f       	mov	r25, r24
    1f44:	91 70       	andi	r25, 0x01	; 1
    1f46:	80 81       	ld	r24, Z
    1f48:	8e 7f       	andi	r24, 0xFE	; 254
    1f4a:	89 2b       	or	r24, r25
    1f4c:	80 83       	st	Z, r24
    1f4e:	5d c0       	rjmp	.+186    	; 0x200a <GPIO_writePin+0x574>
				break;
			case 1:
				PORTD_REG.Bits.Bit1 = value;
    1f50:	e2 e3       	ldi	r30, 0x32	; 50
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	8b 81       	ldd	r24, Y+3	; 0x03
    1f56:	81 70       	andi	r24, 0x01	; 1
    1f58:	81 70       	andi	r24, 0x01	; 1
    1f5a:	98 2f       	mov	r25, r24
    1f5c:	99 0f       	add	r25, r25
    1f5e:	80 81       	ld	r24, Z
    1f60:	8d 7f       	andi	r24, 0xFD	; 253
    1f62:	89 2b       	or	r24, r25
    1f64:	80 83       	st	Z, r24
    1f66:	51 c0       	rjmp	.+162    	; 0x200a <GPIO_writePin+0x574>
				break;
			case 2:
				PORTD_REG.Bits.Bit2 = value;
    1f68:	e2 e3       	ldi	r30, 0x32	; 50
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6e:	81 70       	andi	r24, 0x01	; 1
    1f70:	81 70       	andi	r24, 0x01	; 1
    1f72:	98 2f       	mov	r25, r24
    1f74:	99 0f       	add	r25, r25
    1f76:	99 0f       	add	r25, r25
    1f78:	80 81       	ld	r24, Z
    1f7a:	8b 7f       	andi	r24, 0xFB	; 251
    1f7c:	89 2b       	or	r24, r25
    1f7e:	80 83       	st	Z, r24
    1f80:	44 c0       	rjmp	.+136    	; 0x200a <GPIO_writePin+0x574>
				break;
			case 3:
				PORTD_REG.Bits.Bit3 = value;
    1f82:	e2 e3       	ldi	r30, 0x32	; 50
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	8b 81       	ldd	r24, Y+3	; 0x03
    1f88:	81 70       	andi	r24, 0x01	; 1
    1f8a:	81 70       	andi	r24, 0x01	; 1
    1f8c:	98 2f       	mov	r25, r24
    1f8e:	99 0f       	add	r25, r25
    1f90:	99 0f       	add	r25, r25
    1f92:	99 0f       	add	r25, r25
    1f94:	80 81       	ld	r24, Z
    1f96:	87 7f       	andi	r24, 0xF7	; 247
    1f98:	89 2b       	or	r24, r25
    1f9a:	80 83       	st	Z, r24
    1f9c:	36 c0       	rjmp	.+108    	; 0x200a <GPIO_writePin+0x574>
				break;
			case 4:
				PORTD_REG.Bits.Bit4 = value;
    1f9e:	e2 e3       	ldi	r30, 0x32	; 50
    1fa0:	f0 e0       	ldi	r31, 0x00	; 0
    1fa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa4:	81 70       	andi	r24, 0x01	; 1
    1fa6:	81 70       	andi	r24, 0x01	; 1
    1fa8:	98 2f       	mov	r25, r24
    1faa:	92 95       	swap	r25
    1fac:	90 7f       	andi	r25, 0xF0	; 240
    1fae:	80 81       	ld	r24, Z
    1fb0:	8f 7e       	andi	r24, 0xEF	; 239
    1fb2:	89 2b       	or	r24, r25
    1fb4:	80 83       	st	Z, r24
    1fb6:	29 c0       	rjmp	.+82     	; 0x200a <GPIO_writePin+0x574>
				break;
			case 5:
				PORTD_REG.Bits.Bit5 = value;
    1fb8:	e2 e3       	ldi	r30, 0x32	; 50
    1fba:	f0 e0       	ldi	r31, 0x00	; 0
    1fbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fbe:	81 70       	andi	r24, 0x01	; 1
    1fc0:	81 70       	andi	r24, 0x01	; 1
    1fc2:	98 2f       	mov	r25, r24
    1fc4:	92 95       	swap	r25
    1fc6:	99 0f       	add	r25, r25
    1fc8:	90 7e       	andi	r25, 0xE0	; 224
    1fca:	80 81       	ld	r24, Z
    1fcc:	8f 7d       	andi	r24, 0xDF	; 223
    1fce:	89 2b       	or	r24, r25
    1fd0:	80 83       	st	Z, r24
    1fd2:	1b c0       	rjmp	.+54     	; 0x200a <GPIO_writePin+0x574>
				break;
			case 6:
				PORTD_REG.Bits.Bit6 = value;
    1fd4:	e2 e3       	ldi	r30, 0x32	; 50
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fda:	81 70       	andi	r24, 0x01	; 1
    1fdc:	81 70       	andi	r24, 0x01	; 1
    1fde:	98 2f       	mov	r25, r24
    1fe0:	92 95       	swap	r25
    1fe2:	99 0f       	add	r25, r25
    1fe4:	99 0f       	add	r25, r25
    1fe6:	90 7c       	andi	r25, 0xC0	; 192
    1fe8:	80 81       	ld	r24, Z
    1fea:	8f 7b       	andi	r24, 0xBF	; 191
    1fec:	89 2b       	or	r24, r25
    1fee:	80 83       	st	Z, r24
    1ff0:	0c c0       	rjmp	.+24     	; 0x200a <GPIO_writePin+0x574>
				break;
			case 7:
				PORTD_REG.Bits.Bit7 = value;
    1ff2:	e2 e3       	ldi	r30, 0x32	; 50
    1ff4:	f0 e0       	ldi	r31, 0x00	; 0
    1ff6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff8:	81 70       	andi	r24, 0x01	; 1
    1ffa:	98 2f       	mov	r25, r24
    1ffc:	97 95       	ror	r25
    1ffe:	99 27       	eor	r25, r25
    2000:	97 95       	ror	r25
    2002:	80 81       	ld	r24, Z
    2004:	8f 77       	andi	r24, 0x7F	; 127
    2006:	89 2b       	or	r24, r25
    2008:	80 83       	st	Z, r24
			}
			break;
		}
		}
	}
}
    200a:	2d 96       	adiw	r28, 0x0d	; 13
    200c:	0f b6       	in	r0, 0x3f	; 63
    200e:	f8 94       	cli
    2010:	de bf       	out	0x3e, r29	; 62
    2012:	0f be       	out	0x3f, r0	; 63
    2014:	cd bf       	out	0x3d, r28	; 61
    2016:	cf 91       	pop	r28
    2018:	df 91       	pop	r29
    201a:	08 95       	ret

0000201c <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    201c:	df 93       	push	r29
    201e:	cf 93       	push	r28
    2020:	cd b7       	in	r28, 0x3d	; 61
    2022:	de b7       	in	r29, 0x3e	; 62
    2024:	2d 97       	sbiw	r28, 0x0d	; 13
    2026:	0f b6       	in	r0, 0x3f	; 63
    2028:	f8 94       	cli
    202a:	de bf       	out	0x3e, r29	; 62
    202c:	0f be       	out	0x3f, r0	; 63
    202e:	cd bf       	out	0x3d, r28	; 61
    2030:	8a 83       	std	Y+2, r24	; 0x02
    2032:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    2034:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2036:	8b 81       	ldd	r24, Y+3	; 0x03
    2038:	88 30       	cpi	r24, 0x08	; 8
    203a:	08 f0       	brcs	.+2      	; 0x203e <GPIO_readPin+0x22>
    203c:	f9 c1       	rjmp	.+1010   	; 0x2430 <GPIO_readPin+0x414>
    203e:	8a 81       	ldd	r24, Y+2	; 0x02
    2040:	84 30       	cpi	r24, 0x04	; 4
    2042:	08 f0       	brcs	.+2      	; 0x2046 <GPIO_readPin+0x2a>
    2044:	f5 c1       	rjmp	.+1002   	; 0x2430 <GPIO_readPin+0x414>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    2046:	8a 81       	ldd	r24, Y+2	; 0x02
    2048:	28 2f       	mov	r18, r24
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	3d 87       	std	Y+13, r19	; 0x0d
    204e:	2c 87       	std	Y+12, r18	; 0x0c
    2050:	8c 85       	ldd	r24, Y+12	; 0x0c
    2052:	9d 85       	ldd	r25, Y+13	; 0x0d
    2054:	81 30       	cpi	r24, 0x01	; 1
    2056:	91 05       	cpc	r25, r1
    2058:	09 f4       	brne	.+2      	; 0x205c <GPIO_readPin+0x40>
    205a:	8c c0       	rjmp	.+280    	; 0x2174 <GPIO_readPin+0x158>
    205c:	2c 85       	ldd	r18, Y+12	; 0x0c
    205e:	3d 85       	ldd	r19, Y+13	; 0x0d
    2060:	22 30       	cpi	r18, 0x02	; 2
    2062:	31 05       	cpc	r19, r1
    2064:	2c f4       	brge	.+10     	; 0x2070 <GPIO_readPin+0x54>
    2066:	8c 85       	ldd	r24, Y+12	; 0x0c
    2068:	9d 85       	ldd	r25, Y+13	; 0x0d
    206a:	00 97       	sbiw	r24, 0x00	; 0
    206c:	71 f0       	breq	.+28     	; 0x208a <GPIO_readPin+0x6e>
    206e:	e0 c1       	rjmp	.+960    	; 0x2430 <GPIO_readPin+0x414>
    2070:	2c 85       	ldd	r18, Y+12	; 0x0c
    2072:	3d 85       	ldd	r19, Y+13	; 0x0d
    2074:	22 30       	cpi	r18, 0x02	; 2
    2076:	31 05       	cpc	r19, r1
    2078:	09 f4       	brne	.+2      	; 0x207c <GPIO_readPin+0x60>
    207a:	f1 c0       	rjmp	.+482    	; 0x225e <GPIO_readPin+0x242>
    207c:	8c 85       	ldd	r24, Y+12	; 0x0c
    207e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2080:	83 30       	cpi	r24, 0x03	; 3
    2082:	91 05       	cpc	r25, r1
    2084:	09 f4       	brne	.+2      	; 0x2088 <GPIO_readPin+0x6c>
    2086:	60 c1       	rjmp	.+704    	; 0x2348 <GPIO_readPin+0x32c>
    2088:	d3 c1       	rjmp	.+934    	; 0x2430 <GPIO_readPin+0x414>
		{
		case PORTA_ID:
		{
			switch(pin_num)
    208a:	8b 81       	ldd	r24, Y+3	; 0x03
    208c:	28 2f       	mov	r18, r24
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	3b 87       	std	Y+11, r19	; 0x0b
    2092:	2a 87       	std	Y+10, r18	; 0x0a
    2094:	8a 85       	ldd	r24, Y+10	; 0x0a
    2096:	9b 85       	ldd	r25, Y+11	; 0x0b
    2098:	83 30       	cpi	r24, 0x03	; 3
    209a:	91 05       	cpc	r25, r1
    209c:	09 f4       	brne	.+2      	; 0x20a0 <GPIO_readPin+0x84>
    209e:	3e c0       	rjmp	.+124    	; 0x211c <GPIO_readPin+0x100>
    20a0:	2a 85       	ldd	r18, Y+10	; 0x0a
    20a2:	3b 85       	ldd	r19, Y+11	; 0x0b
    20a4:	24 30       	cpi	r18, 0x04	; 4
    20a6:	31 05       	cpc	r19, r1
    20a8:	7c f4       	brge	.+30     	; 0x20c8 <GPIO_readPin+0xac>
    20aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    20ac:	9b 85       	ldd	r25, Y+11	; 0x0b
    20ae:	81 30       	cpi	r24, 0x01	; 1
    20b0:	91 05       	cpc	r25, r1
    20b2:	29 f1       	breq	.+74     	; 0x20fe <GPIO_readPin+0xe2>
    20b4:	2a 85       	ldd	r18, Y+10	; 0x0a
    20b6:	3b 85       	ldd	r19, Y+11	; 0x0b
    20b8:	22 30       	cpi	r18, 0x02	; 2
    20ba:	31 05       	cpc	r19, r1
    20bc:	3c f5       	brge	.+78     	; 0x210c <GPIO_readPin+0xf0>
    20be:	8a 85       	ldd	r24, Y+10	; 0x0a
    20c0:	9b 85       	ldd	r25, Y+11	; 0x0b
    20c2:	00 97       	sbiw	r24, 0x00	; 0
    20c4:	b1 f0       	breq	.+44     	; 0x20f2 <GPIO_readPin+0xd6>
    20c6:	b4 c1       	rjmp	.+872    	; 0x2430 <GPIO_readPin+0x414>
    20c8:	2a 85       	ldd	r18, Y+10	; 0x0a
    20ca:	3b 85       	ldd	r19, Y+11	; 0x0b
    20cc:	25 30       	cpi	r18, 0x05	; 5
    20ce:	31 05       	cpc	r19, r1
    20d0:	b1 f1       	breq	.+108    	; 0x213e <GPIO_readPin+0x122>
    20d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    20d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    20d6:	85 30       	cpi	r24, 0x05	; 5
    20d8:	91 05       	cpc	r25, r1
    20da:	4c f1       	brlt	.+82     	; 0x212e <GPIO_readPin+0x112>
    20dc:	2a 85       	ldd	r18, Y+10	; 0x0a
    20de:	3b 85       	ldd	r19, Y+11	; 0x0b
    20e0:	26 30       	cpi	r18, 0x06	; 6
    20e2:	31 05       	cpc	r19, r1
    20e4:	a9 f1       	breq	.+106    	; 0x2150 <GPIO_readPin+0x134>
    20e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    20e8:	9b 85       	ldd	r25, Y+11	; 0x0b
    20ea:	87 30       	cpi	r24, 0x07	; 7
    20ec:	91 05       	cpc	r25, r1
    20ee:	d1 f1       	breq	.+116    	; 0x2164 <GPIO_readPin+0x148>
    20f0:	9f c1       	rjmp	.+830    	; 0x2430 <GPIO_readPin+0x414>
			{
			case 0:
				pin_value = PINA_REG.Bits.Bit0;
    20f2:	e9 e3       	ldi	r30, 0x39	; 57
    20f4:	f0 e0       	ldi	r31, 0x00	; 0
    20f6:	80 81       	ld	r24, Z
    20f8:	81 70       	andi	r24, 0x01	; 1
    20fa:	89 83       	std	Y+1, r24	; 0x01
    20fc:	99 c1       	rjmp	.+818    	; 0x2430 <GPIO_readPin+0x414>
				break;
			case 1:
				pin_value = PINA_REG.Bits.Bit1;
    20fe:	e9 e3       	ldi	r30, 0x39	; 57
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	80 81       	ld	r24, Z
    2104:	86 95       	lsr	r24
    2106:	81 70       	andi	r24, 0x01	; 1
    2108:	89 83       	std	Y+1, r24	; 0x01
    210a:	92 c1       	rjmp	.+804    	; 0x2430 <GPIO_readPin+0x414>
				break;
			case 2:
				pin_value = PINA_REG.Bits.Bit2;
    210c:	e9 e3       	ldi	r30, 0x39	; 57
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	80 81       	ld	r24, Z
    2112:	86 95       	lsr	r24
    2114:	86 95       	lsr	r24
    2116:	81 70       	andi	r24, 0x01	; 1
    2118:	89 83       	std	Y+1, r24	; 0x01
    211a:	8a c1       	rjmp	.+788    	; 0x2430 <GPIO_readPin+0x414>
				break;
			case 3:
				pin_value = PINA_REG.Bits.Bit3;
    211c:	e9 e3       	ldi	r30, 0x39	; 57
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	80 81       	ld	r24, Z
    2122:	86 95       	lsr	r24
    2124:	86 95       	lsr	r24
    2126:	86 95       	lsr	r24
    2128:	81 70       	andi	r24, 0x01	; 1
    212a:	89 83       	std	Y+1, r24	; 0x01
    212c:	81 c1       	rjmp	.+770    	; 0x2430 <GPIO_readPin+0x414>
				break;
			case 4:
				pin_value = PINA_REG.Bits.Bit4;
    212e:	e9 e3       	ldi	r30, 0x39	; 57
    2130:	f0 e0       	ldi	r31, 0x00	; 0
    2132:	80 81       	ld	r24, Z
    2134:	82 95       	swap	r24
    2136:	8f 70       	andi	r24, 0x0F	; 15
    2138:	81 70       	andi	r24, 0x01	; 1
    213a:	89 83       	std	Y+1, r24	; 0x01
    213c:	79 c1       	rjmp	.+754    	; 0x2430 <GPIO_readPin+0x414>
				break;
			case 5:
				pin_value = PINA_REG.Bits.Bit5;
    213e:	e9 e3       	ldi	r30, 0x39	; 57
    2140:	f0 e0       	ldi	r31, 0x00	; 0
    2142:	80 81       	ld	r24, Z
    2144:	82 95       	swap	r24
    2146:	86 95       	lsr	r24
    2148:	87 70       	andi	r24, 0x07	; 7
    214a:	81 70       	andi	r24, 0x01	; 1
    214c:	89 83       	std	Y+1, r24	; 0x01
    214e:	70 c1       	rjmp	.+736    	; 0x2430 <GPIO_readPin+0x414>
				break;
			case 6:
				pin_value = PINA_REG.Bits.Bit6;
    2150:	e9 e3       	ldi	r30, 0x39	; 57
    2152:	f0 e0       	ldi	r31, 0x00	; 0
    2154:	80 81       	ld	r24, Z
    2156:	82 95       	swap	r24
    2158:	86 95       	lsr	r24
    215a:	86 95       	lsr	r24
    215c:	83 70       	andi	r24, 0x03	; 3
    215e:	81 70       	andi	r24, 0x01	; 1
    2160:	89 83       	std	Y+1, r24	; 0x01
    2162:	66 c1       	rjmp	.+716    	; 0x2430 <GPIO_readPin+0x414>
				break;
			case 7:
				pin_value = PINA_REG.Bits.Bit7;
    2164:	e9 e3       	ldi	r30, 0x39	; 57
    2166:	f0 e0       	ldi	r31, 0x00	; 0
    2168:	80 81       	ld	r24, Z
    216a:	88 1f       	adc	r24, r24
    216c:	88 27       	eor	r24, r24
    216e:	88 1f       	adc	r24, r24
    2170:	89 83       	std	Y+1, r24	; 0x01
    2172:	5e c1       	rjmp	.+700    	; 0x2430 <GPIO_readPin+0x414>
			}
			break;
		}
		case PORTB_ID:
		{
			switch(pin_num)
    2174:	8b 81       	ldd	r24, Y+3	; 0x03
    2176:	28 2f       	mov	r18, r24
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	39 87       	std	Y+9, r19	; 0x09
    217c:	28 87       	std	Y+8, r18	; 0x08
    217e:	88 85       	ldd	r24, Y+8	; 0x08
    2180:	99 85       	ldd	r25, Y+9	; 0x09
    2182:	83 30       	cpi	r24, 0x03	; 3
    2184:	91 05       	cpc	r25, r1
    2186:	09 f4       	brne	.+2      	; 0x218a <GPIO_readPin+0x16e>
    2188:	3e c0       	rjmp	.+124    	; 0x2206 <GPIO_readPin+0x1ea>
    218a:	28 85       	ldd	r18, Y+8	; 0x08
    218c:	39 85       	ldd	r19, Y+9	; 0x09
    218e:	24 30       	cpi	r18, 0x04	; 4
    2190:	31 05       	cpc	r19, r1
    2192:	7c f4       	brge	.+30     	; 0x21b2 <GPIO_readPin+0x196>
    2194:	88 85       	ldd	r24, Y+8	; 0x08
    2196:	99 85       	ldd	r25, Y+9	; 0x09
    2198:	81 30       	cpi	r24, 0x01	; 1
    219a:	91 05       	cpc	r25, r1
    219c:	29 f1       	breq	.+74     	; 0x21e8 <GPIO_readPin+0x1cc>
    219e:	28 85       	ldd	r18, Y+8	; 0x08
    21a0:	39 85       	ldd	r19, Y+9	; 0x09
    21a2:	22 30       	cpi	r18, 0x02	; 2
    21a4:	31 05       	cpc	r19, r1
    21a6:	3c f5       	brge	.+78     	; 0x21f6 <GPIO_readPin+0x1da>
    21a8:	88 85       	ldd	r24, Y+8	; 0x08
    21aa:	99 85       	ldd	r25, Y+9	; 0x09
    21ac:	00 97       	sbiw	r24, 0x00	; 0
    21ae:	b1 f0       	breq	.+44     	; 0x21dc <GPIO_readPin+0x1c0>
    21b0:	3f c1       	rjmp	.+638    	; 0x2430 <GPIO_readPin+0x414>
    21b2:	28 85       	ldd	r18, Y+8	; 0x08
    21b4:	39 85       	ldd	r19, Y+9	; 0x09
    21b6:	25 30       	cpi	r18, 0x05	; 5
    21b8:	31 05       	cpc	r19, r1
    21ba:	b1 f1       	breq	.+108    	; 0x2228 <GPIO_readPin+0x20c>
    21bc:	88 85       	ldd	r24, Y+8	; 0x08
    21be:	99 85       	ldd	r25, Y+9	; 0x09
    21c0:	85 30       	cpi	r24, 0x05	; 5
    21c2:	91 05       	cpc	r25, r1
    21c4:	4c f1       	brlt	.+82     	; 0x2218 <GPIO_readPin+0x1fc>
    21c6:	28 85       	ldd	r18, Y+8	; 0x08
    21c8:	39 85       	ldd	r19, Y+9	; 0x09
    21ca:	26 30       	cpi	r18, 0x06	; 6
    21cc:	31 05       	cpc	r19, r1
    21ce:	a9 f1       	breq	.+106    	; 0x223a <GPIO_readPin+0x21e>
    21d0:	88 85       	ldd	r24, Y+8	; 0x08
    21d2:	99 85       	ldd	r25, Y+9	; 0x09
    21d4:	87 30       	cpi	r24, 0x07	; 7
    21d6:	91 05       	cpc	r25, r1
    21d8:	d1 f1       	breq	.+116    	; 0x224e <GPIO_readPin+0x232>
    21da:	2a c1       	rjmp	.+596    	; 0x2430 <GPIO_readPin+0x414>
			{
			case 0:
				pin_value = PINB_REG.Bits.Bit0;
    21dc:	e6 e3       	ldi	r30, 0x36	; 54
    21de:	f0 e0       	ldi	r31, 0x00	; 0
    21e0:	80 81       	ld	r24, Z
    21e2:	81 70       	andi	r24, 0x01	; 1
    21e4:	89 83       	std	Y+1, r24	; 0x01
    21e6:	24 c1       	rjmp	.+584    	; 0x2430 <GPIO_readPin+0x414>
				break;
			case 1:
				pin_value = PINB_REG.Bits.Bit1;
    21e8:	e6 e3       	ldi	r30, 0x36	; 54
    21ea:	f0 e0       	ldi	r31, 0x00	; 0
    21ec:	80 81       	ld	r24, Z
    21ee:	86 95       	lsr	r24
    21f0:	81 70       	andi	r24, 0x01	; 1
    21f2:	89 83       	std	Y+1, r24	; 0x01
    21f4:	1d c1       	rjmp	.+570    	; 0x2430 <GPIO_readPin+0x414>
				break;
			case 2:
				pin_value = PINB_REG.Bits.Bit2;
    21f6:	e6 e3       	ldi	r30, 0x36	; 54
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	80 81       	ld	r24, Z
    21fc:	86 95       	lsr	r24
    21fe:	86 95       	lsr	r24
    2200:	81 70       	andi	r24, 0x01	; 1
    2202:	89 83       	std	Y+1, r24	; 0x01
    2204:	15 c1       	rjmp	.+554    	; 0x2430 <GPIO_readPin+0x414>
				break;
			case 3:
				pin_value = PINB_REG.Bits.Bit3;
    2206:	e6 e3       	ldi	r30, 0x36	; 54
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	80 81       	ld	r24, Z
    220c:	86 95       	lsr	r24
    220e:	86 95       	lsr	r24
    2210:	86 95       	lsr	r24
    2212:	81 70       	andi	r24, 0x01	; 1
    2214:	89 83       	std	Y+1, r24	; 0x01
    2216:	0c c1       	rjmp	.+536    	; 0x2430 <GPIO_readPin+0x414>
				break;
			case 4:
				pin_value = PINB_REG.Bits.Bit4;
    2218:	e6 e3       	ldi	r30, 0x36	; 54
    221a:	f0 e0       	ldi	r31, 0x00	; 0
    221c:	80 81       	ld	r24, Z
    221e:	82 95       	swap	r24
    2220:	8f 70       	andi	r24, 0x0F	; 15
    2222:	81 70       	andi	r24, 0x01	; 1
    2224:	89 83       	std	Y+1, r24	; 0x01
    2226:	04 c1       	rjmp	.+520    	; 0x2430 <GPIO_readPin+0x414>
				break;
			case 5:
				pin_value = PINB_REG.Bits.Bit5;
    2228:	e6 e3       	ldi	r30, 0x36	; 54
    222a:	f0 e0       	ldi	r31, 0x00	; 0
    222c:	80 81       	ld	r24, Z
    222e:	82 95       	swap	r24
    2230:	86 95       	lsr	r24
    2232:	87 70       	andi	r24, 0x07	; 7
    2234:	81 70       	andi	r24, 0x01	; 1
    2236:	89 83       	std	Y+1, r24	; 0x01
    2238:	fb c0       	rjmp	.+502    	; 0x2430 <GPIO_readPin+0x414>
				break;
			case 6:
				pin_value = PINB_REG.Bits.Bit6;
    223a:	e6 e3       	ldi	r30, 0x36	; 54
    223c:	f0 e0       	ldi	r31, 0x00	; 0
    223e:	80 81       	ld	r24, Z
    2240:	82 95       	swap	r24
    2242:	86 95       	lsr	r24
    2244:	86 95       	lsr	r24
    2246:	83 70       	andi	r24, 0x03	; 3
    2248:	81 70       	andi	r24, 0x01	; 1
    224a:	89 83       	std	Y+1, r24	; 0x01
    224c:	f1 c0       	rjmp	.+482    	; 0x2430 <GPIO_readPin+0x414>
				break;
			case 7:
				pin_value = PINB_REG.Bits.Bit7;
    224e:	e6 e3       	ldi	r30, 0x36	; 54
    2250:	f0 e0       	ldi	r31, 0x00	; 0
    2252:	80 81       	ld	r24, Z
    2254:	88 1f       	adc	r24, r24
    2256:	88 27       	eor	r24, r24
    2258:	88 1f       	adc	r24, r24
    225a:	89 83       	std	Y+1, r24	; 0x01
    225c:	e9 c0       	rjmp	.+466    	; 0x2430 <GPIO_readPin+0x414>
			}
			break;
		}
		case PORTC_ID:
		{
			switch(pin_num)
    225e:	8b 81       	ldd	r24, Y+3	; 0x03
    2260:	28 2f       	mov	r18, r24
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	3f 83       	std	Y+7, r19	; 0x07
    2266:	2e 83       	std	Y+6, r18	; 0x06
    2268:	8e 81       	ldd	r24, Y+6	; 0x06
    226a:	9f 81       	ldd	r25, Y+7	; 0x07
    226c:	83 30       	cpi	r24, 0x03	; 3
    226e:	91 05       	cpc	r25, r1
    2270:	09 f4       	brne	.+2      	; 0x2274 <GPIO_readPin+0x258>
    2272:	3e c0       	rjmp	.+124    	; 0x22f0 <GPIO_readPin+0x2d4>
    2274:	2e 81       	ldd	r18, Y+6	; 0x06
    2276:	3f 81       	ldd	r19, Y+7	; 0x07
    2278:	24 30       	cpi	r18, 0x04	; 4
    227a:	31 05       	cpc	r19, r1
    227c:	7c f4       	brge	.+30     	; 0x229c <GPIO_readPin+0x280>
    227e:	8e 81       	ldd	r24, Y+6	; 0x06
    2280:	9f 81       	ldd	r25, Y+7	; 0x07
    2282:	81 30       	cpi	r24, 0x01	; 1
    2284:	91 05       	cpc	r25, r1
    2286:	29 f1       	breq	.+74     	; 0x22d2 <GPIO_readPin+0x2b6>
    2288:	2e 81       	ldd	r18, Y+6	; 0x06
    228a:	3f 81       	ldd	r19, Y+7	; 0x07
    228c:	22 30       	cpi	r18, 0x02	; 2
    228e:	31 05       	cpc	r19, r1
    2290:	3c f5       	brge	.+78     	; 0x22e0 <GPIO_readPin+0x2c4>
    2292:	8e 81       	ldd	r24, Y+6	; 0x06
    2294:	9f 81       	ldd	r25, Y+7	; 0x07
    2296:	00 97       	sbiw	r24, 0x00	; 0
    2298:	b1 f0       	breq	.+44     	; 0x22c6 <GPIO_readPin+0x2aa>
    229a:	ca c0       	rjmp	.+404    	; 0x2430 <GPIO_readPin+0x414>
    229c:	2e 81       	ldd	r18, Y+6	; 0x06
    229e:	3f 81       	ldd	r19, Y+7	; 0x07
    22a0:	25 30       	cpi	r18, 0x05	; 5
    22a2:	31 05       	cpc	r19, r1
    22a4:	b1 f1       	breq	.+108    	; 0x2312 <GPIO_readPin+0x2f6>
    22a6:	8e 81       	ldd	r24, Y+6	; 0x06
    22a8:	9f 81       	ldd	r25, Y+7	; 0x07
    22aa:	85 30       	cpi	r24, 0x05	; 5
    22ac:	91 05       	cpc	r25, r1
    22ae:	4c f1       	brlt	.+82     	; 0x2302 <GPIO_readPin+0x2e6>
    22b0:	2e 81       	ldd	r18, Y+6	; 0x06
    22b2:	3f 81       	ldd	r19, Y+7	; 0x07
    22b4:	26 30       	cpi	r18, 0x06	; 6
    22b6:	31 05       	cpc	r19, r1
    22b8:	a9 f1       	breq	.+106    	; 0x2324 <GPIO_readPin+0x308>
    22ba:	8e 81       	ldd	r24, Y+6	; 0x06
    22bc:	9f 81       	ldd	r25, Y+7	; 0x07
    22be:	87 30       	cpi	r24, 0x07	; 7
    22c0:	91 05       	cpc	r25, r1
    22c2:	d1 f1       	breq	.+116    	; 0x2338 <GPIO_readPin+0x31c>
    22c4:	b5 c0       	rjmp	.+362    	; 0x2430 <GPIO_readPin+0x414>
			{
			case 0:
				pin_value = PINC_REG.Bits.Bit0;
    22c6:	e3 e3       	ldi	r30, 0x33	; 51
    22c8:	f0 e0       	ldi	r31, 0x00	; 0
    22ca:	80 81       	ld	r24, Z
    22cc:	81 70       	andi	r24, 0x01	; 1
    22ce:	89 83       	std	Y+1, r24	; 0x01
    22d0:	af c0       	rjmp	.+350    	; 0x2430 <GPIO_readPin+0x414>
				break;
			case 1:
				pin_value = PINC_REG.Bits.Bit1;
    22d2:	e3 e3       	ldi	r30, 0x33	; 51
    22d4:	f0 e0       	ldi	r31, 0x00	; 0
    22d6:	80 81       	ld	r24, Z
    22d8:	86 95       	lsr	r24
    22da:	81 70       	andi	r24, 0x01	; 1
    22dc:	89 83       	std	Y+1, r24	; 0x01
    22de:	a8 c0       	rjmp	.+336    	; 0x2430 <GPIO_readPin+0x414>
				break;
			case 2:
				pin_value = PINC_REG.Bits.Bit2;
    22e0:	e3 e3       	ldi	r30, 0x33	; 51
    22e2:	f0 e0       	ldi	r31, 0x00	; 0
    22e4:	80 81       	ld	r24, Z
    22e6:	86 95       	lsr	r24
    22e8:	86 95       	lsr	r24
    22ea:	81 70       	andi	r24, 0x01	; 1
    22ec:	89 83       	std	Y+1, r24	; 0x01
    22ee:	a0 c0       	rjmp	.+320    	; 0x2430 <GPIO_readPin+0x414>
				break;
			case 3:
				pin_value = PINC_REG.Bits.Bit3;
    22f0:	e3 e3       	ldi	r30, 0x33	; 51
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	80 81       	ld	r24, Z
    22f6:	86 95       	lsr	r24
    22f8:	86 95       	lsr	r24
    22fa:	86 95       	lsr	r24
    22fc:	81 70       	andi	r24, 0x01	; 1
    22fe:	89 83       	std	Y+1, r24	; 0x01
    2300:	97 c0       	rjmp	.+302    	; 0x2430 <GPIO_readPin+0x414>
				break;
			case 4:
				pin_value = PINC_REG.Bits.Bit4;
    2302:	e3 e3       	ldi	r30, 0x33	; 51
    2304:	f0 e0       	ldi	r31, 0x00	; 0
    2306:	80 81       	ld	r24, Z
    2308:	82 95       	swap	r24
    230a:	8f 70       	andi	r24, 0x0F	; 15
    230c:	81 70       	andi	r24, 0x01	; 1
    230e:	89 83       	std	Y+1, r24	; 0x01
    2310:	8f c0       	rjmp	.+286    	; 0x2430 <GPIO_readPin+0x414>
				break;
			case 5:
				pin_value = PINC_REG.Bits.Bit5;
    2312:	e3 e3       	ldi	r30, 0x33	; 51
    2314:	f0 e0       	ldi	r31, 0x00	; 0
    2316:	80 81       	ld	r24, Z
    2318:	82 95       	swap	r24
    231a:	86 95       	lsr	r24
    231c:	87 70       	andi	r24, 0x07	; 7
    231e:	81 70       	andi	r24, 0x01	; 1
    2320:	89 83       	std	Y+1, r24	; 0x01
    2322:	86 c0       	rjmp	.+268    	; 0x2430 <GPIO_readPin+0x414>
				break;
			case 6:
				pin_value = PINC_REG.Bits.Bit6;
    2324:	e3 e3       	ldi	r30, 0x33	; 51
    2326:	f0 e0       	ldi	r31, 0x00	; 0
    2328:	80 81       	ld	r24, Z
    232a:	82 95       	swap	r24
    232c:	86 95       	lsr	r24
    232e:	86 95       	lsr	r24
    2330:	83 70       	andi	r24, 0x03	; 3
    2332:	81 70       	andi	r24, 0x01	; 1
    2334:	89 83       	std	Y+1, r24	; 0x01
    2336:	7c c0       	rjmp	.+248    	; 0x2430 <GPIO_readPin+0x414>
				break;
			case 7:
				pin_value = PINC_REG.Bits.Bit7;
    2338:	e3 e3       	ldi	r30, 0x33	; 51
    233a:	f0 e0       	ldi	r31, 0x00	; 0
    233c:	80 81       	ld	r24, Z
    233e:	88 1f       	adc	r24, r24
    2340:	88 27       	eor	r24, r24
    2342:	88 1f       	adc	r24, r24
    2344:	89 83       	std	Y+1, r24	; 0x01
    2346:	74 c0       	rjmp	.+232    	; 0x2430 <GPIO_readPin+0x414>
			}
			break;
		}
		case PORTD_ID:
		{
			switch(pin_num)
    2348:	8b 81       	ldd	r24, Y+3	; 0x03
    234a:	28 2f       	mov	r18, r24
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	3d 83       	std	Y+5, r19	; 0x05
    2350:	2c 83       	std	Y+4, r18	; 0x04
    2352:	8c 81       	ldd	r24, Y+4	; 0x04
    2354:	9d 81       	ldd	r25, Y+5	; 0x05
    2356:	83 30       	cpi	r24, 0x03	; 3
    2358:	91 05       	cpc	r25, r1
    235a:	09 f4       	brne	.+2      	; 0x235e <GPIO_readPin+0x342>
    235c:	3e c0       	rjmp	.+124    	; 0x23da <GPIO_readPin+0x3be>
    235e:	2c 81       	ldd	r18, Y+4	; 0x04
    2360:	3d 81       	ldd	r19, Y+5	; 0x05
    2362:	24 30       	cpi	r18, 0x04	; 4
    2364:	31 05       	cpc	r19, r1
    2366:	7c f4       	brge	.+30     	; 0x2386 <GPIO_readPin+0x36a>
    2368:	8c 81       	ldd	r24, Y+4	; 0x04
    236a:	9d 81       	ldd	r25, Y+5	; 0x05
    236c:	81 30       	cpi	r24, 0x01	; 1
    236e:	91 05       	cpc	r25, r1
    2370:	29 f1       	breq	.+74     	; 0x23bc <GPIO_readPin+0x3a0>
    2372:	2c 81       	ldd	r18, Y+4	; 0x04
    2374:	3d 81       	ldd	r19, Y+5	; 0x05
    2376:	22 30       	cpi	r18, 0x02	; 2
    2378:	31 05       	cpc	r19, r1
    237a:	3c f5       	brge	.+78     	; 0x23ca <GPIO_readPin+0x3ae>
    237c:	8c 81       	ldd	r24, Y+4	; 0x04
    237e:	9d 81       	ldd	r25, Y+5	; 0x05
    2380:	00 97       	sbiw	r24, 0x00	; 0
    2382:	b1 f0       	breq	.+44     	; 0x23b0 <GPIO_readPin+0x394>
    2384:	55 c0       	rjmp	.+170    	; 0x2430 <GPIO_readPin+0x414>
    2386:	2c 81       	ldd	r18, Y+4	; 0x04
    2388:	3d 81       	ldd	r19, Y+5	; 0x05
    238a:	25 30       	cpi	r18, 0x05	; 5
    238c:	31 05       	cpc	r19, r1
    238e:	b1 f1       	breq	.+108    	; 0x23fc <GPIO_readPin+0x3e0>
    2390:	8c 81       	ldd	r24, Y+4	; 0x04
    2392:	9d 81       	ldd	r25, Y+5	; 0x05
    2394:	85 30       	cpi	r24, 0x05	; 5
    2396:	91 05       	cpc	r25, r1
    2398:	4c f1       	brlt	.+82     	; 0x23ec <GPIO_readPin+0x3d0>
    239a:	2c 81       	ldd	r18, Y+4	; 0x04
    239c:	3d 81       	ldd	r19, Y+5	; 0x05
    239e:	26 30       	cpi	r18, 0x06	; 6
    23a0:	31 05       	cpc	r19, r1
    23a2:	a9 f1       	breq	.+106    	; 0x240e <GPIO_readPin+0x3f2>
    23a4:	8c 81       	ldd	r24, Y+4	; 0x04
    23a6:	9d 81       	ldd	r25, Y+5	; 0x05
    23a8:	87 30       	cpi	r24, 0x07	; 7
    23aa:	91 05       	cpc	r25, r1
    23ac:	d1 f1       	breq	.+116    	; 0x2422 <GPIO_readPin+0x406>
    23ae:	40 c0       	rjmp	.+128    	; 0x2430 <GPIO_readPin+0x414>
			{
			case 0:
				pin_value = PIND_REG.Bits.Bit0;
    23b0:	e0 e3       	ldi	r30, 0x30	; 48
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	80 81       	ld	r24, Z
    23b6:	81 70       	andi	r24, 0x01	; 1
    23b8:	89 83       	std	Y+1, r24	; 0x01
    23ba:	3a c0       	rjmp	.+116    	; 0x2430 <GPIO_readPin+0x414>
				break;
			case 1:
				pin_value = PIND_REG.Bits.Bit1;
    23bc:	e0 e3       	ldi	r30, 0x30	; 48
    23be:	f0 e0       	ldi	r31, 0x00	; 0
    23c0:	80 81       	ld	r24, Z
    23c2:	86 95       	lsr	r24
    23c4:	81 70       	andi	r24, 0x01	; 1
    23c6:	89 83       	std	Y+1, r24	; 0x01
    23c8:	33 c0       	rjmp	.+102    	; 0x2430 <GPIO_readPin+0x414>
				break;
			case 2:
				pin_value = PIND_REG.Bits.Bit2;
    23ca:	e0 e3       	ldi	r30, 0x30	; 48
    23cc:	f0 e0       	ldi	r31, 0x00	; 0
    23ce:	80 81       	ld	r24, Z
    23d0:	86 95       	lsr	r24
    23d2:	86 95       	lsr	r24
    23d4:	81 70       	andi	r24, 0x01	; 1
    23d6:	89 83       	std	Y+1, r24	; 0x01
    23d8:	2b c0       	rjmp	.+86     	; 0x2430 <GPIO_readPin+0x414>
				break;
			case 3:
				pin_value = PIND_REG.Bits.Bit3;
    23da:	e0 e3       	ldi	r30, 0x30	; 48
    23dc:	f0 e0       	ldi	r31, 0x00	; 0
    23de:	80 81       	ld	r24, Z
    23e0:	86 95       	lsr	r24
    23e2:	86 95       	lsr	r24
    23e4:	86 95       	lsr	r24
    23e6:	81 70       	andi	r24, 0x01	; 1
    23e8:	89 83       	std	Y+1, r24	; 0x01
    23ea:	22 c0       	rjmp	.+68     	; 0x2430 <GPIO_readPin+0x414>
				break;
			case 4:
				pin_value = PIND_REG.Bits.Bit4;
    23ec:	e0 e3       	ldi	r30, 0x30	; 48
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	80 81       	ld	r24, Z
    23f2:	82 95       	swap	r24
    23f4:	8f 70       	andi	r24, 0x0F	; 15
    23f6:	81 70       	andi	r24, 0x01	; 1
    23f8:	89 83       	std	Y+1, r24	; 0x01
    23fa:	1a c0       	rjmp	.+52     	; 0x2430 <GPIO_readPin+0x414>
				break;
			case 5:
				pin_value = PIND_REG.Bits.Bit5;
    23fc:	e0 e3       	ldi	r30, 0x30	; 48
    23fe:	f0 e0       	ldi	r31, 0x00	; 0
    2400:	80 81       	ld	r24, Z
    2402:	82 95       	swap	r24
    2404:	86 95       	lsr	r24
    2406:	87 70       	andi	r24, 0x07	; 7
    2408:	81 70       	andi	r24, 0x01	; 1
    240a:	89 83       	std	Y+1, r24	; 0x01
    240c:	11 c0       	rjmp	.+34     	; 0x2430 <GPIO_readPin+0x414>
				break;
			case 6:
				pin_value = PIND_REG.Bits.Bit6;
    240e:	e0 e3       	ldi	r30, 0x30	; 48
    2410:	f0 e0       	ldi	r31, 0x00	; 0
    2412:	80 81       	ld	r24, Z
    2414:	82 95       	swap	r24
    2416:	86 95       	lsr	r24
    2418:	86 95       	lsr	r24
    241a:	83 70       	andi	r24, 0x03	; 3
    241c:	81 70       	andi	r24, 0x01	; 1
    241e:	89 83       	std	Y+1, r24	; 0x01
    2420:	07 c0       	rjmp	.+14     	; 0x2430 <GPIO_readPin+0x414>
				break;
			case 7:
				pin_value = PIND_REG.Bits.Bit7;
    2422:	e0 e3       	ldi	r30, 0x30	; 48
    2424:	f0 e0       	ldi	r31, 0x00	; 0
    2426:	80 81       	ld	r24, Z
    2428:	88 1f       	adc	r24, r24
    242a:	88 27       	eor	r24, r24
    242c:	88 1f       	adc	r24, r24
    242e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
		}
	}

	return pin_value;
    2430:	89 81       	ldd	r24, Y+1	; 0x01
}
    2432:	2d 96       	adiw	r28, 0x0d	; 13
    2434:	0f b6       	in	r0, 0x3f	; 63
    2436:	f8 94       	cli
    2438:	de bf       	out	0x3e, r29	; 62
    243a:	0f be       	out	0x3f, r0	; 63
    243c:	cd bf       	out	0x3d, r28	; 61
    243e:	cf 91       	pop	r28
    2440:	df 91       	pop	r29
    2442:	08 95       	ret

00002444 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2444:	df 93       	push	r29
    2446:	cf 93       	push	r28
    2448:	00 d0       	rcall	.+0      	; 0x244a <GPIO_setupPortDirection+0x6>
    244a:	00 d0       	rcall	.+0      	; 0x244c <GPIO_setupPortDirection+0x8>
    244c:	cd b7       	in	r28, 0x3d	; 61
    244e:	de b7       	in	r29, 0x3e	; 62
    2450:	89 83       	std	Y+1, r24	; 0x01
    2452:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2454:	89 81       	ldd	r24, Y+1	; 0x01
    2456:	84 30       	cpi	r24, 0x04	; 4
    2458:	90 f5       	brcc	.+100    	; 0x24be <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    245a:	89 81       	ldd	r24, Y+1	; 0x01
    245c:	28 2f       	mov	r18, r24
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	3c 83       	std	Y+4, r19	; 0x04
    2462:	2b 83       	std	Y+3, r18	; 0x03
    2464:	8b 81       	ldd	r24, Y+3	; 0x03
    2466:	9c 81       	ldd	r25, Y+4	; 0x04
    2468:	81 30       	cpi	r24, 0x01	; 1
    246a:	91 05       	cpc	r25, r1
    246c:	d1 f0       	breq	.+52     	; 0x24a2 <GPIO_setupPortDirection+0x5e>
    246e:	2b 81       	ldd	r18, Y+3	; 0x03
    2470:	3c 81       	ldd	r19, Y+4	; 0x04
    2472:	22 30       	cpi	r18, 0x02	; 2
    2474:	31 05       	cpc	r19, r1
    2476:	2c f4       	brge	.+10     	; 0x2482 <GPIO_setupPortDirection+0x3e>
    2478:	8b 81       	ldd	r24, Y+3	; 0x03
    247a:	9c 81       	ldd	r25, Y+4	; 0x04
    247c:	00 97       	sbiw	r24, 0x00	; 0
    247e:	61 f0       	breq	.+24     	; 0x2498 <GPIO_setupPortDirection+0x54>
    2480:	1e c0       	rjmp	.+60     	; 0x24be <GPIO_setupPortDirection+0x7a>
    2482:	2b 81       	ldd	r18, Y+3	; 0x03
    2484:	3c 81       	ldd	r19, Y+4	; 0x04
    2486:	22 30       	cpi	r18, 0x02	; 2
    2488:	31 05       	cpc	r19, r1
    248a:	81 f0       	breq	.+32     	; 0x24ac <GPIO_setupPortDirection+0x68>
    248c:	8b 81       	ldd	r24, Y+3	; 0x03
    248e:	9c 81       	ldd	r25, Y+4	; 0x04
    2490:	83 30       	cpi	r24, 0x03	; 3
    2492:	91 05       	cpc	r25, r1
    2494:	81 f0       	breq	.+32     	; 0x24b6 <GPIO_setupPortDirection+0x72>
    2496:	13 c0       	rjmp	.+38     	; 0x24be <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA_REG.Byte = direction;
    2498:	ea e3       	ldi	r30, 0x3A	; 58
    249a:	f0 e0       	ldi	r31, 0x00	; 0
    249c:	8a 81       	ldd	r24, Y+2	; 0x02
    249e:	80 83       	st	Z, r24
    24a0:	0e c0       	rjmp	.+28     	; 0x24be <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB_REG.Byte = direction;
    24a2:	e7 e3       	ldi	r30, 0x37	; 55
    24a4:	f0 e0       	ldi	r31, 0x00	; 0
    24a6:	8a 81       	ldd	r24, Y+2	; 0x02
    24a8:	80 83       	st	Z, r24
    24aa:	09 c0       	rjmp	.+18     	; 0x24be <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC_REG.Byte = direction;
    24ac:	e4 e3       	ldi	r30, 0x34	; 52
    24ae:	f0 e0       	ldi	r31, 0x00	; 0
    24b0:	8a 81       	ldd	r24, Y+2	; 0x02
    24b2:	80 83       	st	Z, r24
    24b4:	04 c0       	rjmp	.+8      	; 0x24be <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD_REG.Byte = direction;
    24b6:	e1 e3       	ldi	r30, 0x31	; 49
    24b8:	f0 e0       	ldi	r31, 0x00	; 0
    24ba:	8a 81       	ldd	r24, Y+2	; 0x02
    24bc:	80 83       	st	Z, r24
			break;
		}
	}
}
    24be:	0f 90       	pop	r0
    24c0:	0f 90       	pop	r0
    24c2:	0f 90       	pop	r0
    24c4:	0f 90       	pop	r0
    24c6:	cf 91       	pop	r28
    24c8:	df 91       	pop	r29
    24ca:	08 95       	ret

000024cc <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    24cc:	df 93       	push	r29
    24ce:	cf 93       	push	r28
    24d0:	00 d0       	rcall	.+0      	; 0x24d2 <GPIO_writePort+0x6>
    24d2:	00 d0       	rcall	.+0      	; 0x24d4 <GPIO_writePort+0x8>
    24d4:	cd b7       	in	r28, 0x3d	; 61
    24d6:	de b7       	in	r29, 0x3e	; 62
    24d8:	89 83       	std	Y+1, r24	; 0x01
    24da:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    24dc:	89 81       	ldd	r24, Y+1	; 0x01
    24de:	84 30       	cpi	r24, 0x04	; 4
    24e0:	90 f5       	brcc	.+100    	; 0x2546 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    24e2:	89 81       	ldd	r24, Y+1	; 0x01
    24e4:	28 2f       	mov	r18, r24
    24e6:	30 e0       	ldi	r19, 0x00	; 0
    24e8:	3c 83       	std	Y+4, r19	; 0x04
    24ea:	2b 83       	std	Y+3, r18	; 0x03
    24ec:	8b 81       	ldd	r24, Y+3	; 0x03
    24ee:	9c 81       	ldd	r25, Y+4	; 0x04
    24f0:	81 30       	cpi	r24, 0x01	; 1
    24f2:	91 05       	cpc	r25, r1
    24f4:	d1 f0       	breq	.+52     	; 0x252a <GPIO_writePort+0x5e>
    24f6:	2b 81       	ldd	r18, Y+3	; 0x03
    24f8:	3c 81       	ldd	r19, Y+4	; 0x04
    24fa:	22 30       	cpi	r18, 0x02	; 2
    24fc:	31 05       	cpc	r19, r1
    24fe:	2c f4       	brge	.+10     	; 0x250a <GPIO_writePort+0x3e>
    2500:	8b 81       	ldd	r24, Y+3	; 0x03
    2502:	9c 81       	ldd	r25, Y+4	; 0x04
    2504:	00 97       	sbiw	r24, 0x00	; 0
    2506:	61 f0       	breq	.+24     	; 0x2520 <GPIO_writePort+0x54>
    2508:	1e c0       	rjmp	.+60     	; 0x2546 <GPIO_writePort+0x7a>
    250a:	2b 81       	ldd	r18, Y+3	; 0x03
    250c:	3c 81       	ldd	r19, Y+4	; 0x04
    250e:	22 30       	cpi	r18, 0x02	; 2
    2510:	31 05       	cpc	r19, r1
    2512:	81 f0       	breq	.+32     	; 0x2534 <GPIO_writePort+0x68>
    2514:	8b 81       	ldd	r24, Y+3	; 0x03
    2516:	9c 81       	ldd	r25, Y+4	; 0x04
    2518:	83 30       	cpi	r24, 0x03	; 3
    251a:	91 05       	cpc	r25, r1
    251c:	81 f0       	breq	.+32     	; 0x253e <GPIO_writePort+0x72>
    251e:	13 c0       	rjmp	.+38     	; 0x2546 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA_REG.Byte = value;
    2520:	eb e3       	ldi	r30, 0x3B	; 59
    2522:	f0 e0       	ldi	r31, 0x00	; 0
    2524:	8a 81       	ldd	r24, Y+2	; 0x02
    2526:	80 83       	st	Z, r24
    2528:	0e c0       	rjmp	.+28     	; 0x2546 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB_REG.Byte = value;
    252a:	e8 e3       	ldi	r30, 0x38	; 56
    252c:	f0 e0       	ldi	r31, 0x00	; 0
    252e:	8a 81       	ldd	r24, Y+2	; 0x02
    2530:	80 83       	st	Z, r24
    2532:	09 c0       	rjmp	.+18     	; 0x2546 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC_REG.Byte = value;
    2534:	e5 e3       	ldi	r30, 0x35	; 53
    2536:	f0 e0       	ldi	r31, 0x00	; 0
    2538:	8a 81       	ldd	r24, Y+2	; 0x02
    253a:	80 83       	st	Z, r24
    253c:	04 c0       	rjmp	.+8      	; 0x2546 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD_REG.Byte = value;
    253e:	e2 e3       	ldi	r30, 0x32	; 50
    2540:	f0 e0       	ldi	r31, 0x00	; 0
    2542:	8a 81       	ldd	r24, Y+2	; 0x02
    2544:	80 83       	st	Z, r24
			break;
		}
	}
}
    2546:	0f 90       	pop	r0
    2548:	0f 90       	pop	r0
    254a:	0f 90       	pop	r0
    254c:	0f 90       	pop	r0
    254e:	cf 91       	pop	r28
    2550:	df 91       	pop	r29
    2552:	08 95       	ret

00002554 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2554:	df 93       	push	r29
    2556:	cf 93       	push	r28
    2558:	00 d0       	rcall	.+0      	; 0x255a <GPIO_readPort+0x6>
    255a:	00 d0       	rcall	.+0      	; 0x255c <GPIO_readPort+0x8>
    255c:	cd b7       	in	r28, 0x3d	; 61
    255e:	de b7       	in	r29, 0x3e	; 62
    2560:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2562:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2564:	8a 81       	ldd	r24, Y+2	; 0x02
    2566:	84 30       	cpi	r24, 0x04	; 4
    2568:	90 f5       	brcc	.+100    	; 0x25ce <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    256a:	8a 81       	ldd	r24, Y+2	; 0x02
    256c:	28 2f       	mov	r18, r24
    256e:	30 e0       	ldi	r19, 0x00	; 0
    2570:	3c 83       	std	Y+4, r19	; 0x04
    2572:	2b 83       	std	Y+3, r18	; 0x03
    2574:	8b 81       	ldd	r24, Y+3	; 0x03
    2576:	9c 81       	ldd	r25, Y+4	; 0x04
    2578:	81 30       	cpi	r24, 0x01	; 1
    257a:	91 05       	cpc	r25, r1
    257c:	d1 f0       	breq	.+52     	; 0x25b2 <GPIO_readPort+0x5e>
    257e:	2b 81       	ldd	r18, Y+3	; 0x03
    2580:	3c 81       	ldd	r19, Y+4	; 0x04
    2582:	22 30       	cpi	r18, 0x02	; 2
    2584:	31 05       	cpc	r19, r1
    2586:	2c f4       	brge	.+10     	; 0x2592 <GPIO_readPort+0x3e>
    2588:	8b 81       	ldd	r24, Y+3	; 0x03
    258a:	9c 81       	ldd	r25, Y+4	; 0x04
    258c:	00 97       	sbiw	r24, 0x00	; 0
    258e:	61 f0       	breq	.+24     	; 0x25a8 <GPIO_readPort+0x54>
    2590:	1e c0       	rjmp	.+60     	; 0x25ce <GPIO_readPort+0x7a>
    2592:	2b 81       	ldd	r18, Y+3	; 0x03
    2594:	3c 81       	ldd	r19, Y+4	; 0x04
    2596:	22 30       	cpi	r18, 0x02	; 2
    2598:	31 05       	cpc	r19, r1
    259a:	81 f0       	breq	.+32     	; 0x25bc <GPIO_readPort+0x68>
    259c:	8b 81       	ldd	r24, Y+3	; 0x03
    259e:	9c 81       	ldd	r25, Y+4	; 0x04
    25a0:	83 30       	cpi	r24, 0x03	; 3
    25a2:	91 05       	cpc	r25, r1
    25a4:	81 f0       	breq	.+32     	; 0x25c6 <GPIO_readPort+0x72>
    25a6:	13 c0       	rjmp	.+38     	; 0x25ce <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA_REG.Byte;
    25a8:	e9 e3       	ldi	r30, 0x39	; 57
    25aa:	f0 e0       	ldi	r31, 0x00	; 0
    25ac:	80 81       	ld	r24, Z
    25ae:	89 83       	std	Y+1, r24	; 0x01
    25b0:	0e c0       	rjmp	.+28     	; 0x25ce <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB_REG.Byte;
    25b2:	e6 e3       	ldi	r30, 0x36	; 54
    25b4:	f0 e0       	ldi	r31, 0x00	; 0
    25b6:	80 81       	ld	r24, Z
    25b8:	89 83       	std	Y+1, r24	; 0x01
    25ba:	09 c0       	rjmp	.+18     	; 0x25ce <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC_REG.Byte;
    25bc:	e3 e3       	ldi	r30, 0x33	; 51
    25be:	f0 e0       	ldi	r31, 0x00	; 0
    25c0:	80 81       	ld	r24, Z
    25c2:	89 83       	std	Y+1, r24	; 0x01
    25c4:	04 c0       	rjmp	.+8      	; 0x25ce <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND_REG.Byte;
    25c6:	e0 e3       	ldi	r30, 0x30	; 48
    25c8:	f0 e0       	ldi	r31, 0x00	; 0
    25ca:	80 81       	ld	r24, Z
    25cc:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    25ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    25d0:	0f 90       	pop	r0
    25d2:	0f 90       	pop	r0
    25d4:	0f 90       	pop	r0
    25d6:	0f 90       	pop	r0
    25d8:	cf 91       	pop	r28
    25da:	df 91       	pop	r29
    25dc:	08 95       	ret

000025de <KEYPAD_4X4_Not_Standard_Keypad>:
#include <util/delay.h>

#if(KEYPAD_NUM_COLS==4)
	#if(STANDARD_KEYPAD==FALSE)
		static uint8 KEYPAD_4X4_Not_Standard_Keypad(uint8 num)
		{
    25de:	df 93       	push	r29
    25e0:	cf 93       	push	r28
    25e2:	00 d0       	rcall	.+0      	; 0x25e4 <KEYPAD_4X4_Not_Standard_Keypad+0x6>
    25e4:	00 d0       	rcall	.+0      	; 0x25e6 <KEYPAD_4X4_Not_Standard_Keypad+0x8>
    25e6:	cd b7       	in	r28, 0x3d	; 61
    25e8:	de b7       	in	r29, 0x3e	; 62
    25ea:	89 83       	std	Y+1, r24	; 0x01
			switch(num)
    25ec:	89 81       	ldd	r24, Y+1	; 0x01
    25ee:	28 2f       	mov	r18, r24
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	3c 83       	std	Y+4, r19	; 0x04
    25f4:	2b 83       	std	Y+3, r18	; 0x03
    25f6:	8b 81       	ldd	r24, Y+3	; 0x03
    25f8:	9c 81       	ldd	r25, Y+4	; 0x04
    25fa:	88 30       	cpi	r24, 0x08	; 8
    25fc:	91 05       	cpc	r25, r1
    25fe:	09 f4       	brne	.+2      	; 0x2602 <KEYPAD_4X4_Not_Standard_Keypad+0x24>
    2600:	6f c0       	rjmp	.+222    	; 0x26e0 <KEYPAD_4X4_Not_Standard_Keypad+0x102>
    2602:	2b 81       	ldd	r18, Y+3	; 0x03
    2604:	3c 81       	ldd	r19, Y+4	; 0x04
    2606:	29 30       	cpi	r18, 0x09	; 9
    2608:	31 05       	cpc	r19, r1
    260a:	54 f5       	brge	.+84     	; 0x2660 <KEYPAD_4X4_Not_Standard_Keypad+0x82>
    260c:	8b 81       	ldd	r24, Y+3	; 0x03
    260e:	9c 81       	ldd	r25, Y+4	; 0x04
    2610:	84 30       	cpi	r24, 0x04	; 4
    2612:	91 05       	cpc	r25, r1
    2614:	09 f4       	brne	.+2      	; 0x2618 <KEYPAD_4X4_Not_Standard_Keypad+0x3a>
    2616:	58 c0       	rjmp	.+176    	; 0x26c8 <KEYPAD_4X4_Not_Standard_Keypad+0xea>
    2618:	2b 81       	ldd	r18, Y+3	; 0x03
    261a:	3c 81       	ldd	r19, Y+4	; 0x04
    261c:	25 30       	cpi	r18, 0x05	; 5
    261e:	31 05       	cpc	r19, r1
    2620:	94 f4       	brge	.+36     	; 0x2646 <KEYPAD_4X4_Not_Standard_Keypad+0x68>
    2622:	8b 81       	ldd	r24, Y+3	; 0x03
    2624:	9c 81       	ldd	r25, Y+4	; 0x04
    2626:	82 30       	cpi	r24, 0x02	; 2
    2628:	91 05       	cpc	r25, r1
    262a:	09 f4       	brne	.+2      	; 0x262e <KEYPAD_4X4_Not_Standard_Keypad+0x50>
    262c:	47 c0       	rjmp	.+142    	; 0x26bc <KEYPAD_4X4_Not_Standard_Keypad+0xde>
    262e:	2b 81       	ldd	r18, Y+3	; 0x03
    2630:	3c 81       	ldd	r19, Y+4	; 0x04
    2632:	23 30       	cpi	r18, 0x03	; 3
    2634:	31 05       	cpc	r19, r1
    2636:	0c f0       	brlt	.+2      	; 0x263a <KEYPAD_4X4_Not_Standard_Keypad+0x5c>
    2638:	44 c0       	rjmp	.+136    	; 0x26c2 <KEYPAD_4X4_Not_Standard_Keypad+0xe4>
    263a:	8b 81       	ldd	r24, Y+3	; 0x03
    263c:	9c 81       	ldd	r25, Y+4	; 0x04
    263e:	81 30       	cpi	r24, 0x01	; 1
    2640:	91 05       	cpc	r25, r1
    2642:	c9 f1       	breq	.+114    	; 0x26b6 <KEYPAD_4X4_Not_Standard_Keypad+0xd8>
    2644:	66 c0       	rjmp	.+204    	; 0x2712 <KEYPAD_4X4_Not_Standard_Keypad+0x134>
    2646:	2b 81       	ldd	r18, Y+3	; 0x03
    2648:	3c 81       	ldd	r19, Y+4	; 0x04
    264a:	26 30       	cpi	r18, 0x06	; 6
    264c:	31 05       	cpc	r19, r1
    264e:	09 f4       	brne	.+2      	; 0x2652 <KEYPAD_4X4_Not_Standard_Keypad+0x74>
    2650:	41 c0       	rjmp	.+130    	; 0x26d4 <KEYPAD_4X4_Not_Standard_Keypad+0xf6>
    2652:	8b 81       	ldd	r24, Y+3	; 0x03
    2654:	9c 81       	ldd	r25, Y+4	; 0x04
    2656:	87 30       	cpi	r24, 0x07	; 7
    2658:	91 05       	cpc	r25, r1
    265a:	0c f0       	brlt	.+2      	; 0x265e <KEYPAD_4X4_Not_Standard_Keypad+0x80>
    265c:	3e c0       	rjmp	.+124    	; 0x26da <KEYPAD_4X4_Not_Standard_Keypad+0xfc>
    265e:	37 c0       	rjmp	.+110    	; 0x26ce <KEYPAD_4X4_Not_Standard_Keypad+0xf0>
    2660:	2b 81       	ldd	r18, Y+3	; 0x03
    2662:	3c 81       	ldd	r19, Y+4	; 0x04
    2664:	2c 30       	cpi	r18, 0x0C	; 12
    2666:	31 05       	cpc	r19, r1
    2668:	09 f4       	brne	.+2      	; 0x266c <KEYPAD_4X4_Not_Standard_Keypad+0x8e>
    266a:	46 c0       	rjmp	.+140    	; 0x26f8 <KEYPAD_4X4_Not_Standard_Keypad+0x11a>
    266c:	8b 81       	ldd	r24, Y+3	; 0x03
    266e:	9c 81       	ldd	r25, Y+4	; 0x04
    2670:	8d 30       	cpi	r24, 0x0D	; 13
    2672:	91 05       	cpc	r25, r1
    2674:	5c f4       	brge	.+22     	; 0x268c <KEYPAD_4X4_Not_Standard_Keypad+0xae>
    2676:	2b 81       	ldd	r18, Y+3	; 0x03
    2678:	3c 81       	ldd	r19, Y+4	; 0x04
    267a:	2a 30       	cpi	r18, 0x0A	; 10
    267c:	31 05       	cpc	r19, r1
    267e:	b1 f1       	breq	.+108    	; 0x26ec <KEYPAD_4X4_Not_Standard_Keypad+0x10e>
    2680:	8b 81       	ldd	r24, Y+3	; 0x03
    2682:	9c 81       	ldd	r25, Y+4	; 0x04
    2684:	8b 30       	cpi	r24, 0x0B	; 11
    2686:	91 05       	cpc	r25, r1
    2688:	a4 f5       	brge	.+104    	; 0x26f2 <KEYPAD_4X4_Not_Standard_Keypad+0x114>
    268a:	2d c0       	rjmp	.+90     	; 0x26e6 <KEYPAD_4X4_Not_Standard_Keypad+0x108>
    268c:	2b 81       	ldd	r18, Y+3	; 0x03
    268e:	3c 81       	ldd	r19, Y+4	; 0x04
    2690:	2e 30       	cpi	r18, 0x0E	; 14
    2692:	31 05       	cpc	r19, r1
    2694:	b1 f1       	breq	.+108    	; 0x2702 <KEYPAD_4X4_Not_Standard_Keypad+0x124>
    2696:	8b 81       	ldd	r24, Y+3	; 0x03
    2698:	9c 81       	ldd	r25, Y+4	; 0x04
    269a:	8e 30       	cpi	r24, 0x0E	; 14
    269c:	91 05       	cpc	r25, r1
    269e:	7c f1       	brlt	.+94     	; 0x26fe <KEYPAD_4X4_Not_Standard_Keypad+0x120>
    26a0:	2b 81       	ldd	r18, Y+3	; 0x03
    26a2:	3c 81       	ldd	r19, Y+4	; 0x04
    26a4:	2f 30       	cpi	r18, 0x0F	; 15
    26a6:	31 05       	cpc	r19, r1
    26a8:	71 f1       	breq	.+92     	; 0x2706 <KEYPAD_4X4_Not_Standard_Keypad+0x128>
    26aa:	8b 81       	ldd	r24, Y+3	; 0x03
    26ac:	9c 81       	ldd	r25, Y+4	; 0x04
    26ae:	80 31       	cpi	r24, 0x10	; 16
    26b0:	91 05       	cpc	r25, r1
    26b2:	61 f1       	breq	.+88     	; 0x270c <KEYPAD_4X4_Not_Standard_Keypad+0x12e>
    26b4:	2e c0       	rjmp	.+92     	; 0x2712 <KEYPAD_4X4_Not_Standard_Keypad+0x134>
			{
			case 1:
				return 7;
    26b6:	97 e0       	ldi	r25, 0x07	; 7
    26b8:	9a 83       	std	Y+2, r25	; 0x02
    26ba:	2c c0       	rjmp	.+88     	; 0x2714 <KEYPAD_4X4_Not_Standard_Keypad+0x136>
			case 2:
				return 8;
    26bc:	28 e0       	ldi	r18, 0x08	; 8
    26be:	2a 83       	std	Y+2, r18	; 0x02
    26c0:	29 c0       	rjmp	.+82     	; 0x2714 <KEYPAD_4X4_Not_Standard_Keypad+0x136>
			case 3:
				return 9;
    26c2:	39 e0       	ldi	r19, 0x09	; 9
    26c4:	3a 83       	std	Y+2, r19	; 0x02
    26c6:	26 c0       	rjmp	.+76     	; 0x2714 <KEYPAD_4X4_Not_Standard_Keypad+0x136>
			case 4:
				return '/';
    26c8:	8f e2       	ldi	r24, 0x2F	; 47
    26ca:	8a 83       	std	Y+2, r24	; 0x02
    26cc:	23 c0       	rjmp	.+70     	; 0x2714 <KEYPAD_4X4_Not_Standard_Keypad+0x136>
			case 5:
				return 4;
    26ce:	94 e0       	ldi	r25, 0x04	; 4
    26d0:	9a 83       	std	Y+2, r25	; 0x02
    26d2:	20 c0       	rjmp	.+64     	; 0x2714 <KEYPAD_4X4_Not_Standard_Keypad+0x136>
			case 6:
				return 5;
    26d4:	25 e0       	ldi	r18, 0x05	; 5
    26d6:	2a 83       	std	Y+2, r18	; 0x02
    26d8:	1d c0       	rjmp	.+58     	; 0x2714 <KEYPAD_4X4_Not_Standard_Keypad+0x136>
			case 7:
				return 6;
    26da:	36 e0       	ldi	r19, 0x06	; 6
    26dc:	3a 83       	std	Y+2, r19	; 0x02
    26de:	1a c0       	rjmp	.+52     	; 0x2714 <KEYPAD_4X4_Not_Standard_Keypad+0x136>
			case 8:
				return '*';
    26e0:	8a e2       	ldi	r24, 0x2A	; 42
    26e2:	8a 83       	std	Y+2, r24	; 0x02
    26e4:	17 c0       	rjmp	.+46     	; 0x2714 <KEYPAD_4X4_Not_Standard_Keypad+0x136>
			case 9:
				return 1;
    26e6:	91 e0       	ldi	r25, 0x01	; 1
    26e8:	9a 83       	std	Y+2, r25	; 0x02
    26ea:	14 c0       	rjmp	.+40     	; 0x2714 <KEYPAD_4X4_Not_Standard_Keypad+0x136>
			case 10:
				return 2;
    26ec:	22 e0       	ldi	r18, 0x02	; 2
    26ee:	2a 83       	std	Y+2, r18	; 0x02
    26f0:	11 c0       	rjmp	.+34     	; 0x2714 <KEYPAD_4X4_Not_Standard_Keypad+0x136>
			case 11:
				return 3;
    26f2:	33 e0       	ldi	r19, 0x03	; 3
    26f4:	3a 83       	std	Y+2, r19	; 0x02
    26f6:	0e c0       	rjmp	.+28     	; 0x2714 <KEYPAD_4X4_Not_Standard_Keypad+0x136>
			case 12:
				return '-';
    26f8:	8d e2       	ldi	r24, 0x2D	; 45
    26fa:	8a 83       	std	Y+2, r24	; 0x02
    26fc:	0b c0       	rjmp	.+22     	; 0x2714 <KEYPAD_4X4_Not_Standard_Keypad+0x136>
			case 13:
				return 0;
    26fe:	1a 82       	std	Y+2, r1	; 0x02
    2700:	09 c0       	rjmp	.+18     	; 0x2714 <KEYPAD_4X4_Not_Standard_Keypad+0x136>
			case 14:
				return 0;
    2702:	1a 82       	std	Y+2, r1	; 0x02
    2704:	07 c0       	rjmp	.+14     	; 0x2714 <KEYPAD_4X4_Not_Standard_Keypad+0x136>
			case 15:
				return '=';
    2706:	9d e3       	ldi	r25, 0x3D	; 61
    2708:	9a 83       	std	Y+2, r25	; 0x02
    270a:	04 c0       	rjmp	.+8      	; 0x2714 <KEYPAD_4X4_Not_Standard_Keypad+0x136>
			case 16:
				return '+';
    270c:	2b e2       	ldi	r18, 0x2B	; 43
    270e:	2a 83       	std	Y+2, r18	; 0x02
    2710:	01 c0       	rjmp	.+2      	; 0x2714 <KEYPAD_4X4_Not_Standard_Keypad+0x136>
			}
			return '\0';
    2712:	1a 82       	std	Y+2, r1	; 0x02
    2714:	8a 81       	ldd	r24, Y+2	; 0x02
		}
    2716:	0f 90       	pop	r0
    2718:	0f 90       	pop	r0
    271a:	0f 90       	pop	r0
    271c:	0f 90       	pop	r0
    271e:	cf 91       	pop	r28
    2720:	df 91       	pop	r29
    2722:	08 95       	ret

00002724 <KEYPAD_getPressedKey>:
		}
	#endif
#endif

uint8 KEYPAD_getPressedKey(void)
{
    2724:	df 93       	push	r29
    2726:	cf 93       	push	r28
    2728:	cd b7       	in	r28, 0x3d	; 61
    272a:	de b7       	in	r29, 0x3e	; 62
    272c:	60 97       	sbiw	r28, 0x10	; 16
    272e:	0f b6       	in	r0, 0x3f	; 63
    2730:	f8 94       	cli
    2732:	de bf       	out	0x3e, r29	; 62
    2734:	0f be       	out	0x3f, r0	; 63
    2736:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
#ifdef SEVEN_SEGMENT_MULTIPLEXING
	static uint8 num=0;
#endif
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    2738:	80 e0       	ldi	r24, 0x00	; 0
    273a:	60 e0       	ldi	r22, 0x00	; 0
    273c:	40 e0       	ldi	r20, 0x00	; 0
    273e:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    2742:	80 e0       	ldi	r24, 0x00	; 0
    2744:	61 e0       	ldi	r22, 0x01	; 1
    2746:	40 e0       	ldi	r20, 0x00	; 0
    2748:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    274c:	80 e0       	ldi	r24, 0x00	; 0
    274e:	62 e0       	ldi	r22, 0x02	; 2
    2750:	40 e0       	ldi	r20, 0x00	; 0
    2752:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    2756:	80 e0       	ldi	r24, 0x00	; 0
    2758:	63 e0       	ldi	r22, 0x03	; 3
    275a:	40 e0       	ldi	r20, 0x00	; 0
    275c:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    2760:	80 e0       	ldi	r24, 0x00	; 0
    2762:	64 e0       	ldi	r22, 0x04	; 4
    2764:	40 e0       	ldi	r20, 0x00	; 0
    2766:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    276a:	80 e0       	ldi	r24, 0x00	; 0
    276c:	65 e0       	ldi	r22, 0x05	; 5
    276e:	40 e0       	ldi	r20, 0x00	; 0
    2770:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    2774:	80 e0       	ldi	r24, 0x00	; 0
    2776:	66 e0       	ldi	r22, 0x06	; 6
    2778:	40 e0       	ldi	r20, 0x00	; 0
    277a:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_setupPinDirection>
	
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    277e:	80 e0       	ldi	r24, 0x00	; 0
    2780:	67 e0       	ldi	r22, 0x07	; 7
    2782:	40 e0       	ldi	r20, 0x00	; 0
    2784:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_setupPinDirection>
#endif
#ifndef SEVEN_SEGMENT_MULTIPLEXING
		while(1)
			{
		#endif
	for(row=0;row<KEYPAD_NUM_ROWS;row++)
    2788:	1f 86       	std	Y+15, r1	; 0x0f
    278a:	ab c0       	rjmp	.+342    	; 0x28e2 <KEYPAD_getPressedKey+0x1be>
	{
		GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    278c:	80 e0       	ldi	r24, 0x00	; 0
    278e:	6f 85       	ldd	r22, Y+15	; 0x0f
    2790:	41 e0       	ldi	r20, 0x01	; 1
    2792:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_setupPinDirection>

		GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    2796:	80 e0       	ldi	r24, 0x00	; 0
    2798:	6f 85       	ldd	r22, Y+15	; 0x0f
    279a:	40 e0       	ldi	r20, 0x00	; 0
    279c:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <GPIO_writePin>

			for(col=0;col<KEYPAD_NUM_COLS;col++)
    27a0:	18 8a       	std	Y+16, r1	; 0x10
    27a2:	22 c0       	rjmp	.+68     	; 0x27e8 <KEYPAD_getPressedKey+0xc4>
				{
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    27a4:	88 89       	ldd	r24, Y+16	; 0x10
    27a6:	98 2f       	mov	r25, r24
    27a8:	9c 5f       	subi	r25, 0xFC	; 252
    27aa:	80 e0       	ldi	r24, 0x00	; 0
    27ac:	69 2f       	mov	r22, r25
    27ae:	0e 94 0e 10 	call	0x201c	; 0x201c <GPIO_readPin>
    27b2:	88 23       	and	r24, r24
    27b4:	b1 f4       	brne	.+44     	; 0x27e2 <KEYPAD_getPressedKey+0xbe>
					#endif
					#if(KEYPAD_NUM_COLS == 4 && STANDARD_KEYPAD == FALSE)
#ifdef SEVEN_SEGMENT_MULTIPLEXING
							num =  KEYPAD_4X4_Not_Standard_Keypad(((row*KEYPAD_NUM_COLS)+col+1));
#endif
							return KEYPAD_4X4_Not_Standard_Keypad(((row*KEYPAD_NUM_COLS)+col+1));
    27b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    27b8:	88 2f       	mov	r24, r24
    27ba:	90 e0       	ldi	r25, 0x00	; 0
    27bc:	88 0f       	add	r24, r24
    27be:	99 1f       	adc	r25, r25
    27c0:	88 0f       	add	r24, r24
    27c2:	99 1f       	adc	r25, r25
    27c4:	98 2f       	mov	r25, r24
    27c6:	88 89       	ldd	r24, Y+16	; 0x10
    27c8:	89 0f       	add	r24, r25
    27ca:	8f 5f       	subi	r24, 0xFF	; 255
    27cc:	0e 94 ef 12 	call	0x25de	; 0x25de <KEYPAD_4X4_Not_Standard_Keypad>
#endif
	}
#ifdef SEVEN_SEGMENT_MULTIPLEXING
	return num;
#endif
}
    27d0:	60 96       	adiw	r28, 0x10	; 16
    27d2:	0f b6       	in	r0, 0x3f	; 63
    27d4:	f8 94       	cli
    27d6:	de bf       	out	0x3e, r29	; 62
    27d8:	0f be       	out	0x3f, r0	; 63
    27da:	cd bf       	out	0x3d, r28	; 61
    27dc:	cf 91       	pop	r28
    27de:	df 91       	pop	r29
    27e0:	08 95       	ret
	{
		GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

		GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0;col<KEYPAD_NUM_COLS;col++)
    27e2:	88 89       	ldd	r24, Y+16	; 0x10
    27e4:	8f 5f       	subi	r24, 0xFF	; 255
    27e6:	88 8b       	std	Y+16, r24	; 0x10
    27e8:	88 89       	ldd	r24, Y+16	; 0x10
    27ea:	84 30       	cpi	r24, 0x04	; 4
    27ec:	d8 f2       	brcs	.-74     	; 0x27a4 <KEYPAD_getPressedKey+0x80>
#endif
							return KEYPAD_4X4_Not_Standard_Keypad(((row*KEYPAD_NUM_COLS)+col+1));
					#endif
			}
		}
		GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    27ee:	80 e0       	ldi	r24, 0x00	; 0
    27f0:	6f 85       	ldd	r22, Y+15	; 0x0f
    27f2:	40 e0       	ldi	r20, 0x00	; 0
    27f4:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_setupPinDirection>
    27f8:	80 e0       	ldi	r24, 0x00	; 0
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	a0 e2       	ldi	r26, 0x20	; 32
    27fe:	b1 e4       	ldi	r27, 0x41	; 65
    2800:	8b 87       	std	Y+11, r24	; 0x0b
    2802:	9c 87       	std	Y+12, r25	; 0x0c
    2804:	ad 87       	std	Y+13, r26	; 0x0d
    2806:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2808:	6b 85       	ldd	r22, Y+11	; 0x0b
    280a:	7c 85       	ldd	r23, Y+12	; 0x0c
    280c:	8d 85       	ldd	r24, Y+13	; 0x0d
    280e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2810:	20 e0       	ldi	r18, 0x00	; 0
    2812:	30 e0       	ldi	r19, 0x00	; 0
    2814:	4a ef       	ldi	r20, 0xFA	; 250
    2816:	54 e4       	ldi	r21, 0x44	; 68
    2818:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    281c:	dc 01       	movw	r26, r24
    281e:	cb 01       	movw	r24, r22
    2820:	8f 83       	std	Y+7, r24	; 0x07
    2822:	98 87       	std	Y+8, r25	; 0x08
    2824:	a9 87       	std	Y+9, r26	; 0x09
    2826:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2828:	6f 81       	ldd	r22, Y+7	; 0x07
    282a:	78 85       	ldd	r23, Y+8	; 0x08
    282c:	89 85       	ldd	r24, Y+9	; 0x09
    282e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2830:	20 e0       	ldi	r18, 0x00	; 0
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	40 e8       	ldi	r20, 0x80	; 128
    2836:	5f e3       	ldi	r21, 0x3F	; 63
    2838:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    283c:	88 23       	and	r24, r24
    283e:	2c f4       	brge	.+10     	; 0x284a <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    2840:	81 e0       	ldi	r24, 0x01	; 1
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	9e 83       	std	Y+6, r25	; 0x06
    2846:	8d 83       	std	Y+5, r24	; 0x05
    2848:	3f c0       	rjmp	.+126    	; 0x28c8 <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    284a:	6f 81       	ldd	r22, Y+7	; 0x07
    284c:	78 85       	ldd	r23, Y+8	; 0x08
    284e:	89 85       	ldd	r24, Y+9	; 0x09
    2850:	9a 85       	ldd	r25, Y+10	; 0x0a
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	3f ef       	ldi	r19, 0xFF	; 255
    2856:	4f e7       	ldi	r20, 0x7F	; 127
    2858:	57 e4       	ldi	r21, 0x47	; 71
    285a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    285e:	18 16       	cp	r1, r24
    2860:	4c f5       	brge	.+82     	; 0x28b4 <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2862:	6b 85       	ldd	r22, Y+11	; 0x0b
    2864:	7c 85       	ldd	r23, Y+12	; 0x0c
    2866:	8d 85       	ldd	r24, Y+13	; 0x0d
    2868:	9e 85       	ldd	r25, Y+14	; 0x0e
    286a:	20 e0       	ldi	r18, 0x00	; 0
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	40 e2       	ldi	r20, 0x20	; 32
    2870:	51 e4       	ldi	r21, 0x41	; 65
    2872:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2876:	dc 01       	movw	r26, r24
    2878:	cb 01       	movw	r24, r22
    287a:	bc 01       	movw	r22, r24
    287c:	cd 01       	movw	r24, r26
    287e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2882:	dc 01       	movw	r26, r24
    2884:	cb 01       	movw	r24, r22
    2886:	9e 83       	std	Y+6, r25	; 0x06
    2888:	8d 83       	std	Y+5, r24	; 0x05
    288a:	0f c0       	rjmp	.+30     	; 0x28aa <KEYPAD_getPressedKey+0x186>
    288c:	88 ec       	ldi	r24, 0xC8	; 200
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	9c 83       	std	Y+4, r25	; 0x04
    2892:	8b 83       	std	Y+3, r24	; 0x03
    2894:	8b 81       	ldd	r24, Y+3	; 0x03
    2896:	9c 81       	ldd	r25, Y+4	; 0x04
    2898:	01 97       	sbiw	r24, 0x01	; 1
    289a:	f1 f7       	brne	.-4      	; 0x2898 <KEYPAD_getPressedKey+0x174>
    289c:	9c 83       	std	Y+4, r25	; 0x04
    289e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28a0:	8d 81       	ldd	r24, Y+5	; 0x05
    28a2:	9e 81       	ldd	r25, Y+6	; 0x06
    28a4:	01 97       	sbiw	r24, 0x01	; 1
    28a6:	9e 83       	std	Y+6, r25	; 0x06
    28a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28aa:	8d 81       	ldd	r24, Y+5	; 0x05
    28ac:	9e 81       	ldd	r25, Y+6	; 0x06
    28ae:	00 97       	sbiw	r24, 0x00	; 0
    28b0:	69 f7       	brne	.-38     	; 0x288c <KEYPAD_getPressedKey+0x168>
    28b2:	14 c0       	rjmp	.+40     	; 0x28dc <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28b4:	6f 81       	ldd	r22, Y+7	; 0x07
    28b6:	78 85       	ldd	r23, Y+8	; 0x08
    28b8:	89 85       	ldd	r24, Y+9	; 0x09
    28ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    28bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28c0:	dc 01       	movw	r26, r24
    28c2:	cb 01       	movw	r24, r22
    28c4:	9e 83       	std	Y+6, r25	; 0x06
    28c6:	8d 83       	std	Y+5, r24	; 0x05
    28c8:	8d 81       	ldd	r24, Y+5	; 0x05
    28ca:	9e 81       	ldd	r25, Y+6	; 0x06
    28cc:	9a 83       	std	Y+2, r25	; 0x02
    28ce:	89 83       	std	Y+1, r24	; 0x01
    28d0:	89 81       	ldd	r24, Y+1	; 0x01
    28d2:	9a 81       	ldd	r25, Y+2	; 0x02
    28d4:	01 97       	sbiw	r24, 0x01	; 1
    28d6:	f1 f7       	brne	.-4      	; 0x28d4 <KEYPAD_getPressedKey+0x1b0>
    28d8:	9a 83       	std	Y+2, r25	; 0x02
    28da:	89 83       	std	Y+1, r24	; 0x01
#endif
#ifndef SEVEN_SEGMENT_MULTIPLEXING
		while(1)
			{
		#endif
	for(row=0;row<KEYPAD_NUM_ROWS;row++)
    28dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    28de:	8f 5f       	subi	r24, 0xFF	; 255
    28e0:	8f 87       	std	Y+15, r24	; 0x0f
    28e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    28e4:	84 30       	cpi	r24, 0x04	; 4
    28e6:	08 f4       	brcc	.+2      	; 0x28ea <KEYPAD_getPressedKey+0x1c6>
    28e8:	51 cf       	rjmp	.-350    	; 0x278c <KEYPAD_getPressedKey+0x68>
    28ea:	4e cf       	rjmp	.-356    	; 0x2788 <KEYPAD_getPressedKey+0x64>

000028ec <LCD_init>:
#include "gpio.h"
#include "common_macros.h"
#include <stdlib.h>

void LCD_init(void)
{
    28ec:	df 93       	push	r29
    28ee:	cf 93       	push	r28
    28f0:	cd b7       	in	r28, 0x3d	; 61
    28f2:	de b7       	in	r29, 0x3e	; 62
    28f4:	2e 97       	sbiw	r28, 0x0e	; 14
    28f6:	0f b6       	in	r0, 0x3f	; 63
    28f8:	f8 94       	cli
    28fa:	de bf       	out	0x3e, r29	; 62
    28fc:	0f be       	out	0x3f, r0	; 63
    28fe:	cd bf       	out	0x3d, r28	; 61
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    2900:	83 e0       	ldi	r24, 0x03	; 3
    2902:	66 e0       	ldi	r22, 0x06	; 6
    2904:	41 e0       	ldi	r20, 0x01	; 1
    2906:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, PIN_OUTPUT);
    290a:	83 e0       	ldi	r24, 0x03	; 3
    290c:	67 e0       	ldi	r22, 0x07	; 7
    290e:	41 e0       	ldi	r20, 0x01	; 1
    2910:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_setupPinDirection>
    2914:	80 e0       	ldi	r24, 0x00	; 0
    2916:	90 e0       	ldi	r25, 0x00	; 0
    2918:	a0 ea       	ldi	r26, 0xA0	; 160
    291a:	b1 e4       	ldi	r27, 0x41	; 65
    291c:	8b 87       	std	Y+11, r24	; 0x0b
    291e:	9c 87       	std	Y+12, r25	; 0x0c
    2920:	ad 87       	std	Y+13, r26	; 0x0d
    2922:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2924:	6b 85       	ldd	r22, Y+11	; 0x0b
    2926:	7c 85       	ldd	r23, Y+12	; 0x0c
    2928:	8d 85       	ldd	r24, Y+13	; 0x0d
    292a:	9e 85       	ldd	r25, Y+14	; 0x0e
    292c:	20 e0       	ldi	r18, 0x00	; 0
    292e:	30 e0       	ldi	r19, 0x00	; 0
    2930:	4a ef       	ldi	r20, 0xFA	; 250
    2932:	54 e4       	ldi	r21, 0x44	; 68
    2934:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2938:	dc 01       	movw	r26, r24
    293a:	cb 01       	movw	r24, r22
    293c:	8f 83       	std	Y+7, r24	; 0x07
    293e:	98 87       	std	Y+8, r25	; 0x08
    2940:	a9 87       	std	Y+9, r26	; 0x09
    2942:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2944:	6f 81       	ldd	r22, Y+7	; 0x07
    2946:	78 85       	ldd	r23, Y+8	; 0x08
    2948:	89 85       	ldd	r24, Y+9	; 0x09
    294a:	9a 85       	ldd	r25, Y+10	; 0x0a
    294c:	20 e0       	ldi	r18, 0x00	; 0
    294e:	30 e0       	ldi	r19, 0x00	; 0
    2950:	40 e8       	ldi	r20, 0x80	; 128
    2952:	5f e3       	ldi	r21, 0x3F	; 63
    2954:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2958:	88 23       	and	r24, r24
    295a:	2c f4       	brge	.+10     	; 0x2966 <LCD_init+0x7a>
		__ticks = 1;
    295c:	81 e0       	ldi	r24, 0x01	; 1
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	9e 83       	std	Y+6, r25	; 0x06
    2962:	8d 83       	std	Y+5, r24	; 0x05
    2964:	3f c0       	rjmp	.+126    	; 0x29e4 <LCD_init+0xf8>
	else if (__tmp > 65535)
    2966:	6f 81       	ldd	r22, Y+7	; 0x07
    2968:	78 85       	ldd	r23, Y+8	; 0x08
    296a:	89 85       	ldd	r24, Y+9	; 0x09
    296c:	9a 85       	ldd	r25, Y+10	; 0x0a
    296e:	20 e0       	ldi	r18, 0x00	; 0
    2970:	3f ef       	ldi	r19, 0xFF	; 255
    2972:	4f e7       	ldi	r20, 0x7F	; 127
    2974:	57 e4       	ldi	r21, 0x47	; 71
    2976:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    297a:	18 16       	cp	r1, r24
    297c:	4c f5       	brge	.+82     	; 0x29d0 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    297e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2980:	7c 85       	ldd	r23, Y+12	; 0x0c
    2982:	8d 85       	ldd	r24, Y+13	; 0x0d
    2984:	9e 85       	ldd	r25, Y+14	; 0x0e
    2986:	20 e0       	ldi	r18, 0x00	; 0
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	40 e2       	ldi	r20, 0x20	; 32
    298c:	51 e4       	ldi	r21, 0x41	; 65
    298e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2992:	dc 01       	movw	r26, r24
    2994:	cb 01       	movw	r24, r22
    2996:	bc 01       	movw	r22, r24
    2998:	cd 01       	movw	r24, r26
    299a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    299e:	dc 01       	movw	r26, r24
    29a0:	cb 01       	movw	r24, r22
    29a2:	9e 83       	std	Y+6, r25	; 0x06
    29a4:	8d 83       	std	Y+5, r24	; 0x05
    29a6:	0f c0       	rjmp	.+30     	; 0x29c6 <LCD_init+0xda>
    29a8:	88 ec       	ldi	r24, 0xC8	; 200
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	9c 83       	std	Y+4, r25	; 0x04
    29ae:	8b 83       	std	Y+3, r24	; 0x03
    29b0:	8b 81       	ldd	r24, Y+3	; 0x03
    29b2:	9c 81       	ldd	r25, Y+4	; 0x04
    29b4:	01 97       	sbiw	r24, 0x01	; 1
    29b6:	f1 f7       	brne	.-4      	; 0x29b4 <LCD_init+0xc8>
    29b8:	9c 83       	std	Y+4, r25	; 0x04
    29ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29bc:	8d 81       	ldd	r24, Y+5	; 0x05
    29be:	9e 81       	ldd	r25, Y+6	; 0x06
    29c0:	01 97       	sbiw	r24, 0x01	; 1
    29c2:	9e 83       	std	Y+6, r25	; 0x06
    29c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29c6:	8d 81       	ldd	r24, Y+5	; 0x05
    29c8:	9e 81       	ldd	r25, Y+6	; 0x06
    29ca:	00 97       	sbiw	r24, 0x00	; 0
    29cc:	69 f7       	brne	.-38     	; 0x29a8 <LCD_init+0xbc>
    29ce:	14 c0       	rjmp	.+40     	; 0x29f8 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29d0:	6f 81       	ldd	r22, Y+7	; 0x07
    29d2:	78 85       	ldd	r23, Y+8	; 0x08
    29d4:	89 85       	ldd	r24, Y+9	; 0x09
    29d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    29d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29dc:	dc 01       	movw	r26, r24
    29de:	cb 01       	movw	r24, r22
    29e0:	9e 83       	std	Y+6, r25	; 0x06
    29e2:	8d 83       	std	Y+5, r24	; 0x05
    29e4:	8d 81       	ldd	r24, Y+5	; 0x05
    29e6:	9e 81       	ldd	r25, Y+6	; 0x06
    29e8:	9a 83       	std	Y+2, r25	; 0x02
    29ea:	89 83       	std	Y+1, r24	; 0x01
    29ec:	89 81       	ldd	r24, Y+1	; 0x01
    29ee:	9a 81       	ldd	r25, Y+2	; 0x02
    29f0:	01 97       	sbiw	r24, 0x01	; 1
    29f2:	f1 f7       	brne	.-4      	; 0x29f0 <LCD_init+0x104>
    29f4:	9a 83       	std	Y+2, r25	; 0x02
    29f6:	89 83       	std	Y+1, r24	; 0x01

	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
	
#elif(LCD_DATA_BITS_MODE == 8)
	
	GPIO_setupPortDirection(LCD_DATABUS_PORT_ID, PORT_OUTPUT);
    29f8:	82 e0       	ldi	r24, 0x02	; 2
    29fa:	6f ef       	ldi	r22, 0xFF	; 255
    29fc:	0e 94 22 12 	call	0x2444	; 0x2444 <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    2a00:	88 e3       	ldi	r24, 0x38	; 56
    2a02:	0e 94 12 15 	call	0x2a24	; 0x2a24 <LCD_sendCommand>
	
#endif
	
	LCD_sendCommand(LCD_CURSOR_OFF);
    2a06:	8c e0       	ldi	r24, 0x0C	; 12
    2a08:	0e 94 12 15 	call	0x2a24	; 0x2a24 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    2a0c:	81 e0       	ldi	r24, 0x01	; 1
    2a0e:	0e 94 12 15 	call	0x2a24	; 0x2a24 <LCD_sendCommand>
}
    2a12:	2e 96       	adiw	r28, 0x0e	; 14
    2a14:	0f b6       	in	r0, 0x3f	; 63
    2a16:	f8 94       	cli
    2a18:	de bf       	out	0x3e, r29	; 62
    2a1a:	0f be       	out	0x3f, r0	; 63
    2a1c:	cd bf       	out	0x3d, r28	; 61
    2a1e:	cf 91       	pop	r28
    2a20:	df 91       	pop	r29
    2a22:	08 95       	ret

00002a24 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    2a24:	df 93       	push	r29
    2a26:	cf 93       	push	r28
    2a28:	cd b7       	in	r28, 0x3d	; 61
    2a2a:	de b7       	in	r29, 0x3e	; 62
    2a2c:	e9 97       	sbiw	r28, 0x39	; 57
    2a2e:	0f b6       	in	r0, 0x3f	; 63
    2a30:	f8 94       	cli
    2a32:	de bf       	out	0x3e, r29	; 62
    2a34:	0f be       	out	0x3f, r0	; 63
    2a36:	cd bf       	out	0x3d, r28	; 61
    2a38:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);
    2a3a:	83 e0       	ldi	r24, 0x03	; 3
    2a3c:	66 e0       	ldi	r22, 0x06	; 6
    2a3e:	40 e0       	ldi	r20, 0x00	; 0
    2a40:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <GPIO_writePin>
    2a44:	80 e0       	ldi	r24, 0x00	; 0
    2a46:	90 e0       	ldi	r25, 0x00	; 0
    2a48:	a0 e8       	ldi	r26, 0x80	; 128
    2a4a:	bf e3       	ldi	r27, 0x3F	; 63
    2a4c:	8d ab       	std	Y+53, r24	; 0x35
    2a4e:	9e ab       	std	Y+54, r25	; 0x36
    2a50:	af ab       	std	Y+55, r26	; 0x37
    2a52:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a54:	6d a9       	ldd	r22, Y+53	; 0x35
    2a56:	7e a9       	ldd	r23, Y+54	; 0x36
    2a58:	8f a9       	ldd	r24, Y+55	; 0x37
    2a5a:	98 ad       	ldd	r25, Y+56	; 0x38
    2a5c:	20 e0       	ldi	r18, 0x00	; 0
    2a5e:	30 e0       	ldi	r19, 0x00	; 0
    2a60:	4a ef       	ldi	r20, 0xFA	; 250
    2a62:	54 e4       	ldi	r21, 0x44	; 68
    2a64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a68:	dc 01       	movw	r26, r24
    2a6a:	cb 01       	movw	r24, r22
    2a6c:	89 ab       	std	Y+49, r24	; 0x31
    2a6e:	9a ab       	std	Y+50, r25	; 0x32
    2a70:	ab ab       	std	Y+51, r26	; 0x33
    2a72:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a74:	69 a9       	ldd	r22, Y+49	; 0x31
    2a76:	7a a9       	ldd	r23, Y+50	; 0x32
    2a78:	8b a9       	ldd	r24, Y+51	; 0x33
    2a7a:	9c a9       	ldd	r25, Y+52	; 0x34
    2a7c:	20 e0       	ldi	r18, 0x00	; 0
    2a7e:	30 e0       	ldi	r19, 0x00	; 0
    2a80:	40 e8       	ldi	r20, 0x80	; 128
    2a82:	5f e3       	ldi	r21, 0x3F	; 63
    2a84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a88:	88 23       	and	r24, r24
    2a8a:	2c f4       	brge	.+10     	; 0x2a96 <LCD_sendCommand+0x72>
		__ticks = 1;
    2a8c:	81 e0       	ldi	r24, 0x01	; 1
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	98 ab       	std	Y+48, r25	; 0x30
    2a92:	8f a7       	std	Y+47, r24	; 0x2f
    2a94:	3f c0       	rjmp	.+126    	; 0x2b14 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    2a96:	69 a9       	ldd	r22, Y+49	; 0x31
    2a98:	7a a9       	ldd	r23, Y+50	; 0x32
    2a9a:	8b a9       	ldd	r24, Y+51	; 0x33
    2a9c:	9c a9       	ldd	r25, Y+52	; 0x34
    2a9e:	20 e0       	ldi	r18, 0x00	; 0
    2aa0:	3f ef       	ldi	r19, 0xFF	; 255
    2aa2:	4f e7       	ldi	r20, 0x7F	; 127
    2aa4:	57 e4       	ldi	r21, 0x47	; 71
    2aa6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2aaa:	18 16       	cp	r1, r24
    2aac:	4c f5       	brge	.+82     	; 0x2b00 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aae:	6d a9       	ldd	r22, Y+53	; 0x35
    2ab0:	7e a9       	ldd	r23, Y+54	; 0x36
    2ab2:	8f a9       	ldd	r24, Y+55	; 0x37
    2ab4:	98 ad       	ldd	r25, Y+56	; 0x38
    2ab6:	20 e0       	ldi	r18, 0x00	; 0
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	40 e2       	ldi	r20, 0x20	; 32
    2abc:	51 e4       	ldi	r21, 0x41	; 65
    2abe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ac2:	dc 01       	movw	r26, r24
    2ac4:	cb 01       	movw	r24, r22
    2ac6:	bc 01       	movw	r22, r24
    2ac8:	cd 01       	movw	r24, r26
    2aca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ace:	dc 01       	movw	r26, r24
    2ad0:	cb 01       	movw	r24, r22
    2ad2:	98 ab       	std	Y+48, r25	; 0x30
    2ad4:	8f a7       	std	Y+47, r24	; 0x2f
    2ad6:	0f c0       	rjmp	.+30     	; 0x2af6 <LCD_sendCommand+0xd2>
    2ad8:	88 ec       	ldi	r24, 0xC8	; 200
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	9e a7       	std	Y+46, r25	; 0x2e
    2ade:	8d a7       	std	Y+45, r24	; 0x2d
    2ae0:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ae2:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ae4:	01 97       	sbiw	r24, 0x01	; 1
    2ae6:	f1 f7       	brne	.-4      	; 0x2ae4 <LCD_sendCommand+0xc0>
    2ae8:	9e a7       	std	Y+46, r25	; 0x2e
    2aea:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aec:	8f a5       	ldd	r24, Y+47	; 0x2f
    2aee:	98 a9       	ldd	r25, Y+48	; 0x30
    2af0:	01 97       	sbiw	r24, 0x01	; 1
    2af2:	98 ab       	std	Y+48, r25	; 0x30
    2af4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2af6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2af8:	98 a9       	ldd	r25, Y+48	; 0x30
    2afa:	00 97       	sbiw	r24, 0x00	; 0
    2afc:	69 f7       	brne	.-38     	; 0x2ad8 <LCD_sendCommand+0xb4>
    2afe:	14 c0       	rjmp	.+40     	; 0x2b28 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b00:	69 a9       	ldd	r22, Y+49	; 0x31
    2b02:	7a a9       	ldd	r23, Y+50	; 0x32
    2b04:	8b a9       	ldd	r24, Y+51	; 0x33
    2b06:	9c a9       	ldd	r25, Y+52	; 0x34
    2b08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b0c:	dc 01       	movw	r26, r24
    2b0e:	cb 01       	movw	r24, r22
    2b10:	98 ab       	std	Y+48, r25	; 0x30
    2b12:	8f a7       	std	Y+47, r24	; 0x2f
    2b14:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b16:	98 a9       	ldd	r25, Y+48	; 0x30
    2b18:	9c a7       	std	Y+44, r25	; 0x2c
    2b1a:	8b a7       	std	Y+43, r24	; 0x2b
    2b1c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b1e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b20:	01 97       	sbiw	r24, 0x01	; 1
    2b22:	f1 f7       	brne	.-4      	; 0x2b20 <LCD_sendCommand+0xfc>
    2b24:	9c a7       	std	Y+44, r25	; 0x2c
    2b26:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_HIGH);
    2b28:	83 e0       	ldi	r24, 0x03	; 3
    2b2a:	67 e0       	ldi	r22, 0x07	; 7
    2b2c:	41 e0       	ldi	r20, 0x01	; 1
    2b2e:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <GPIO_writePin>
    2b32:	80 e0       	ldi	r24, 0x00	; 0
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	a0 e8       	ldi	r26, 0x80	; 128
    2b38:	bf e3       	ldi	r27, 0x3F	; 63
    2b3a:	8f a3       	std	Y+39, r24	; 0x27
    2b3c:	98 a7       	std	Y+40, r25	; 0x28
    2b3e:	a9 a7       	std	Y+41, r26	; 0x29
    2b40:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b42:	6f a1       	ldd	r22, Y+39	; 0x27
    2b44:	78 a5       	ldd	r23, Y+40	; 0x28
    2b46:	89 a5       	ldd	r24, Y+41	; 0x29
    2b48:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b4a:	20 e0       	ldi	r18, 0x00	; 0
    2b4c:	30 e0       	ldi	r19, 0x00	; 0
    2b4e:	4a ef       	ldi	r20, 0xFA	; 250
    2b50:	54 e4       	ldi	r21, 0x44	; 68
    2b52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b56:	dc 01       	movw	r26, r24
    2b58:	cb 01       	movw	r24, r22
    2b5a:	8b a3       	std	Y+35, r24	; 0x23
    2b5c:	9c a3       	std	Y+36, r25	; 0x24
    2b5e:	ad a3       	std	Y+37, r26	; 0x25
    2b60:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b62:	6b a1       	ldd	r22, Y+35	; 0x23
    2b64:	7c a1       	ldd	r23, Y+36	; 0x24
    2b66:	8d a1       	ldd	r24, Y+37	; 0x25
    2b68:	9e a1       	ldd	r25, Y+38	; 0x26
    2b6a:	20 e0       	ldi	r18, 0x00	; 0
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	40 e8       	ldi	r20, 0x80	; 128
    2b70:	5f e3       	ldi	r21, 0x3F	; 63
    2b72:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b76:	88 23       	and	r24, r24
    2b78:	2c f4       	brge	.+10     	; 0x2b84 <LCD_sendCommand+0x160>
		__ticks = 1;
    2b7a:	81 e0       	ldi	r24, 0x01	; 1
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	9a a3       	std	Y+34, r25	; 0x22
    2b80:	89 a3       	std	Y+33, r24	; 0x21
    2b82:	3f c0       	rjmp	.+126    	; 0x2c02 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    2b84:	6b a1       	ldd	r22, Y+35	; 0x23
    2b86:	7c a1       	ldd	r23, Y+36	; 0x24
    2b88:	8d a1       	ldd	r24, Y+37	; 0x25
    2b8a:	9e a1       	ldd	r25, Y+38	; 0x26
    2b8c:	20 e0       	ldi	r18, 0x00	; 0
    2b8e:	3f ef       	ldi	r19, 0xFF	; 255
    2b90:	4f e7       	ldi	r20, 0x7F	; 127
    2b92:	57 e4       	ldi	r21, 0x47	; 71
    2b94:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b98:	18 16       	cp	r1, r24
    2b9a:	4c f5       	brge	.+82     	; 0x2bee <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b9c:	6f a1       	ldd	r22, Y+39	; 0x27
    2b9e:	78 a5       	ldd	r23, Y+40	; 0x28
    2ba0:	89 a5       	ldd	r24, Y+41	; 0x29
    2ba2:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ba4:	20 e0       	ldi	r18, 0x00	; 0
    2ba6:	30 e0       	ldi	r19, 0x00	; 0
    2ba8:	40 e2       	ldi	r20, 0x20	; 32
    2baa:	51 e4       	ldi	r21, 0x41	; 65
    2bac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bb0:	dc 01       	movw	r26, r24
    2bb2:	cb 01       	movw	r24, r22
    2bb4:	bc 01       	movw	r22, r24
    2bb6:	cd 01       	movw	r24, r26
    2bb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bbc:	dc 01       	movw	r26, r24
    2bbe:	cb 01       	movw	r24, r22
    2bc0:	9a a3       	std	Y+34, r25	; 0x22
    2bc2:	89 a3       	std	Y+33, r24	; 0x21
    2bc4:	0f c0       	rjmp	.+30     	; 0x2be4 <LCD_sendCommand+0x1c0>
    2bc6:	88 ec       	ldi	r24, 0xC8	; 200
    2bc8:	90 e0       	ldi	r25, 0x00	; 0
    2bca:	98 a3       	std	Y+32, r25	; 0x20
    2bcc:	8f 8f       	std	Y+31, r24	; 0x1f
    2bce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2bd0:	98 a1       	ldd	r25, Y+32	; 0x20
    2bd2:	01 97       	sbiw	r24, 0x01	; 1
    2bd4:	f1 f7       	brne	.-4      	; 0x2bd2 <LCD_sendCommand+0x1ae>
    2bd6:	98 a3       	std	Y+32, r25	; 0x20
    2bd8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bda:	89 a1       	ldd	r24, Y+33	; 0x21
    2bdc:	9a a1       	ldd	r25, Y+34	; 0x22
    2bde:	01 97       	sbiw	r24, 0x01	; 1
    2be0:	9a a3       	std	Y+34, r25	; 0x22
    2be2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2be4:	89 a1       	ldd	r24, Y+33	; 0x21
    2be6:	9a a1       	ldd	r25, Y+34	; 0x22
    2be8:	00 97       	sbiw	r24, 0x00	; 0
    2bea:	69 f7       	brne	.-38     	; 0x2bc6 <LCD_sendCommand+0x1a2>
    2bec:	14 c0       	rjmp	.+40     	; 0x2c16 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bee:	6b a1       	ldd	r22, Y+35	; 0x23
    2bf0:	7c a1       	ldd	r23, Y+36	; 0x24
    2bf2:	8d a1       	ldd	r24, Y+37	; 0x25
    2bf4:	9e a1       	ldd	r25, Y+38	; 0x26
    2bf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bfa:	dc 01       	movw	r26, r24
    2bfc:	cb 01       	movw	r24, r22
    2bfe:	9a a3       	std	Y+34, r25	; 0x22
    2c00:	89 a3       	std	Y+33, r24	; 0x21
    2c02:	89 a1       	ldd	r24, Y+33	; 0x21
    2c04:	9a a1       	ldd	r25, Y+34	; 0x22
    2c06:	9e 8f       	std	Y+30, r25	; 0x1e
    2c08:	8d 8f       	std	Y+29, r24	; 0x1d
    2c0a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c0c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c0e:	01 97       	sbiw	r24, 0x01	; 1
    2c10:	f1 f7       	brne	.-4      	; 0x2c0e <LCD_sendCommand+0x1ea>
    2c12:	9e 8f       	std	Y+30, r25	; 0x1e
    2c14:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_LOW);
	_delay_ms(1);
	
#elif(LCD_DATA_BITS_MODE == 8)
	
	GPIO_writePort(LCD_DATABUS_PORT_ID, command);
    2c16:	82 e0       	ldi	r24, 0x02	; 2
    2c18:	69 ad       	ldd	r22, Y+57	; 0x39
    2c1a:	0e 94 66 12 	call	0x24cc	; 0x24cc <GPIO_writePort>
    2c1e:	80 e0       	ldi	r24, 0x00	; 0
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	a0 e8       	ldi	r26, 0x80	; 128
    2c24:	bf e3       	ldi	r27, 0x3F	; 63
    2c26:	89 8f       	std	Y+25, r24	; 0x19
    2c28:	9a 8f       	std	Y+26, r25	; 0x1a
    2c2a:	ab 8f       	std	Y+27, r26	; 0x1b
    2c2c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c2e:	69 8d       	ldd	r22, Y+25	; 0x19
    2c30:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c32:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c34:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c36:	20 e0       	ldi	r18, 0x00	; 0
    2c38:	30 e0       	ldi	r19, 0x00	; 0
    2c3a:	4a ef       	ldi	r20, 0xFA	; 250
    2c3c:	54 e4       	ldi	r21, 0x44	; 68
    2c3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c42:	dc 01       	movw	r26, r24
    2c44:	cb 01       	movw	r24, r22
    2c46:	8d 8b       	std	Y+21, r24	; 0x15
    2c48:	9e 8b       	std	Y+22, r25	; 0x16
    2c4a:	af 8b       	std	Y+23, r26	; 0x17
    2c4c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c4e:	6d 89       	ldd	r22, Y+21	; 0x15
    2c50:	7e 89       	ldd	r23, Y+22	; 0x16
    2c52:	8f 89       	ldd	r24, Y+23	; 0x17
    2c54:	98 8d       	ldd	r25, Y+24	; 0x18
    2c56:	20 e0       	ldi	r18, 0x00	; 0
    2c58:	30 e0       	ldi	r19, 0x00	; 0
    2c5a:	40 e8       	ldi	r20, 0x80	; 128
    2c5c:	5f e3       	ldi	r21, 0x3F	; 63
    2c5e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c62:	88 23       	and	r24, r24
    2c64:	2c f4       	brge	.+10     	; 0x2c70 <LCD_sendCommand+0x24c>
		__ticks = 1;
    2c66:	81 e0       	ldi	r24, 0x01	; 1
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	9c 8b       	std	Y+20, r25	; 0x14
    2c6c:	8b 8b       	std	Y+19, r24	; 0x13
    2c6e:	3f c0       	rjmp	.+126    	; 0x2cee <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    2c70:	6d 89       	ldd	r22, Y+21	; 0x15
    2c72:	7e 89       	ldd	r23, Y+22	; 0x16
    2c74:	8f 89       	ldd	r24, Y+23	; 0x17
    2c76:	98 8d       	ldd	r25, Y+24	; 0x18
    2c78:	20 e0       	ldi	r18, 0x00	; 0
    2c7a:	3f ef       	ldi	r19, 0xFF	; 255
    2c7c:	4f e7       	ldi	r20, 0x7F	; 127
    2c7e:	57 e4       	ldi	r21, 0x47	; 71
    2c80:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c84:	18 16       	cp	r1, r24
    2c86:	4c f5       	brge	.+82     	; 0x2cda <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c88:	69 8d       	ldd	r22, Y+25	; 0x19
    2c8a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c90:	20 e0       	ldi	r18, 0x00	; 0
    2c92:	30 e0       	ldi	r19, 0x00	; 0
    2c94:	40 e2       	ldi	r20, 0x20	; 32
    2c96:	51 e4       	ldi	r21, 0x41	; 65
    2c98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c9c:	dc 01       	movw	r26, r24
    2c9e:	cb 01       	movw	r24, r22
    2ca0:	bc 01       	movw	r22, r24
    2ca2:	cd 01       	movw	r24, r26
    2ca4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ca8:	dc 01       	movw	r26, r24
    2caa:	cb 01       	movw	r24, r22
    2cac:	9c 8b       	std	Y+20, r25	; 0x14
    2cae:	8b 8b       	std	Y+19, r24	; 0x13
    2cb0:	0f c0       	rjmp	.+30     	; 0x2cd0 <LCD_sendCommand+0x2ac>
    2cb2:	88 ec       	ldi	r24, 0xC8	; 200
    2cb4:	90 e0       	ldi	r25, 0x00	; 0
    2cb6:	9a 8b       	std	Y+18, r25	; 0x12
    2cb8:	89 8b       	std	Y+17, r24	; 0x11
    2cba:	89 89       	ldd	r24, Y+17	; 0x11
    2cbc:	9a 89       	ldd	r25, Y+18	; 0x12
    2cbe:	01 97       	sbiw	r24, 0x01	; 1
    2cc0:	f1 f7       	brne	.-4      	; 0x2cbe <LCD_sendCommand+0x29a>
    2cc2:	9a 8b       	std	Y+18, r25	; 0x12
    2cc4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cc6:	8b 89       	ldd	r24, Y+19	; 0x13
    2cc8:	9c 89       	ldd	r25, Y+20	; 0x14
    2cca:	01 97       	sbiw	r24, 0x01	; 1
    2ccc:	9c 8b       	std	Y+20, r25	; 0x14
    2cce:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cd0:	8b 89       	ldd	r24, Y+19	; 0x13
    2cd2:	9c 89       	ldd	r25, Y+20	; 0x14
    2cd4:	00 97       	sbiw	r24, 0x00	; 0
    2cd6:	69 f7       	brne	.-38     	; 0x2cb2 <LCD_sendCommand+0x28e>
    2cd8:	14 c0       	rjmp	.+40     	; 0x2d02 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cda:	6d 89       	ldd	r22, Y+21	; 0x15
    2cdc:	7e 89       	ldd	r23, Y+22	; 0x16
    2cde:	8f 89       	ldd	r24, Y+23	; 0x17
    2ce0:	98 8d       	ldd	r25, Y+24	; 0x18
    2ce2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ce6:	dc 01       	movw	r26, r24
    2ce8:	cb 01       	movw	r24, r22
    2cea:	9c 8b       	std	Y+20, r25	; 0x14
    2cec:	8b 8b       	std	Y+19, r24	; 0x13
    2cee:	8b 89       	ldd	r24, Y+19	; 0x13
    2cf0:	9c 89       	ldd	r25, Y+20	; 0x14
    2cf2:	98 8b       	std	Y+16, r25	; 0x10
    2cf4:	8f 87       	std	Y+15, r24	; 0x0f
    2cf6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cf8:	98 89       	ldd	r25, Y+16	; 0x10
    2cfa:	01 97       	sbiw	r24, 0x01	; 1
    2cfc:	f1 f7       	brne	.-4      	; 0x2cfa <LCD_sendCommand+0x2d6>
    2cfe:	98 8b       	std	Y+16, r25	; 0x10
    2d00:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_LOW);
    2d02:	83 e0       	ldi	r24, 0x03	; 3
    2d04:	67 e0       	ldi	r22, 0x07	; 7
    2d06:	40 e0       	ldi	r20, 0x00	; 0
    2d08:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <GPIO_writePin>
    2d0c:	80 e0       	ldi	r24, 0x00	; 0
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	a0 e8       	ldi	r26, 0x80	; 128
    2d12:	bf e3       	ldi	r27, 0x3F	; 63
    2d14:	8b 87       	std	Y+11, r24	; 0x0b
    2d16:	9c 87       	std	Y+12, r25	; 0x0c
    2d18:	ad 87       	std	Y+13, r26	; 0x0d
    2d1a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d20:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d22:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d24:	20 e0       	ldi	r18, 0x00	; 0
    2d26:	30 e0       	ldi	r19, 0x00	; 0
    2d28:	4a ef       	ldi	r20, 0xFA	; 250
    2d2a:	54 e4       	ldi	r21, 0x44	; 68
    2d2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d30:	dc 01       	movw	r26, r24
    2d32:	cb 01       	movw	r24, r22
    2d34:	8f 83       	std	Y+7, r24	; 0x07
    2d36:	98 87       	std	Y+8, r25	; 0x08
    2d38:	a9 87       	std	Y+9, r26	; 0x09
    2d3a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d3c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d3e:	78 85       	ldd	r23, Y+8	; 0x08
    2d40:	89 85       	ldd	r24, Y+9	; 0x09
    2d42:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d44:	20 e0       	ldi	r18, 0x00	; 0
    2d46:	30 e0       	ldi	r19, 0x00	; 0
    2d48:	40 e8       	ldi	r20, 0x80	; 128
    2d4a:	5f e3       	ldi	r21, 0x3F	; 63
    2d4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d50:	88 23       	and	r24, r24
    2d52:	2c f4       	brge	.+10     	; 0x2d5e <LCD_sendCommand+0x33a>
		__ticks = 1;
    2d54:	81 e0       	ldi	r24, 0x01	; 1
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	9e 83       	std	Y+6, r25	; 0x06
    2d5a:	8d 83       	std	Y+5, r24	; 0x05
    2d5c:	3f c0       	rjmp	.+126    	; 0x2ddc <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2d5e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d60:	78 85       	ldd	r23, Y+8	; 0x08
    2d62:	89 85       	ldd	r24, Y+9	; 0x09
    2d64:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d66:	20 e0       	ldi	r18, 0x00	; 0
    2d68:	3f ef       	ldi	r19, 0xFF	; 255
    2d6a:	4f e7       	ldi	r20, 0x7F	; 127
    2d6c:	57 e4       	ldi	r21, 0x47	; 71
    2d6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d72:	18 16       	cp	r1, r24
    2d74:	4c f5       	brge	.+82     	; 0x2dc8 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d76:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d78:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d7e:	20 e0       	ldi	r18, 0x00	; 0
    2d80:	30 e0       	ldi	r19, 0x00	; 0
    2d82:	40 e2       	ldi	r20, 0x20	; 32
    2d84:	51 e4       	ldi	r21, 0x41	; 65
    2d86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d8a:	dc 01       	movw	r26, r24
    2d8c:	cb 01       	movw	r24, r22
    2d8e:	bc 01       	movw	r22, r24
    2d90:	cd 01       	movw	r24, r26
    2d92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d96:	dc 01       	movw	r26, r24
    2d98:	cb 01       	movw	r24, r22
    2d9a:	9e 83       	std	Y+6, r25	; 0x06
    2d9c:	8d 83       	std	Y+5, r24	; 0x05
    2d9e:	0f c0       	rjmp	.+30     	; 0x2dbe <LCD_sendCommand+0x39a>
    2da0:	88 ec       	ldi	r24, 0xC8	; 200
    2da2:	90 e0       	ldi	r25, 0x00	; 0
    2da4:	9c 83       	std	Y+4, r25	; 0x04
    2da6:	8b 83       	std	Y+3, r24	; 0x03
    2da8:	8b 81       	ldd	r24, Y+3	; 0x03
    2daa:	9c 81       	ldd	r25, Y+4	; 0x04
    2dac:	01 97       	sbiw	r24, 0x01	; 1
    2dae:	f1 f7       	brne	.-4      	; 0x2dac <LCD_sendCommand+0x388>
    2db0:	9c 83       	std	Y+4, r25	; 0x04
    2db2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2db4:	8d 81       	ldd	r24, Y+5	; 0x05
    2db6:	9e 81       	ldd	r25, Y+6	; 0x06
    2db8:	01 97       	sbiw	r24, 0x01	; 1
    2dba:	9e 83       	std	Y+6, r25	; 0x06
    2dbc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dbe:	8d 81       	ldd	r24, Y+5	; 0x05
    2dc0:	9e 81       	ldd	r25, Y+6	; 0x06
    2dc2:	00 97       	sbiw	r24, 0x00	; 0
    2dc4:	69 f7       	brne	.-38     	; 0x2da0 <LCD_sendCommand+0x37c>
    2dc6:	14 c0       	rjmp	.+40     	; 0x2df0 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dc8:	6f 81       	ldd	r22, Y+7	; 0x07
    2dca:	78 85       	ldd	r23, Y+8	; 0x08
    2dcc:	89 85       	ldd	r24, Y+9	; 0x09
    2dce:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd4:	dc 01       	movw	r26, r24
    2dd6:	cb 01       	movw	r24, r22
    2dd8:	9e 83       	std	Y+6, r25	; 0x06
    2dda:	8d 83       	std	Y+5, r24	; 0x05
    2ddc:	8d 81       	ldd	r24, Y+5	; 0x05
    2dde:	9e 81       	ldd	r25, Y+6	; 0x06
    2de0:	9a 83       	std	Y+2, r25	; 0x02
    2de2:	89 83       	std	Y+1, r24	; 0x01
    2de4:	89 81       	ldd	r24, Y+1	; 0x01
    2de6:	9a 81       	ldd	r25, Y+2	; 0x02
    2de8:	01 97       	sbiw	r24, 0x01	; 1
    2dea:	f1 f7       	brne	.-4      	; 0x2de8 <LCD_sendCommand+0x3c4>
    2dec:	9a 83       	std	Y+2, r25	; 0x02
    2dee:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	
#endif
}
    2df0:	e9 96       	adiw	r28, 0x39	; 57
    2df2:	0f b6       	in	r0, 0x3f	; 63
    2df4:	f8 94       	cli
    2df6:	de bf       	out	0x3e, r29	; 62
    2df8:	0f be       	out	0x3f, r0	; 63
    2dfa:	cd bf       	out	0x3d, r28	; 61
    2dfc:	cf 91       	pop	r28
    2dfe:	df 91       	pop	r29
    2e00:	08 95       	ret

00002e02 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 character)
{
    2e02:	df 93       	push	r29
    2e04:	cf 93       	push	r28
    2e06:	cd b7       	in	r28, 0x3d	; 61
    2e08:	de b7       	in	r29, 0x3e	; 62
    2e0a:	e9 97       	sbiw	r28, 0x39	; 57
    2e0c:	0f b6       	in	r0, 0x3f	; 63
    2e0e:	f8 94       	cli
    2e10:	de bf       	out	0x3e, r29	; 62
    2e12:	0f be       	out	0x3f, r0	; 63
    2e14:	cd bf       	out	0x3d, r28	; 61
    2e16:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);
    2e18:	83 e0       	ldi	r24, 0x03	; 3
    2e1a:	66 e0       	ldi	r22, 0x06	; 6
    2e1c:	41 e0       	ldi	r20, 0x01	; 1
    2e1e:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <GPIO_writePin>
    2e22:	80 e0       	ldi	r24, 0x00	; 0
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	a0 e8       	ldi	r26, 0x80	; 128
    2e28:	bf e3       	ldi	r27, 0x3F	; 63
    2e2a:	8d ab       	std	Y+53, r24	; 0x35
    2e2c:	9e ab       	std	Y+54, r25	; 0x36
    2e2e:	af ab       	std	Y+55, r26	; 0x37
    2e30:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e32:	6d a9       	ldd	r22, Y+53	; 0x35
    2e34:	7e a9       	ldd	r23, Y+54	; 0x36
    2e36:	8f a9       	ldd	r24, Y+55	; 0x37
    2e38:	98 ad       	ldd	r25, Y+56	; 0x38
    2e3a:	20 e0       	ldi	r18, 0x00	; 0
    2e3c:	30 e0       	ldi	r19, 0x00	; 0
    2e3e:	4a ef       	ldi	r20, 0xFA	; 250
    2e40:	54 e4       	ldi	r21, 0x44	; 68
    2e42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e46:	dc 01       	movw	r26, r24
    2e48:	cb 01       	movw	r24, r22
    2e4a:	89 ab       	std	Y+49, r24	; 0x31
    2e4c:	9a ab       	std	Y+50, r25	; 0x32
    2e4e:	ab ab       	std	Y+51, r26	; 0x33
    2e50:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2e52:	69 a9       	ldd	r22, Y+49	; 0x31
    2e54:	7a a9       	ldd	r23, Y+50	; 0x32
    2e56:	8b a9       	ldd	r24, Y+51	; 0x33
    2e58:	9c a9       	ldd	r25, Y+52	; 0x34
    2e5a:	20 e0       	ldi	r18, 0x00	; 0
    2e5c:	30 e0       	ldi	r19, 0x00	; 0
    2e5e:	40 e8       	ldi	r20, 0x80	; 128
    2e60:	5f e3       	ldi	r21, 0x3F	; 63
    2e62:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e66:	88 23       	and	r24, r24
    2e68:	2c f4       	brge	.+10     	; 0x2e74 <LCD_displayCharacter+0x72>
		__ticks = 1;
    2e6a:	81 e0       	ldi	r24, 0x01	; 1
    2e6c:	90 e0       	ldi	r25, 0x00	; 0
    2e6e:	98 ab       	std	Y+48, r25	; 0x30
    2e70:	8f a7       	std	Y+47, r24	; 0x2f
    2e72:	3f c0       	rjmp	.+126    	; 0x2ef2 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2e74:	69 a9       	ldd	r22, Y+49	; 0x31
    2e76:	7a a9       	ldd	r23, Y+50	; 0x32
    2e78:	8b a9       	ldd	r24, Y+51	; 0x33
    2e7a:	9c a9       	ldd	r25, Y+52	; 0x34
    2e7c:	20 e0       	ldi	r18, 0x00	; 0
    2e7e:	3f ef       	ldi	r19, 0xFF	; 255
    2e80:	4f e7       	ldi	r20, 0x7F	; 127
    2e82:	57 e4       	ldi	r21, 0x47	; 71
    2e84:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e88:	18 16       	cp	r1, r24
    2e8a:	4c f5       	brge	.+82     	; 0x2ede <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e8c:	6d a9       	ldd	r22, Y+53	; 0x35
    2e8e:	7e a9       	ldd	r23, Y+54	; 0x36
    2e90:	8f a9       	ldd	r24, Y+55	; 0x37
    2e92:	98 ad       	ldd	r25, Y+56	; 0x38
    2e94:	20 e0       	ldi	r18, 0x00	; 0
    2e96:	30 e0       	ldi	r19, 0x00	; 0
    2e98:	40 e2       	ldi	r20, 0x20	; 32
    2e9a:	51 e4       	ldi	r21, 0x41	; 65
    2e9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ea0:	dc 01       	movw	r26, r24
    2ea2:	cb 01       	movw	r24, r22
    2ea4:	bc 01       	movw	r22, r24
    2ea6:	cd 01       	movw	r24, r26
    2ea8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eac:	dc 01       	movw	r26, r24
    2eae:	cb 01       	movw	r24, r22
    2eb0:	98 ab       	std	Y+48, r25	; 0x30
    2eb2:	8f a7       	std	Y+47, r24	; 0x2f
    2eb4:	0f c0       	rjmp	.+30     	; 0x2ed4 <LCD_displayCharacter+0xd2>
    2eb6:	88 ec       	ldi	r24, 0xC8	; 200
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	9e a7       	std	Y+46, r25	; 0x2e
    2ebc:	8d a7       	std	Y+45, r24	; 0x2d
    2ebe:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ec0:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ec2:	01 97       	sbiw	r24, 0x01	; 1
    2ec4:	f1 f7       	brne	.-4      	; 0x2ec2 <LCD_displayCharacter+0xc0>
    2ec6:	9e a7       	std	Y+46, r25	; 0x2e
    2ec8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eca:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ecc:	98 a9       	ldd	r25, Y+48	; 0x30
    2ece:	01 97       	sbiw	r24, 0x01	; 1
    2ed0:	98 ab       	std	Y+48, r25	; 0x30
    2ed2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ed4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ed6:	98 a9       	ldd	r25, Y+48	; 0x30
    2ed8:	00 97       	sbiw	r24, 0x00	; 0
    2eda:	69 f7       	brne	.-38     	; 0x2eb6 <LCD_displayCharacter+0xb4>
    2edc:	14 c0       	rjmp	.+40     	; 0x2f06 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ede:	69 a9       	ldd	r22, Y+49	; 0x31
    2ee0:	7a a9       	ldd	r23, Y+50	; 0x32
    2ee2:	8b a9       	ldd	r24, Y+51	; 0x33
    2ee4:	9c a9       	ldd	r25, Y+52	; 0x34
    2ee6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eea:	dc 01       	movw	r26, r24
    2eec:	cb 01       	movw	r24, r22
    2eee:	98 ab       	std	Y+48, r25	; 0x30
    2ef0:	8f a7       	std	Y+47, r24	; 0x2f
    2ef2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ef4:	98 a9       	ldd	r25, Y+48	; 0x30
    2ef6:	9c a7       	std	Y+44, r25	; 0x2c
    2ef8:	8b a7       	std	Y+43, r24	; 0x2b
    2efa:	8b a5       	ldd	r24, Y+43	; 0x2b
    2efc:	9c a5       	ldd	r25, Y+44	; 0x2c
    2efe:	01 97       	sbiw	r24, 0x01	; 1
    2f00:	f1 f7       	brne	.-4      	; 0x2efe <LCD_displayCharacter+0xfc>
    2f02:	9c a7       	std	Y+44, r25	; 0x2c
    2f04:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_HIGH);
    2f06:	83 e0       	ldi	r24, 0x03	; 3
    2f08:	67 e0       	ldi	r22, 0x07	; 7
    2f0a:	41 e0       	ldi	r20, 0x01	; 1
    2f0c:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <GPIO_writePin>
    2f10:	80 e0       	ldi	r24, 0x00	; 0
    2f12:	90 e0       	ldi	r25, 0x00	; 0
    2f14:	a0 e8       	ldi	r26, 0x80	; 128
    2f16:	bf e3       	ldi	r27, 0x3F	; 63
    2f18:	8f a3       	std	Y+39, r24	; 0x27
    2f1a:	98 a7       	std	Y+40, r25	; 0x28
    2f1c:	a9 a7       	std	Y+41, r26	; 0x29
    2f1e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f20:	6f a1       	ldd	r22, Y+39	; 0x27
    2f22:	78 a5       	ldd	r23, Y+40	; 0x28
    2f24:	89 a5       	ldd	r24, Y+41	; 0x29
    2f26:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f28:	20 e0       	ldi	r18, 0x00	; 0
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
    2f2c:	4a ef       	ldi	r20, 0xFA	; 250
    2f2e:	54 e4       	ldi	r21, 0x44	; 68
    2f30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f34:	dc 01       	movw	r26, r24
    2f36:	cb 01       	movw	r24, r22
    2f38:	8b a3       	std	Y+35, r24	; 0x23
    2f3a:	9c a3       	std	Y+36, r25	; 0x24
    2f3c:	ad a3       	std	Y+37, r26	; 0x25
    2f3e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2f40:	6b a1       	ldd	r22, Y+35	; 0x23
    2f42:	7c a1       	ldd	r23, Y+36	; 0x24
    2f44:	8d a1       	ldd	r24, Y+37	; 0x25
    2f46:	9e a1       	ldd	r25, Y+38	; 0x26
    2f48:	20 e0       	ldi	r18, 0x00	; 0
    2f4a:	30 e0       	ldi	r19, 0x00	; 0
    2f4c:	40 e8       	ldi	r20, 0x80	; 128
    2f4e:	5f e3       	ldi	r21, 0x3F	; 63
    2f50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f54:	88 23       	and	r24, r24
    2f56:	2c f4       	brge	.+10     	; 0x2f62 <LCD_displayCharacter+0x160>
		__ticks = 1;
    2f58:	81 e0       	ldi	r24, 0x01	; 1
    2f5a:	90 e0       	ldi	r25, 0x00	; 0
    2f5c:	9a a3       	std	Y+34, r25	; 0x22
    2f5e:	89 a3       	std	Y+33, r24	; 0x21
    2f60:	3f c0       	rjmp	.+126    	; 0x2fe0 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2f62:	6b a1       	ldd	r22, Y+35	; 0x23
    2f64:	7c a1       	ldd	r23, Y+36	; 0x24
    2f66:	8d a1       	ldd	r24, Y+37	; 0x25
    2f68:	9e a1       	ldd	r25, Y+38	; 0x26
    2f6a:	20 e0       	ldi	r18, 0x00	; 0
    2f6c:	3f ef       	ldi	r19, 0xFF	; 255
    2f6e:	4f e7       	ldi	r20, 0x7F	; 127
    2f70:	57 e4       	ldi	r21, 0x47	; 71
    2f72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f76:	18 16       	cp	r1, r24
    2f78:	4c f5       	brge	.+82     	; 0x2fcc <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f7a:	6f a1       	ldd	r22, Y+39	; 0x27
    2f7c:	78 a5       	ldd	r23, Y+40	; 0x28
    2f7e:	89 a5       	ldd	r24, Y+41	; 0x29
    2f80:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f82:	20 e0       	ldi	r18, 0x00	; 0
    2f84:	30 e0       	ldi	r19, 0x00	; 0
    2f86:	40 e2       	ldi	r20, 0x20	; 32
    2f88:	51 e4       	ldi	r21, 0x41	; 65
    2f8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f8e:	dc 01       	movw	r26, r24
    2f90:	cb 01       	movw	r24, r22
    2f92:	bc 01       	movw	r22, r24
    2f94:	cd 01       	movw	r24, r26
    2f96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f9a:	dc 01       	movw	r26, r24
    2f9c:	cb 01       	movw	r24, r22
    2f9e:	9a a3       	std	Y+34, r25	; 0x22
    2fa0:	89 a3       	std	Y+33, r24	; 0x21
    2fa2:	0f c0       	rjmp	.+30     	; 0x2fc2 <LCD_displayCharacter+0x1c0>
    2fa4:	88 ec       	ldi	r24, 0xC8	; 200
    2fa6:	90 e0       	ldi	r25, 0x00	; 0
    2fa8:	98 a3       	std	Y+32, r25	; 0x20
    2faa:	8f 8f       	std	Y+31, r24	; 0x1f
    2fac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2fae:	98 a1       	ldd	r25, Y+32	; 0x20
    2fb0:	01 97       	sbiw	r24, 0x01	; 1
    2fb2:	f1 f7       	brne	.-4      	; 0x2fb0 <LCD_displayCharacter+0x1ae>
    2fb4:	98 a3       	std	Y+32, r25	; 0x20
    2fb6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fb8:	89 a1       	ldd	r24, Y+33	; 0x21
    2fba:	9a a1       	ldd	r25, Y+34	; 0x22
    2fbc:	01 97       	sbiw	r24, 0x01	; 1
    2fbe:	9a a3       	std	Y+34, r25	; 0x22
    2fc0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fc2:	89 a1       	ldd	r24, Y+33	; 0x21
    2fc4:	9a a1       	ldd	r25, Y+34	; 0x22
    2fc6:	00 97       	sbiw	r24, 0x00	; 0
    2fc8:	69 f7       	brne	.-38     	; 0x2fa4 <LCD_displayCharacter+0x1a2>
    2fca:	14 c0       	rjmp	.+40     	; 0x2ff4 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fcc:	6b a1       	ldd	r22, Y+35	; 0x23
    2fce:	7c a1       	ldd	r23, Y+36	; 0x24
    2fd0:	8d a1       	ldd	r24, Y+37	; 0x25
    2fd2:	9e a1       	ldd	r25, Y+38	; 0x26
    2fd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd8:	dc 01       	movw	r26, r24
    2fda:	cb 01       	movw	r24, r22
    2fdc:	9a a3       	std	Y+34, r25	; 0x22
    2fde:	89 a3       	std	Y+33, r24	; 0x21
    2fe0:	89 a1       	ldd	r24, Y+33	; 0x21
    2fe2:	9a a1       	ldd	r25, Y+34	; 0x22
    2fe4:	9e 8f       	std	Y+30, r25	; 0x1e
    2fe6:	8d 8f       	std	Y+29, r24	; 0x1d
    2fe8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2fea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2fec:	01 97       	sbiw	r24, 0x01	; 1
    2fee:	f1 f7       	brne	.-4      	; 0x2fec <LCD_displayCharacter+0x1ea>
    2ff0:	9e 8f       	std	Y+30, r25	; 0x1e
    2ff2:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_writePin(LCD_ENABLE_PORT_ID,LCD_ENABLE_PIN_ID,LOGIC_LOW);
	_delay_ms(1);

#elif(LCD_DATA_BITS_MODE == 8)

	GPIO_writePort(LCD_DATABUS_PORT_ID, character);
    2ff4:	82 e0       	ldi	r24, 0x02	; 2
    2ff6:	69 ad       	ldd	r22, Y+57	; 0x39
    2ff8:	0e 94 66 12 	call	0x24cc	; 0x24cc <GPIO_writePort>
    2ffc:	80 e0       	ldi	r24, 0x00	; 0
    2ffe:	90 e0       	ldi	r25, 0x00	; 0
    3000:	a0 e8       	ldi	r26, 0x80	; 128
    3002:	bf e3       	ldi	r27, 0x3F	; 63
    3004:	89 8f       	std	Y+25, r24	; 0x19
    3006:	9a 8f       	std	Y+26, r25	; 0x1a
    3008:	ab 8f       	std	Y+27, r26	; 0x1b
    300a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    300c:	69 8d       	ldd	r22, Y+25	; 0x19
    300e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3010:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3012:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3014:	20 e0       	ldi	r18, 0x00	; 0
    3016:	30 e0       	ldi	r19, 0x00	; 0
    3018:	4a ef       	ldi	r20, 0xFA	; 250
    301a:	54 e4       	ldi	r21, 0x44	; 68
    301c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3020:	dc 01       	movw	r26, r24
    3022:	cb 01       	movw	r24, r22
    3024:	8d 8b       	std	Y+21, r24	; 0x15
    3026:	9e 8b       	std	Y+22, r25	; 0x16
    3028:	af 8b       	std	Y+23, r26	; 0x17
    302a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    302c:	6d 89       	ldd	r22, Y+21	; 0x15
    302e:	7e 89       	ldd	r23, Y+22	; 0x16
    3030:	8f 89       	ldd	r24, Y+23	; 0x17
    3032:	98 8d       	ldd	r25, Y+24	; 0x18
    3034:	20 e0       	ldi	r18, 0x00	; 0
    3036:	30 e0       	ldi	r19, 0x00	; 0
    3038:	40 e8       	ldi	r20, 0x80	; 128
    303a:	5f e3       	ldi	r21, 0x3F	; 63
    303c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3040:	88 23       	and	r24, r24
    3042:	2c f4       	brge	.+10     	; 0x304e <LCD_displayCharacter+0x24c>
		__ticks = 1;
    3044:	81 e0       	ldi	r24, 0x01	; 1
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	9c 8b       	std	Y+20, r25	; 0x14
    304a:	8b 8b       	std	Y+19, r24	; 0x13
    304c:	3f c0       	rjmp	.+126    	; 0x30cc <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    304e:	6d 89       	ldd	r22, Y+21	; 0x15
    3050:	7e 89       	ldd	r23, Y+22	; 0x16
    3052:	8f 89       	ldd	r24, Y+23	; 0x17
    3054:	98 8d       	ldd	r25, Y+24	; 0x18
    3056:	20 e0       	ldi	r18, 0x00	; 0
    3058:	3f ef       	ldi	r19, 0xFF	; 255
    305a:	4f e7       	ldi	r20, 0x7F	; 127
    305c:	57 e4       	ldi	r21, 0x47	; 71
    305e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3062:	18 16       	cp	r1, r24
    3064:	4c f5       	brge	.+82     	; 0x30b8 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3066:	69 8d       	ldd	r22, Y+25	; 0x19
    3068:	7a 8d       	ldd	r23, Y+26	; 0x1a
    306a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    306c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    306e:	20 e0       	ldi	r18, 0x00	; 0
    3070:	30 e0       	ldi	r19, 0x00	; 0
    3072:	40 e2       	ldi	r20, 0x20	; 32
    3074:	51 e4       	ldi	r21, 0x41	; 65
    3076:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    307a:	dc 01       	movw	r26, r24
    307c:	cb 01       	movw	r24, r22
    307e:	bc 01       	movw	r22, r24
    3080:	cd 01       	movw	r24, r26
    3082:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3086:	dc 01       	movw	r26, r24
    3088:	cb 01       	movw	r24, r22
    308a:	9c 8b       	std	Y+20, r25	; 0x14
    308c:	8b 8b       	std	Y+19, r24	; 0x13
    308e:	0f c0       	rjmp	.+30     	; 0x30ae <LCD_displayCharacter+0x2ac>
    3090:	88 ec       	ldi	r24, 0xC8	; 200
    3092:	90 e0       	ldi	r25, 0x00	; 0
    3094:	9a 8b       	std	Y+18, r25	; 0x12
    3096:	89 8b       	std	Y+17, r24	; 0x11
    3098:	89 89       	ldd	r24, Y+17	; 0x11
    309a:	9a 89       	ldd	r25, Y+18	; 0x12
    309c:	01 97       	sbiw	r24, 0x01	; 1
    309e:	f1 f7       	brne	.-4      	; 0x309c <LCD_displayCharacter+0x29a>
    30a0:	9a 8b       	std	Y+18, r25	; 0x12
    30a2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30a4:	8b 89       	ldd	r24, Y+19	; 0x13
    30a6:	9c 89       	ldd	r25, Y+20	; 0x14
    30a8:	01 97       	sbiw	r24, 0x01	; 1
    30aa:	9c 8b       	std	Y+20, r25	; 0x14
    30ac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30ae:	8b 89       	ldd	r24, Y+19	; 0x13
    30b0:	9c 89       	ldd	r25, Y+20	; 0x14
    30b2:	00 97       	sbiw	r24, 0x00	; 0
    30b4:	69 f7       	brne	.-38     	; 0x3090 <LCD_displayCharacter+0x28e>
    30b6:	14 c0       	rjmp	.+40     	; 0x30e0 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30b8:	6d 89       	ldd	r22, Y+21	; 0x15
    30ba:	7e 89       	ldd	r23, Y+22	; 0x16
    30bc:	8f 89       	ldd	r24, Y+23	; 0x17
    30be:	98 8d       	ldd	r25, Y+24	; 0x18
    30c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30c4:	dc 01       	movw	r26, r24
    30c6:	cb 01       	movw	r24, r22
    30c8:	9c 8b       	std	Y+20, r25	; 0x14
    30ca:	8b 8b       	std	Y+19, r24	; 0x13
    30cc:	8b 89       	ldd	r24, Y+19	; 0x13
    30ce:	9c 89       	ldd	r25, Y+20	; 0x14
    30d0:	98 8b       	std	Y+16, r25	; 0x10
    30d2:	8f 87       	std	Y+15, r24	; 0x0f
    30d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    30d6:	98 89       	ldd	r25, Y+16	; 0x10
    30d8:	01 97       	sbiw	r24, 0x01	; 1
    30da:	f1 f7       	brne	.-4      	; 0x30d8 <LCD_displayCharacter+0x2d6>
    30dc:	98 8b       	std	Y+16, r25	; 0x10
    30de:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_LOW);
    30e0:	83 e0       	ldi	r24, 0x03	; 3
    30e2:	67 e0       	ldi	r22, 0x07	; 7
    30e4:	40 e0       	ldi	r20, 0x00	; 0
    30e6:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <GPIO_writePin>
    30ea:	80 e0       	ldi	r24, 0x00	; 0
    30ec:	90 e0       	ldi	r25, 0x00	; 0
    30ee:	a0 e8       	ldi	r26, 0x80	; 128
    30f0:	bf e3       	ldi	r27, 0x3F	; 63
    30f2:	8b 87       	std	Y+11, r24	; 0x0b
    30f4:	9c 87       	std	Y+12, r25	; 0x0c
    30f6:	ad 87       	std	Y+13, r26	; 0x0d
    30f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    30fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    30fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3100:	9e 85       	ldd	r25, Y+14	; 0x0e
    3102:	20 e0       	ldi	r18, 0x00	; 0
    3104:	30 e0       	ldi	r19, 0x00	; 0
    3106:	4a ef       	ldi	r20, 0xFA	; 250
    3108:	54 e4       	ldi	r21, 0x44	; 68
    310a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    310e:	dc 01       	movw	r26, r24
    3110:	cb 01       	movw	r24, r22
    3112:	8f 83       	std	Y+7, r24	; 0x07
    3114:	98 87       	std	Y+8, r25	; 0x08
    3116:	a9 87       	std	Y+9, r26	; 0x09
    3118:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    311a:	6f 81       	ldd	r22, Y+7	; 0x07
    311c:	78 85       	ldd	r23, Y+8	; 0x08
    311e:	89 85       	ldd	r24, Y+9	; 0x09
    3120:	9a 85       	ldd	r25, Y+10	; 0x0a
    3122:	20 e0       	ldi	r18, 0x00	; 0
    3124:	30 e0       	ldi	r19, 0x00	; 0
    3126:	40 e8       	ldi	r20, 0x80	; 128
    3128:	5f e3       	ldi	r21, 0x3F	; 63
    312a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    312e:	88 23       	and	r24, r24
    3130:	2c f4       	brge	.+10     	; 0x313c <LCD_displayCharacter+0x33a>
		__ticks = 1;
    3132:	81 e0       	ldi	r24, 0x01	; 1
    3134:	90 e0       	ldi	r25, 0x00	; 0
    3136:	9e 83       	std	Y+6, r25	; 0x06
    3138:	8d 83       	std	Y+5, r24	; 0x05
    313a:	3f c0       	rjmp	.+126    	; 0x31ba <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    313c:	6f 81       	ldd	r22, Y+7	; 0x07
    313e:	78 85       	ldd	r23, Y+8	; 0x08
    3140:	89 85       	ldd	r24, Y+9	; 0x09
    3142:	9a 85       	ldd	r25, Y+10	; 0x0a
    3144:	20 e0       	ldi	r18, 0x00	; 0
    3146:	3f ef       	ldi	r19, 0xFF	; 255
    3148:	4f e7       	ldi	r20, 0x7F	; 127
    314a:	57 e4       	ldi	r21, 0x47	; 71
    314c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3150:	18 16       	cp	r1, r24
    3152:	4c f5       	brge	.+82     	; 0x31a6 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3154:	6b 85       	ldd	r22, Y+11	; 0x0b
    3156:	7c 85       	ldd	r23, Y+12	; 0x0c
    3158:	8d 85       	ldd	r24, Y+13	; 0x0d
    315a:	9e 85       	ldd	r25, Y+14	; 0x0e
    315c:	20 e0       	ldi	r18, 0x00	; 0
    315e:	30 e0       	ldi	r19, 0x00	; 0
    3160:	40 e2       	ldi	r20, 0x20	; 32
    3162:	51 e4       	ldi	r21, 0x41	; 65
    3164:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3168:	dc 01       	movw	r26, r24
    316a:	cb 01       	movw	r24, r22
    316c:	bc 01       	movw	r22, r24
    316e:	cd 01       	movw	r24, r26
    3170:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3174:	dc 01       	movw	r26, r24
    3176:	cb 01       	movw	r24, r22
    3178:	9e 83       	std	Y+6, r25	; 0x06
    317a:	8d 83       	std	Y+5, r24	; 0x05
    317c:	0f c0       	rjmp	.+30     	; 0x319c <LCD_displayCharacter+0x39a>
    317e:	88 ec       	ldi	r24, 0xC8	; 200
    3180:	90 e0       	ldi	r25, 0x00	; 0
    3182:	9c 83       	std	Y+4, r25	; 0x04
    3184:	8b 83       	std	Y+3, r24	; 0x03
    3186:	8b 81       	ldd	r24, Y+3	; 0x03
    3188:	9c 81       	ldd	r25, Y+4	; 0x04
    318a:	01 97       	sbiw	r24, 0x01	; 1
    318c:	f1 f7       	brne	.-4      	; 0x318a <LCD_displayCharacter+0x388>
    318e:	9c 83       	std	Y+4, r25	; 0x04
    3190:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3192:	8d 81       	ldd	r24, Y+5	; 0x05
    3194:	9e 81       	ldd	r25, Y+6	; 0x06
    3196:	01 97       	sbiw	r24, 0x01	; 1
    3198:	9e 83       	std	Y+6, r25	; 0x06
    319a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    319c:	8d 81       	ldd	r24, Y+5	; 0x05
    319e:	9e 81       	ldd	r25, Y+6	; 0x06
    31a0:	00 97       	sbiw	r24, 0x00	; 0
    31a2:	69 f7       	brne	.-38     	; 0x317e <LCD_displayCharacter+0x37c>
    31a4:	14 c0       	rjmp	.+40     	; 0x31ce <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31a6:	6f 81       	ldd	r22, Y+7	; 0x07
    31a8:	78 85       	ldd	r23, Y+8	; 0x08
    31aa:	89 85       	ldd	r24, Y+9	; 0x09
    31ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    31ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31b2:	dc 01       	movw	r26, r24
    31b4:	cb 01       	movw	r24, r22
    31b6:	9e 83       	std	Y+6, r25	; 0x06
    31b8:	8d 83       	std	Y+5, r24	; 0x05
    31ba:	8d 81       	ldd	r24, Y+5	; 0x05
    31bc:	9e 81       	ldd	r25, Y+6	; 0x06
    31be:	9a 83       	std	Y+2, r25	; 0x02
    31c0:	89 83       	std	Y+1, r24	; 0x01
    31c2:	89 81       	ldd	r24, Y+1	; 0x01
    31c4:	9a 81       	ldd	r25, Y+2	; 0x02
    31c6:	01 97       	sbiw	r24, 0x01	; 1
    31c8:	f1 f7       	brne	.-4      	; 0x31c6 <LCD_displayCharacter+0x3c4>
    31ca:	9a 83       	std	Y+2, r25	; 0x02
    31cc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	
#endif

}
    31ce:	e9 96       	adiw	r28, 0x39	; 57
    31d0:	0f b6       	in	r0, 0x3f	; 63
    31d2:	f8 94       	cli
    31d4:	de bf       	out	0x3e, r29	; 62
    31d6:	0f be       	out	0x3f, r0	; 63
    31d8:	cd bf       	out	0x3d, r28	; 61
    31da:	cf 91       	pop	r28
    31dc:	df 91       	pop	r29
    31de:	08 95       	ret

000031e0 <LCD_displayString>:

void LCD_displayString(const uint8 * string)
{
    31e0:	df 93       	push	r29
    31e2:	cf 93       	push	r28
    31e4:	00 d0       	rcall	.+0      	; 0x31e6 <LCD_displayString+0x6>
    31e6:	0f 92       	push	r0
    31e8:	cd b7       	in	r28, 0x3d	; 61
    31ea:	de b7       	in	r29, 0x3e	; 62
    31ec:	9b 83       	std	Y+3, r25	; 0x03
    31ee:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    31f0:	19 82       	std	Y+1, r1	; 0x01
    31f2:	0e c0       	rjmp	.+28     	; 0x3210 <LCD_displayString+0x30>
	while(string[i] != '\0')
	{
		LCD_displayCharacter(string[i]);
    31f4:	89 81       	ldd	r24, Y+1	; 0x01
    31f6:	28 2f       	mov	r18, r24
    31f8:	30 e0       	ldi	r19, 0x00	; 0
    31fa:	8a 81       	ldd	r24, Y+2	; 0x02
    31fc:	9b 81       	ldd	r25, Y+3	; 0x03
    31fe:	fc 01       	movw	r30, r24
    3200:	e2 0f       	add	r30, r18
    3202:	f3 1f       	adc	r31, r19
    3204:	80 81       	ld	r24, Z
    3206:	0e 94 01 17 	call	0x2e02	; 0x2e02 <LCD_displayCharacter>
		i++;
    320a:	89 81       	ldd	r24, Y+1	; 0x01
    320c:	8f 5f       	subi	r24, 0xFF	; 255
    320e:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const uint8 * string)
{
	uint8 i = 0;
	while(string[i] != '\0')
    3210:	89 81       	ldd	r24, Y+1	; 0x01
    3212:	28 2f       	mov	r18, r24
    3214:	30 e0       	ldi	r19, 0x00	; 0
    3216:	8a 81       	ldd	r24, Y+2	; 0x02
    3218:	9b 81       	ldd	r25, Y+3	; 0x03
    321a:	fc 01       	movw	r30, r24
    321c:	e2 0f       	add	r30, r18
    321e:	f3 1f       	adc	r31, r19
    3220:	80 81       	ld	r24, Z
    3222:	88 23       	and	r24, r24
    3224:	39 f7       	brne	.-50     	; 0x31f4 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(string[i]);
		i++;
	}
}
    3226:	0f 90       	pop	r0
    3228:	0f 90       	pop	r0
    322a:	0f 90       	pop	r0
    322c:	cf 91       	pop	r28
    322e:	df 91       	pop	r29
    3230:	08 95       	ret

00003232 <LCD_moveCursor>:

void LCD_moveCursor(uint8 row, uint8 col)
{
    3232:	df 93       	push	r29
    3234:	cf 93       	push	r28
    3236:	00 d0       	rcall	.+0      	; 0x3238 <LCD_moveCursor+0x6>
    3238:	00 d0       	rcall	.+0      	; 0x323a <LCD_moveCursor+0x8>
    323a:	0f 92       	push	r0
    323c:	cd b7       	in	r28, 0x3d	; 61
    323e:	de b7       	in	r29, 0x3e	; 62
    3240:	8a 83       	std	Y+2, r24	; 0x02
    3242:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	switch(row)
    3244:	8a 81       	ldd	r24, Y+2	; 0x02
    3246:	28 2f       	mov	r18, r24
    3248:	30 e0       	ldi	r19, 0x00	; 0
    324a:	3d 83       	std	Y+5, r19	; 0x05
    324c:	2c 83       	std	Y+4, r18	; 0x04
    324e:	8c 81       	ldd	r24, Y+4	; 0x04
    3250:	9d 81       	ldd	r25, Y+5	; 0x05
    3252:	81 30       	cpi	r24, 0x01	; 1
    3254:	91 05       	cpc	r25, r1
    3256:	c1 f0       	breq	.+48     	; 0x3288 <LCD_moveCursor+0x56>
    3258:	2c 81       	ldd	r18, Y+4	; 0x04
    325a:	3d 81       	ldd	r19, Y+5	; 0x05
    325c:	22 30       	cpi	r18, 0x02	; 2
    325e:	31 05       	cpc	r19, r1
    3260:	2c f4       	brge	.+10     	; 0x326c <LCD_moveCursor+0x3a>
    3262:	8c 81       	ldd	r24, Y+4	; 0x04
    3264:	9d 81       	ldd	r25, Y+5	; 0x05
    3266:	00 97       	sbiw	r24, 0x00	; 0
    3268:	61 f0       	breq	.+24     	; 0x3282 <LCD_moveCursor+0x50>
    326a:	19 c0       	rjmp	.+50     	; 0x329e <LCD_moveCursor+0x6c>
    326c:	2c 81       	ldd	r18, Y+4	; 0x04
    326e:	3d 81       	ldd	r19, Y+5	; 0x05
    3270:	22 30       	cpi	r18, 0x02	; 2
    3272:	31 05       	cpc	r19, r1
    3274:	69 f0       	breq	.+26     	; 0x3290 <LCD_moveCursor+0x5e>
    3276:	8c 81       	ldd	r24, Y+4	; 0x04
    3278:	9d 81       	ldd	r25, Y+5	; 0x05
    327a:	83 30       	cpi	r24, 0x03	; 3
    327c:	91 05       	cpc	r25, r1
    327e:	61 f0       	breq	.+24     	; 0x3298 <LCD_moveCursor+0x66>
    3280:	0e c0       	rjmp	.+28     	; 0x329e <LCD_moveCursor+0x6c>
	{
	case 0:
		lcd_memory_address = col;
    3282:	8b 81       	ldd	r24, Y+3	; 0x03
    3284:	89 83       	std	Y+1, r24	; 0x01
    3286:	0b c0       	rjmp	.+22     	; 0x329e <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address = col+0x40;
    3288:	8b 81       	ldd	r24, Y+3	; 0x03
    328a:	80 5c       	subi	r24, 0xC0	; 192
    328c:	89 83       	std	Y+1, r24	; 0x01
    328e:	07 c0       	rjmp	.+14     	; 0x329e <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address = col+0x10;
    3290:	8b 81       	ldd	r24, Y+3	; 0x03
    3292:	80 5f       	subi	r24, 0xF0	; 240
    3294:	89 83       	std	Y+1, r24	; 0x01
    3296:	03 c0       	rjmp	.+6      	; 0x329e <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address = col+0x50;
    3298:	8b 81       	ldd	r24, Y+3	; 0x03
    329a:	80 5b       	subi	r24, 0xB0	; 176
    329c:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_sendCommand(LCD_SET_CURSOR_LOCATION | lcd_memory_address);
    329e:	89 81       	ldd	r24, Y+1	; 0x01
    32a0:	80 68       	ori	r24, 0x80	; 128
    32a2:	0e 94 12 15 	call	0x2a24	; 0x2a24 <LCD_sendCommand>
}
    32a6:	0f 90       	pop	r0
    32a8:	0f 90       	pop	r0
    32aa:	0f 90       	pop	r0
    32ac:	0f 90       	pop	r0
    32ae:	0f 90       	pop	r0
    32b0:	cf 91       	pop	r28
    32b2:	df 91       	pop	r29
    32b4:	08 95       	ret

000032b6 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row, uint8 col, const uint8 * string)
{
    32b6:	df 93       	push	r29
    32b8:	cf 93       	push	r28
    32ba:	00 d0       	rcall	.+0      	; 0x32bc <LCD_displayStringRowColumn+0x6>
    32bc:	00 d0       	rcall	.+0      	; 0x32be <LCD_displayStringRowColumn+0x8>
    32be:	cd b7       	in	r28, 0x3d	; 61
    32c0:	de b7       	in	r29, 0x3e	; 62
    32c2:	89 83       	std	Y+1, r24	; 0x01
    32c4:	6a 83       	std	Y+2, r22	; 0x02
    32c6:	5c 83       	std	Y+4, r21	; 0x04
    32c8:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col);
    32ca:	89 81       	ldd	r24, Y+1	; 0x01
    32cc:	6a 81       	ldd	r22, Y+2	; 0x02
    32ce:	0e 94 19 19 	call	0x3232	; 0x3232 <LCD_moveCursor>
	LCD_displayString(string);
    32d2:	8b 81       	ldd	r24, Y+3	; 0x03
    32d4:	9c 81       	ldd	r25, Y+4	; 0x04
    32d6:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <LCD_displayString>
}
    32da:	0f 90       	pop	r0
    32dc:	0f 90       	pop	r0
    32de:	0f 90       	pop	r0
    32e0:	0f 90       	pop	r0
    32e2:	cf 91       	pop	r28
    32e4:	df 91       	pop	r29
    32e6:	08 95       	ret

000032e8 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    32e8:	df 93       	push	r29
    32ea:	cf 93       	push	r28
    32ec:	cd b7       	in	r28, 0x3d	; 61
    32ee:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    32f0:	81 e0       	ldi	r24, 0x01	; 1
    32f2:	0e 94 12 15 	call	0x2a24	; 0x2a24 <LCD_sendCommand>
}
    32f6:	cf 91       	pop	r28
    32f8:	df 91       	pop	r29
    32fa:	08 95       	ret

000032fc <LCD_intgerToString>:

void LCD_intgerToString(uint32 num)
{
    32fc:	df 93       	push	r29
    32fe:	cf 93       	push	r28
    3300:	cd b7       	in	r28, 0x3d	; 61
    3302:	de b7       	in	r29, 0x3e	; 62
    3304:	64 97       	sbiw	r28, 0x14	; 20
    3306:	0f b6       	in	r0, 0x3f	; 63
    3308:	f8 94       	cli
    330a:	de bf       	out	0x3e, r29	; 62
    330c:	0f be       	out	0x3f, r0	; 63
    330e:	cd bf       	out	0x3d, r28	; 61
    3310:	69 8b       	std	Y+17, r22	; 0x11
    3312:	7a 8b       	std	Y+18, r23	; 0x12
    3314:	8b 8b       	std	Y+19, r24	; 0x13
    3316:	9c 8b       	std	Y+20, r25	; 0x14
	uint8 buff[16];
	itoa(num, buff, 10);
    3318:	89 89       	ldd	r24, Y+17	; 0x11
    331a:	9a 89       	ldd	r25, Y+18	; 0x12
    331c:	9e 01       	movw	r18, r28
    331e:	2f 5f       	subi	r18, 0xFF	; 255
    3320:	3f 4f       	sbci	r19, 0xFF	; 255
    3322:	b9 01       	movw	r22, r18
    3324:	4a e0       	ldi	r20, 0x0A	; 10
    3326:	50 e0       	ldi	r21, 0x00	; 0
    3328:	0e 94 3b 1c 	call	0x3876	; 0x3876 <itoa>
	LCD_displayString(buff);
    332c:	ce 01       	movw	r24, r28
    332e:	01 96       	adiw	r24, 0x01	; 1
    3330:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <LCD_displayString>
}
    3334:	64 96       	adiw	r28, 0x14	; 20
    3336:	0f b6       	in	r0, 0x3f	; 63
    3338:	f8 94       	cli
    333a:	de bf       	out	0x3e, r29	; 62
    333c:	0f be       	out	0x3f, r0	; 63
    333e:	cd bf       	out	0x3d, r28	; 61
    3340:	cf 91       	pop	r28
    3342:	df 91       	pop	r29
    3344:	08 95       	ret

00003346 <TIMER1_init>:


static volatile void(*g_callBackPtr)(void) = NULL_PTR;

void TIMER1_init(const Timer1_ConfigType * Config_Ptr)
{
    3346:	df 93       	push	r29
    3348:	cf 93       	push	r28
    334a:	00 d0       	rcall	.+0      	; 0x334c <TIMER1_init+0x6>
    334c:	cd b7       	in	r28, 0x3d	; 61
    334e:	de b7       	in	r29, 0x3e	; 62
    3350:	9a 83       	std	Y+2, r25	; 0x02
    3352:	89 83       	std	Y+1, r24	; 0x01

	/* clearing TIMER1 registers */
	TCCR1A_REG.Byte = 0;
    3354:	ef e4       	ldi	r30, 0x4F	; 79
    3356:	f0 e0       	ldi	r31, 0x00	; 0
    3358:	10 82       	st	Z, r1
	TCCR1B_REG.Byte = 0;
    335a:	ee e4       	ldi	r30, 0x4E	; 78
    335c:	f0 e0       	ldi	r31, 0x00	; 0
    335e:	10 82       	st	Z, r1

	/* setting FOC1A/B as non PWM mode */
	TCCR1A_REG.Bits.FOC1A_bit = 1;
    3360:	ef e4       	ldi	r30, 0x4F	; 79
    3362:	f0 e0       	ldi	r31, 0x00	; 0
    3364:	80 81       	ld	r24, Z
    3366:	88 60       	ori	r24, 0x08	; 8
    3368:	80 83       	st	Z, r24
	TCCR1A_REG.Bits.FOC1B_bit = 1;
    336a:	ef e4       	ldi	r30, 0x4F	; 79
    336c:	f0 e0       	ldi	r31, 0x00	; 0
    336e:	80 81       	ld	r24, Z
    3370:	84 60       	ori	r24, 0x04	; 4
    3372:	80 83       	st	Z, r24


	if((Config_Ptr -> mode) == TIMER1_OVERFLOW)
    3374:	e9 81       	ldd	r30, Y+1	; 0x01
    3376:	fa 81       	ldd	r31, Y+2	; 0x02
    3378:	85 81       	ldd	r24, Z+5	; 0x05
    337a:	88 23       	and	r24, r24
    337c:	f9 f4       	brne	.+62     	; 0x33bc <TIMER1_init+0x76>
	{
		/* setting wave generation mode as overflow mode */
		TCCR1A_REG.Bits.WGM10_bit = 0;
    337e:	ef e4       	ldi	r30, 0x4F	; 79
    3380:	f0 e0       	ldi	r31, 0x00	; 0
    3382:	80 81       	ld	r24, Z
    3384:	8e 7f       	andi	r24, 0xFE	; 254
    3386:	80 83       	st	Z, r24
		TCCR1A_REG.Bits.WGM11_bit = 0;
    3388:	ef e4       	ldi	r30, 0x4F	; 79
    338a:	f0 e0       	ldi	r31, 0x00	; 0
    338c:	80 81       	ld	r24, Z
    338e:	8d 7f       	andi	r24, 0xFD	; 253
    3390:	80 83       	st	Z, r24
		TCCR1B_REG.Bits.WGM12_bit = 0;
    3392:	ee e4       	ldi	r30, 0x4E	; 78
    3394:	f0 e0       	ldi	r31, 0x00	; 0
    3396:	80 81       	ld	r24, Z
    3398:	87 7f       	andi	r24, 0xF7	; 247
    339a:	80 83       	st	Z, r24
		TCCR1B_REG.Bits.WGM13_bit = 0;
    339c:	ee e4       	ldi	r30, 0x4E	; 78
    339e:	f0 e0       	ldi	r31, 0x00	; 0
    33a0:	80 81       	ld	r24, Z
    33a2:	8f 7e       	andi	r24, 0xEF	; 239
    33a4:	80 83       	st	Z, r24

		/* enable overflow module interrupt bit */
		TIMSK_REG.Bits.TOIE1_bit = 1;
    33a6:	e9 e5       	ldi	r30, 0x59	; 89
    33a8:	f0 e0       	ldi	r31, 0x00	; 0
    33aa:	80 81       	ld	r24, Z
    33ac:	84 60       	ori	r24, 0x04	; 4
    33ae:	80 83       	st	Z, r24
		TIMSK_REG.Bits.OCIE1A_bit = 0;
    33b0:	e9 e5       	ldi	r30, 0x59	; 89
    33b2:	f0 e0       	ldi	r31, 0x00	; 0
    33b4:	80 81       	ld	r24, Z
    33b6:	8f 7e       	andi	r24, 0xEF	; 239
    33b8:	80 83       	st	Z, r24
    33ba:	1d c0       	rjmp	.+58     	; 0x33f6 <TIMER1_init+0xb0>

	}
	else if((Config_Ptr -> mode) == TIMER1_COMPARE)
    33bc:	e9 81       	ldd	r30, Y+1	; 0x01
    33be:	fa 81       	ldd	r31, Y+2	; 0x02
    33c0:	85 81       	ldd	r24, Z+5	; 0x05
    33c2:	84 30       	cpi	r24, 0x04	; 4
    33c4:	c1 f4       	brne	.+48     	; 0x33f6 <TIMER1_init+0xb0>
	{
		/* setting wave generation mode as overflow mode */
		TCCR1B_REG.Bits.WGM12_bit = 1;
    33c6:	ee e4       	ldi	r30, 0x4E	; 78
    33c8:	f0 e0       	ldi	r31, 0x00	; 0
    33ca:	80 81       	ld	r24, Z
    33cc:	88 60       	ori	r24, 0x08	; 8
    33ce:	80 83       	st	Z, r24

		/* setting the compare match value */
		OCR1A_REG.Byte = Config_Ptr -> compareValue;
    33d0:	aa e4       	ldi	r26, 0x4A	; 74
    33d2:	b0 e0       	ldi	r27, 0x00	; 0
    33d4:	e9 81       	ldd	r30, Y+1	; 0x01
    33d6:	fa 81       	ldd	r31, Y+2	; 0x02
    33d8:	82 81       	ldd	r24, Z+2	; 0x02
    33da:	93 81       	ldd	r25, Z+3	; 0x03
    33dc:	11 96       	adiw	r26, 0x01	; 1
    33de:	9c 93       	st	X, r25
    33e0:	8e 93       	st	-X, r24

		/* enable compare match module interrupt bit */
		TIMSK_REG.Bits.OCIE1A_bit = 1;
    33e2:	e9 e5       	ldi	r30, 0x59	; 89
    33e4:	f0 e0       	ldi	r31, 0x00	; 0
    33e6:	80 81       	ld	r24, Z
    33e8:	80 61       	ori	r24, 0x10	; 16
    33ea:	80 83       	st	Z, r24
		TIMSK_REG.Bits.TOIE1_bit = 0;
    33ec:	e9 e5       	ldi	r30, 0x59	; 89
    33ee:	f0 e0       	ldi	r31, 0x00	; 0
    33f0:	80 81       	ld	r24, Z
    33f2:	8b 7f       	andi	r24, 0xFB	; 251
    33f4:	80 83       	st	Z, r24


	}

	/* configuring TIMER1 prescaler */
	TCCR1B_REG.Byte = (TCCR1B_REG.Byte & 0xF8) | (Config_Ptr -> prescaler);
    33f6:	ae e4       	ldi	r26, 0x4E	; 78
    33f8:	b0 e0       	ldi	r27, 0x00	; 0
    33fa:	ee e4       	ldi	r30, 0x4E	; 78
    33fc:	f0 e0       	ldi	r31, 0x00	; 0
    33fe:	80 81       	ld	r24, Z
    3400:	98 2f       	mov	r25, r24
    3402:	98 7f       	andi	r25, 0xF8	; 248
    3404:	e9 81       	ldd	r30, Y+1	; 0x01
    3406:	fa 81       	ldd	r31, Y+2	; 0x02
    3408:	84 81       	ldd	r24, Z+4	; 0x04
    340a:	89 2b       	or	r24, r25
    340c:	8c 93       	st	X, r24

	/* setting timer counter initial value */
	TCNT1_REG.Byte = Config_Ptr -> initialValue;
    340e:	ac e4       	ldi	r26, 0x4C	; 76
    3410:	b0 e0       	ldi	r27, 0x00	; 0
    3412:	e9 81       	ldd	r30, Y+1	; 0x01
    3414:	fa 81       	ldd	r31, Y+2	; 0x02
    3416:	80 81       	ld	r24, Z
    3418:	91 81       	ldd	r25, Z+1	; 0x01
    341a:	11 96       	adiw	r26, 0x01	; 1
    341c:	9c 93       	st	X, r25
    341e:	8e 93       	st	-X, r24

}
    3420:	0f 90       	pop	r0
    3422:	0f 90       	pop	r0
    3424:	cf 91       	pop	r28
    3426:	df 91       	pop	r29
    3428:	08 95       	ret

0000342a <TIMER1_deInit>:

void TIMER1_deInit(void)
{
    342a:	df 93       	push	r29
    342c:	cf 93       	push	r28
    342e:	cd b7       	in	r28, 0x3d	; 61
    3430:	de b7       	in	r29, 0x3e	; 62
	/* clearing all TIMER1 registers and bits */
	TCCR1A_REG.Byte = 0;
    3432:	ef e4       	ldi	r30, 0x4F	; 79
    3434:	f0 e0       	ldi	r31, 0x00	; 0
    3436:	10 82       	st	Z, r1
	TCCR1B_REG.Byte = 0;
    3438:	ee e4       	ldi	r30, 0x4E	; 78
    343a:	f0 e0       	ldi	r31, 0x00	; 0
    343c:	10 82       	st	Z, r1
	TIMSK_REG.Bits.TOIE1_bit = 0;
    343e:	e9 e5       	ldi	r30, 0x59	; 89
    3440:	f0 e0       	ldi	r31, 0x00	; 0
    3442:	80 81       	ld	r24, Z
    3444:	8b 7f       	andi	r24, 0xFB	; 251
    3446:	80 83       	st	Z, r24
	TIMSK_REG.Bits.OCIE1A_bit = 0;
    3448:	e9 e5       	ldi	r30, 0x59	; 89
    344a:	f0 e0       	ldi	r31, 0x00	; 0
    344c:	80 81       	ld	r24, Z
    344e:	8f 7e       	andi	r24, 0xEF	; 239
    3450:	80 83       	st	Z, r24
	TCNT1_REG.Byte = 0;
    3452:	ec e4       	ldi	r30, 0x4C	; 76
    3454:	f0 e0       	ldi	r31, 0x00	; 0
    3456:	11 82       	std	Z+1, r1	; 0x01
    3458:	10 82       	st	Z, r1
	OCR1A_REG.Byte = 0;
    345a:	ea e4       	ldi	r30, 0x4A	; 74
    345c:	f0 e0       	ldi	r31, 0x00	; 0
    345e:	11 82       	std	Z+1, r1	; 0x01
    3460:	10 82       	st	Z, r1

	/* resetting pointer to point to NULL */
	g_callBackPtr = NULL_PTR;
    3462:	10 92 0a 01 	sts	0x010A, r1
    3466:	10 92 09 01 	sts	0x0109, r1
}
    346a:	cf 91       	pop	r28
    346c:	df 91       	pop	r29
    346e:	08 95       	ret

00003470 <TIMER1_setCallBack>:

void TIMER1_setCallBack(void(*a_ptr)(void))
{
    3470:	df 93       	push	r29
    3472:	cf 93       	push	r28
    3474:	00 d0       	rcall	.+0      	; 0x3476 <TIMER1_setCallBack+0x6>
    3476:	cd b7       	in	r28, 0x3d	; 61
    3478:	de b7       	in	r29, 0x3e	; 62
    347a:	9a 83       	std	Y+2, r25	; 0x02
    347c:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;	/* saving address of call back function */
    347e:	89 81       	ldd	r24, Y+1	; 0x01
    3480:	9a 81       	ldd	r25, Y+2	; 0x02
    3482:	90 93 0a 01 	sts	0x010A, r25
    3486:	80 93 09 01 	sts	0x0109, r24
}
    348a:	0f 90       	pop	r0
    348c:	0f 90       	pop	r0
    348e:	cf 91       	pop	r28
    3490:	df 91       	pop	r29
    3492:	08 95       	ret

00003494 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    3494:	1f 92       	push	r1
    3496:	0f 92       	push	r0
    3498:	0f b6       	in	r0, 0x3f	; 63
    349a:	0f 92       	push	r0
    349c:	11 24       	eor	r1, r1
    349e:	2f 93       	push	r18
    34a0:	3f 93       	push	r19
    34a2:	4f 93       	push	r20
    34a4:	5f 93       	push	r21
    34a6:	6f 93       	push	r22
    34a8:	7f 93       	push	r23
    34aa:	8f 93       	push	r24
    34ac:	9f 93       	push	r25
    34ae:	af 93       	push	r26
    34b0:	bf 93       	push	r27
    34b2:	ef 93       	push	r30
    34b4:	ff 93       	push	r31
    34b6:	df 93       	push	r29
    34b8:	cf 93       	push	r28
    34ba:	cd b7       	in	r28, 0x3d	; 61
    34bc:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    34be:	80 91 09 01 	lds	r24, 0x0109
    34c2:	90 91 0a 01 	lds	r25, 0x010A
    34c6:	00 97       	sbiw	r24, 0x00	; 0
    34c8:	29 f0       	breq	.+10     	; 0x34d4 <__vector_9+0x40>
	{
		(*g_callBackPtr)();		/* calling call back function */
    34ca:	e0 91 09 01 	lds	r30, 0x0109
    34ce:	f0 91 0a 01 	lds	r31, 0x010A
    34d2:	09 95       	icall
	}
}
    34d4:	cf 91       	pop	r28
    34d6:	df 91       	pop	r29
    34d8:	ff 91       	pop	r31
    34da:	ef 91       	pop	r30
    34dc:	bf 91       	pop	r27
    34de:	af 91       	pop	r26
    34e0:	9f 91       	pop	r25
    34e2:	8f 91       	pop	r24
    34e4:	7f 91       	pop	r23
    34e6:	6f 91       	pop	r22
    34e8:	5f 91       	pop	r21
    34ea:	4f 91       	pop	r20
    34ec:	3f 91       	pop	r19
    34ee:	2f 91       	pop	r18
    34f0:	0f 90       	pop	r0
    34f2:	0f be       	out	0x3f, r0	; 63
    34f4:	0f 90       	pop	r0
    34f6:	1f 90       	pop	r1
    34f8:	18 95       	reti

000034fa <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    34fa:	1f 92       	push	r1
    34fc:	0f 92       	push	r0
    34fe:	0f b6       	in	r0, 0x3f	; 63
    3500:	0f 92       	push	r0
    3502:	11 24       	eor	r1, r1
    3504:	2f 93       	push	r18
    3506:	3f 93       	push	r19
    3508:	4f 93       	push	r20
    350a:	5f 93       	push	r21
    350c:	6f 93       	push	r22
    350e:	7f 93       	push	r23
    3510:	8f 93       	push	r24
    3512:	9f 93       	push	r25
    3514:	af 93       	push	r26
    3516:	bf 93       	push	r27
    3518:	ef 93       	push	r30
    351a:	ff 93       	push	r31
    351c:	df 93       	push	r29
    351e:	cf 93       	push	r28
    3520:	cd b7       	in	r28, 0x3d	; 61
    3522:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    3524:	80 91 09 01 	lds	r24, 0x0109
    3528:	90 91 0a 01 	lds	r25, 0x010A
    352c:	00 97       	sbiw	r24, 0x00	; 0
    352e:	29 f0       	breq	.+10     	; 0x353a <__vector_7+0x40>
	{
		(*g_callBackPtr)();		/* calling call back function */
    3530:	e0 91 09 01 	lds	r30, 0x0109
    3534:	f0 91 0a 01 	lds	r31, 0x010A
    3538:	09 95       	icall
	}
}
    353a:	cf 91       	pop	r28
    353c:	df 91       	pop	r29
    353e:	ff 91       	pop	r31
    3540:	ef 91       	pop	r30
    3542:	bf 91       	pop	r27
    3544:	af 91       	pop	r26
    3546:	9f 91       	pop	r25
    3548:	8f 91       	pop	r24
    354a:	7f 91       	pop	r23
    354c:	6f 91       	pop	r22
    354e:	5f 91       	pop	r21
    3550:	4f 91       	pop	r20
    3552:	3f 91       	pop	r19
    3554:	2f 91       	pop	r18
    3556:	0f 90       	pop	r0
    3558:	0f be       	out	0x3f, r0	; 63
    355a:	0f 90       	pop	r0
    355c:	1f 90       	pop	r1
    355e:	18 95       	reti

00003560 <UART_init>:
#include "uart.h"
#include "avr_registers.h"


void UART_init(UART_CONFIG_TYPE* config)
{
    3560:	df 93       	push	r29
    3562:	cf 93       	push	r28
    3564:	00 d0       	rcall	.+0      	; 0x3566 <UART_init+0x6>
    3566:	00 d0       	rcall	.+0      	; 0x3568 <UART_init+0x8>
    3568:	cd b7       	in	r28, 0x3d	; 61
    356a:	de b7       	in	r29, 0x3e	; 62
    356c:	9c 83       	std	Y+4, r25	; 0x04
    356e:	8b 83       	std	Y+3, r24	; 0x03

	uint16 ubrr_value = 0;			/* variable to calculate UBRR value from baud rate */
    3570:	1a 82       	std	Y+2, r1	; 0x02
    3572:	19 82       	std	Y+1, r1	; 0x01

	UCSRA_REG.Byte = 0; 			/* clearing register at first */
    3574:	eb e2       	ldi	r30, 0x2B	; 43
    3576:	f0 e0       	ldi	r31, 0x00	; 0
    3578:	10 82       	st	Z, r1

	UCSRA_REG.Bits.U2X_bit = 1;		/* enabling double USART transmission speed */
    357a:	eb e2       	ldi	r30, 0x2B	; 43
    357c:	f0 e0       	ldi	r31, 0x00	; 0
    357e:	80 81       	ld	r24, Z
    3580:	82 60       	ori	r24, 0x02	; 2
    3582:	80 83       	st	Z, r24

	UCSRB_REG.Byte = 0;				/* clearing register at first */
    3584:	ea e2       	ldi	r30, 0x2A	; 42
    3586:	f0 e0       	ldi	r31, 0x00	; 0
    3588:	10 82       	st	Z, r1

	UCSRB_REG.Bits.RXEN_bit = 1;	/* Receiver Enable */
    358a:	ea e2       	ldi	r30, 0x2A	; 42
    358c:	f0 e0       	ldi	r31, 0x00	; 0
    358e:	80 81       	ld	r24, Z
    3590:	80 61       	ori	r24, 0x10	; 16
    3592:	80 83       	st	Z, r24
	UCSRB_REG.Bits.TXEN_bit = 1;	/* Transmitter Enable */
    3594:	ea e2       	ldi	r30, 0x2A	; 42
    3596:	f0 e0       	ldi	r31, 0x00	; 0
    3598:	80 81       	ld	r24, Z
    359a:	88 60       	ori	r24, 0x08	; 8
    359c:	80 83       	st	Z, r24


	/* setting UCSZ2 Bit if char size = 9 */
	if(config -> charSize == _9BIT)
    359e:	eb 81       	ldd	r30, Y+3	; 0x03
    35a0:	fc 81       	ldd	r31, Y+4	; 0x04
    35a2:	82 81       	ldd	r24, Z+2	; 0x02
    35a4:	87 30       	cpi	r24, 0x07	; 7
    35a6:	51 f4       	brne	.+20     	; 0x35bc <UART_init+0x5c>
	{
		UCSRB_REG.Bits.UCSZ2_bit = 1;
    35a8:	ea e2       	ldi	r30, 0x2A	; 42
    35aa:	f0 e0       	ldi	r31, 0x00	; 0
    35ac:	80 81       	ld	r24, Z
    35ae:	84 60       	ori	r24, 0x04	; 4
    35b0:	80 83       	st	Z, r24
		config -> charSize = 3;
    35b2:	eb 81       	ldd	r30, Y+3	; 0x03
    35b4:	fc 81       	ldd	r31, Y+4	; 0x04
    35b6:	83 e0       	ldi	r24, 0x03	; 3
    35b8:	82 83       	std	Z+2, r24	; 0x02
    35ba:	05 c0       	rjmp	.+10     	; 0x35c6 <UART_init+0x66>
	}
	else
	{
		UCSRB_REG.Bits.UCSZ2_bit = 0;
    35bc:	ea e2       	ldi	r30, 0x2A	; 42
    35be:	f0 e0       	ldi	r31, 0x00	; 0
    35c0:	80 81       	ld	r24, Z
    35c2:	8b 7f       	andi	r24, 0xFB	; 251
    35c4:	80 83       	st	Z, r24
	}


	/* setting URSEL bit to write in UCSRC register */
	/* clearing register at first */
	UCSRC_REG.Byte = 0;
    35c6:	e0 e4       	ldi	r30, 0x40	; 64
    35c8:	f0 e0       	ldi	r31, 0x00	; 0
    35ca:	10 82       	st	Z, r1

	/* configuring stop bit (1 bit or 2 bits) */
	UCSRC_REG.Bits.USBS_bit = config -> stopBit;
    35cc:	a0 e4       	ldi	r26, 0x40	; 64
    35ce:	b0 e0       	ldi	r27, 0x00	; 0
    35d0:	eb 81       	ldd	r30, Y+3	; 0x03
    35d2:	fc 81       	ldd	r31, Y+4	; 0x04
    35d4:	81 81       	ldd	r24, Z+1	; 0x01
    35d6:	81 70       	andi	r24, 0x01	; 1
    35d8:	81 70       	andi	r24, 0x01	; 1
    35da:	98 2f       	mov	r25, r24
    35dc:	99 0f       	add	r25, r25
    35de:	99 0f       	add	r25, r25
    35e0:	99 0f       	add	r25, r25
    35e2:	8c 91       	ld	r24, X
    35e4:	87 7f       	andi	r24, 0xF7	; 247
    35e6:	89 2b       	or	r24, r25
    35e8:	8c 93       	st	X, r24

	/* configuring parity */
	UCSRC_REG.Byte = (UCSRC_REG.Byte & 0b11001111) | ((config -> parity) << 4);
    35ea:	a0 e4       	ldi	r26, 0x40	; 64
    35ec:	b0 e0       	ldi	r27, 0x00	; 0
    35ee:	e0 e4       	ldi	r30, 0x40	; 64
    35f0:	f0 e0       	ldi	r31, 0x00	; 0
    35f2:	80 81       	ld	r24, Z
    35f4:	28 2f       	mov	r18, r24
    35f6:	2f 7c       	andi	r18, 0xCF	; 207
    35f8:	eb 81       	ldd	r30, Y+3	; 0x03
    35fa:	fc 81       	ldd	r31, Y+4	; 0x04
    35fc:	80 81       	ld	r24, Z
    35fe:	88 2f       	mov	r24, r24
    3600:	90 e0       	ldi	r25, 0x00	; 0
    3602:	82 95       	swap	r24
    3604:	92 95       	swap	r25
    3606:	90 7f       	andi	r25, 0xF0	; 240
    3608:	98 27       	eor	r25, r24
    360a:	80 7f       	andi	r24, 0xF0	; 240
    360c:	98 27       	eor	r25, r24
    360e:	82 2b       	or	r24, r18
    3610:	8c 93       	st	X, r24

	/* configuring char size */
	UCSRC_REG.Byte = (UCSRC_REG.Byte & 0b11111001) | ((config -> charSize) << 1);
    3612:	a0 e4       	ldi	r26, 0x40	; 64
    3614:	b0 e0       	ldi	r27, 0x00	; 0
    3616:	e0 e4       	ldi	r30, 0x40	; 64
    3618:	f0 e0       	ldi	r31, 0x00	; 0
    361a:	80 81       	ld	r24, Z
    361c:	28 2f       	mov	r18, r24
    361e:	29 7f       	andi	r18, 0xF9	; 249
    3620:	eb 81       	ldd	r30, Y+3	; 0x03
    3622:	fc 81       	ldd	r31, Y+4	; 0x04
    3624:	82 81       	ldd	r24, Z+2	; 0x02
    3626:	88 2f       	mov	r24, r24
    3628:	90 e0       	ldi	r25, 0x00	; 0
    362a:	88 0f       	add	r24, r24
    362c:	99 1f       	adc	r25, r25
    362e:	82 2b       	or	r24, r18
    3630:	8c 93       	st	X, r24

	/* calculating UBRR value */
	ubrr_value = (uint16)(((F_CPU / ((config -> baudRate) * 8UL))) - 1);
    3632:	eb 81       	ldd	r30, Y+3	; 0x03
    3634:	fc 81       	ldd	r31, Y+4	; 0x04
    3636:	83 81       	ldd	r24, Z+3	; 0x03
    3638:	94 81       	ldd	r25, Z+4	; 0x04
    363a:	a5 81       	ldd	r26, Z+5	; 0x05
    363c:	b6 81       	ldd	r27, Z+6	; 0x06
    363e:	88 0f       	add	r24, r24
    3640:	99 1f       	adc	r25, r25
    3642:	aa 1f       	adc	r26, r26
    3644:	bb 1f       	adc	r27, r27
    3646:	88 0f       	add	r24, r24
    3648:	99 1f       	adc	r25, r25
    364a:	aa 1f       	adc	r26, r26
    364c:	bb 1f       	adc	r27, r27
    364e:	88 0f       	add	r24, r24
    3650:	99 1f       	adc	r25, r25
    3652:	aa 1f       	adc	r26, r26
    3654:	bb 1f       	adc	r27, r27
    3656:	9c 01       	movw	r18, r24
    3658:	ad 01       	movw	r20, r26
    365a:	80 e0       	ldi	r24, 0x00	; 0
    365c:	92 e1       	ldi	r25, 0x12	; 18
    365e:	aa e7       	ldi	r26, 0x7A	; 122
    3660:	b0 e0       	ldi	r27, 0x00	; 0
    3662:	bc 01       	movw	r22, r24
    3664:	cd 01       	movw	r24, r26
    3666:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <__udivmodsi4>
    366a:	da 01       	movw	r26, r20
    366c:	c9 01       	movw	r24, r18
    366e:	01 97       	sbiw	r24, 0x01	; 1
    3670:	9a 83       	std	Y+2, r25	; 0x02
    3672:	89 83       	std	Y+1, r24	; 0x01


	/* configuring baud rate */
	UBRRH_REG.Bits.UBRRH_bits = ubrr_value >> 8;
    3674:	e0 e4       	ldi	r30, 0x40	; 64
    3676:	f0 e0       	ldi	r31, 0x00	; 0
    3678:	89 81       	ldd	r24, Y+1	; 0x01
    367a:	9a 81       	ldd	r25, Y+2	; 0x02
    367c:	89 2f       	mov	r24, r25
    367e:	99 27       	eor	r25, r25
    3680:	8f 70       	andi	r24, 0x0F	; 15
    3682:	98 2f       	mov	r25, r24
    3684:	9f 70       	andi	r25, 0x0F	; 15
    3686:	80 81       	ld	r24, Z
    3688:	80 7f       	andi	r24, 0xF0	; 240
    368a:	89 2b       	or	r24, r25
    368c:	80 83       	st	Z, r24
	UBRRL_REG.Byte = ubrr_value;
    368e:	e9 e2       	ldi	r30, 0x29	; 41
    3690:	f0 e0       	ldi	r31, 0x00	; 0
    3692:	89 81       	ldd	r24, Y+1	; 0x01
    3694:	80 83       	st	Z, r24


}
    3696:	0f 90       	pop	r0
    3698:	0f 90       	pop	r0
    369a:	0f 90       	pop	r0
    369c:	0f 90       	pop	r0
    369e:	cf 91       	pop	r28
    36a0:	df 91       	pop	r29
    36a2:	08 95       	ret

000036a4 <UART_sendByte>:

void UART_sendByte(uint8 byte)
{
    36a4:	df 93       	push	r29
    36a6:	cf 93       	push	r28
    36a8:	0f 92       	push	r0
    36aa:	cd b7       	in	r28, 0x3d	; 61
    36ac:	de b7       	in	r29, 0x3e	; 62
    36ae:	89 83       	std	Y+1, r24	; 0x01
	/* waiting for empty UDR flag */
	while(UCSRA_REG.Bits.UDRE_bit == 0);
    36b0:	eb e2       	ldi	r30, 0x2B	; 43
    36b2:	f0 e0       	ldi	r31, 0x00	; 0
    36b4:	80 81       	ld	r24, Z
    36b6:	80 72       	andi	r24, 0x20	; 32
    36b8:	88 23       	and	r24, r24
    36ba:	d1 f3       	breq	.-12     	; 0x36b0 <UART_sendByte+0xc>

	UDR_REG.Byte = byte;	/* sending byte */
    36bc:	ec e2       	ldi	r30, 0x2C	; 44
    36be:	f0 e0       	ldi	r31, 0x00	; 0
    36c0:	89 81       	ldd	r24, Y+1	; 0x01
    36c2:	80 83       	st	Z, r24
}
    36c4:	0f 90       	pop	r0
    36c6:	cf 91       	pop	r28
    36c8:	df 91       	pop	r29
    36ca:	08 95       	ret

000036cc <UART_sendString>:

void UART_sendString(const uint8 *string)
{
    36cc:	df 93       	push	r29
    36ce:	cf 93       	push	r28
    36d0:	00 d0       	rcall	.+0      	; 0x36d2 <UART_sendString+0x6>
    36d2:	0f 92       	push	r0
    36d4:	cd b7       	in	r28, 0x3d	; 61
    36d6:	de b7       	in	r29, 0x3e	; 62
    36d8:	9b 83       	std	Y+3, r25	; 0x03
    36da:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;	/* counter variable */
    36dc:	19 82       	std	Y+1, r1	; 0x01
    36de:	0e c0       	rjmp	.+28     	; 0x36fc <UART_sendString+0x30>

	while(string[i] != '\0')
	{
		UART_sendByte(string[i]);	/* sending byte */
    36e0:	89 81       	ldd	r24, Y+1	; 0x01
    36e2:	28 2f       	mov	r18, r24
    36e4:	30 e0       	ldi	r19, 0x00	; 0
    36e6:	8a 81       	ldd	r24, Y+2	; 0x02
    36e8:	9b 81       	ldd	r25, Y+3	; 0x03
    36ea:	fc 01       	movw	r30, r24
    36ec:	e2 0f       	add	r30, r18
    36ee:	f3 1f       	adc	r31, r19
    36f0:	80 81       	ld	r24, Z
    36f2:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <UART_sendByte>
		i++;	/* increamenting counter */
    36f6:	89 81       	ldd	r24, Y+1	; 0x01
    36f8:	8f 5f       	subi	r24, 0xFF	; 255
    36fa:	89 83       	std	Y+1, r24	; 0x01

void UART_sendString(const uint8 *string)
{
	uint8 i = 0;	/* counter variable */

	while(string[i] != '\0')
    36fc:	89 81       	ldd	r24, Y+1	; 0x01
    36fe:	28 2f       	mov	r18, r24
    3700:	30 e0       	ldi	r19, 0x00	; 0
    3702:	8a 81       	ldd	r24, Y+2	; 0x02
    3704:	9b 81       	ldd	r25, Y+3	; 0x03
    3706:	fc 01       	movw	r30, r24
    3708:	e2 0f       	add	r30, r18
    370a:	f3 1f       	adc	r31, r19
    370c:	80 81       	ld	r24, Z
    370e:	88 23       	and	r24, r24
    3710:	39 f7       	brne	.-50     	; 0x36e0 <UART_sendString+0x14>
	{
		UART_sendByte(string[i]);	/* sending byte */
		i++;	/* increamenting counter */
	}
}
    3712:	0f 90       	pop	r0
    3714:	0f 90       	pop	r0
    3716:	0f 90       	pop	r0
    3718:	cf 91       	pop	r28
    371a:	df 91       	pop	r29
    371c:	08 95       	ret

0000371e <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    371e:	df 93       	push	r29
    3720:	cf 93       	push	r28
    3722:	cd b7       	in	r28, 0x3d	; 61
    3724:	de b7       	in	r29, 0x3e	; 62
	/* waiting for recieving complete flag */
	while(UCSRA_REG.Bits.RXC_bit == 0);
    3726:	eb e2       	ldi	r30, 0x2B	; 43
    3728:	f0 e0       	ldi	r31, 0x00	; 0
    372a:	80 81       	ld	r24, Z
    372c:	80 78       	andi	r24, 0x80	; 128
    372e:	88 23       	and	r24, r24
    3730:	d1 f3       	breq	.-12     	; 0x3726 <UART_recieveByte+0x8>

	/* returning recieved byte */
	return UDR_REG.Byte;
    3732:	ec e2       	ldi	r30, 0x2C	; 44
    3734:	f0 e0       	ldi	r31, 0x00	; 0
    3736:	80 81       	ld	r24, Z
}
    3738:	cf 91       	pop	r28
    373a:	df 91       	pop	r29
    373c:	08 95       	ret

0000373e <UART_recieveString>:

void UART_recieveString(uint8 *string)
{
    373e:	0f 93       	push	r16
    3740:	1f 93       	push	r17
    3742:	df 93       	push	r29
    3744:	cf 93       	push	r28
    3746:	00 d0       	rcall	.+0      	; 0x3748 <UART_recieveString+0xa>
    3748:	0f 92       	push	r0
    374a:	cd b7       	in	r28, 0x3d	; 61
    374c:	de b7       	in	r29, 0x3e	; 62
    374e:	9b 83       	std	Y+3, r25	; 0x03
    3750:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;	/* counter variable */
    3752:	19 82       	std	Y+1, r1	; 0x01

	string[i] = UART_recieveByte();
    3754:	89 81       	ldd	r24, Y+1	; 0x01
    3756:	28 2f       	mov	r18, r24
    3758:	30 e0       	ldi	r19, 0x00	; 0
    375a:	8a 81       	ldd	r24, Y+2	; 0x02
    375c:	9b 81       	ldd	r25, Y+3	; 0x03
    375e:	8c 01       	movw	r16, r24
    3760:	02 0f       	add	r16, r18
    3762:	13 1f       	adc	r17, r19
    3764:	0e 94 8f 1b 	call	0x371e	; 0x371e <UART_recieveByte>
    3768:	f8 01       	movw	r30, r16
    376a:	80 83       	st	Z, r24
    376c:	0f c0       	rjmp	.+30     	; 0x378c <UART_recieveString+0x4e>

	while(string[i] != UART_SYMBOL_OF_STRING)
	{
		i++;
    376e:	89 81       	ldd	r24, Y+1	; 0x01
    3770:	8f 5f       	subi	r24, 0xFF	; 255
    3772:	89 83       	std	Y+1, r24	; 0x01

		/* recieving string character by character */
		string[i] = UART_recieveByte();
    3774:	89 81       	ldd	r24, Y+1	; 0x01
    3776:	28 2f       	mov	r18, r24
    3778:	30 e0       	ldi	r19, 0x00	; 0
    377a:	8a 81       	ldd	r24, Y+2	; 0x02
    377c:	9b 81       	ldd	r25, Y+3	; 0x03
    377e:	8c 01       	movw	r16, r24
    3780:	02 0f       	add	r16, r18
    3782:	13 1f       	adc	r17, r19
    3784:	0e 94 8f 1b 	call	0x371e	; 0x371e <UART_recieveByte>
    3788:	f8 01       	movw	r30, r16
    378a:	80 83       	st	Z, r24
{
	uint8 i = 0;	/* counter variable */

	string[i] = UART_recieveByte();

	while(string[i] != UART_SYMBOL_OF_STRING)
    378c:	89 81       	ldd	r24, Y+1	; 0x01
    378e:	28 2f       	mov	r18, r24
    3790:	30 e0       	ldi	r19, 0x00	; 0
    3792:	8a 81       	ldd	r24, Y+2	; 0x02
    3794:	9b 81       	ldd	r25, Y+3	; 0x03
    3796:	fc 01       	movw	r30, r24
    3798:	e2 0f       	add	r30, r18
    379a:	f3 1f       	adc	r31, r19
    379c:	80 81       	ld	r24, Z
    379e:	83 32       	cpi	r24, 0x23	; 35
    37a0:	31 f7       	brne	.-52     	; 0x376e <UART_recieveString+0x30>

		/* recieving string character by character */
		string[i] = UART_recieveByte();
	}

	string[i] = '\0'; /* replacing end character symbol by null */
    37a2:	89 81       	ldd	r24, Y+1	; 0x01
    37a4:	28 2f       	mov	r18, r24
    37a6:	30 e0       	ldi	r19, 0x00	; 0
    37a8:	8a 81       	ldd	r24, Y+2	; 0x02
    37aa:	9b 81       	ldd	r25, Y+3	; 0x03
    37ac:	fc 01       	movw	r30, r24
    37ae:	e2 0f       	add	r30, r18
    37b0:	f3 1f       	adc	r31, r19
    37b2:	10 82       	st	Z, r1
}
    37b4:	0f 90       	pop	r0
    37b6:	0f 90       	pop	r0
    37b8:	0f 90       	pop	r0
    37ba:	cf 91       	pop	r28
    37bc:	df 91       	pop	r29
    37be:	1f 91       	pop	r17
    37c0:	0f 91       	pop	r16
    37c2:	08 95       	ret

000037c4 <__udivmodsi4>:
    37c4:	a1 e2       	ldi	r26, 0x21	; 33
    37c6:	1a 2e       	mov	r1, r26
    37c8:	aa 1b       	sub	r26, r26
    37ca:	bb 1b       	sub	r27, r27
    37cc:	fd 01       	movw	r30, r26
    37ce:	0d c0       	rjmp	.+26     	; 0x37ea <__udivmodsi4_ep>

000037d0 <__udivmodsi4_loop>:
    37d0:	aa 1f       	adc	r26, r26
    37d2:	bb 1f       	adc	r27, r27
    37d4:	ee 1f       	adc	r30, r30
    37d6:	ff 1f       	adc	r31, r31
    37d8:	a2 17       	cp	r26, r18
    37da:	b3 07       	cpc	r27, r19
    37dc:	e4 07       	cpc	r30, r20
    37de:	f5 07       	cpc	r31, r21
    37e0:	20 f0       	brcs	.+8      	; 0x37ea <__udivmodsi4_ep>
    37e2:	a2 1b       	sub	r26, r18
    37e4:	b3 0b       	sbc	r27, r19
    37e6:	e4 0b       	sbc	r30, r20
    37e8:	f5 0b       	sbc	r31, r21

000037ea <__udivmodsi4_ep>:
    37ea:	66 1f       	adc	r22, r22
    37ec:	77 1f       	adc	r23, r23
    37ee:	88 1f       	adc	r24, r24
    37f0:	99 1f       	adc	r25, r25
    37f2:	1a 94       	dec	r1
    37f4:	69 f7       	brne	.-38     	; 0x37d0 <__udivmodsi4_loop>
    37f6:	60 95       	com	r22
    37f8:	70 95       	com	r23
    37fa:	80 95       	com	r24
    37fc:	90 95       	com	r25
    37fe:	9b 01       	movw	r18, r22
    3800:	ac 01       	movw	r20, r24
    3802:	bd 01       	movw	r22, r26
    3804:	cf 01       	movw	r24, r30
    3806:	08 95       	ret

00003808 <__prologue_saves__>:
    3808:	2f 92       	push	r2
    380a:	3f 92       	push	r3
    380c:	4f 92       	push	r4
    380e:	5f 92       	push	r5
    3810:	6f 92       	push	r6
    3812:	7f 92       	push	r7
    3814:	8f 92       	push	r8
    3816:	9f 92       	push	r9
    3818:	af 92       	push	r10
    381a:	bf 92       	push	r11
    381c:	cf 92       	push	r12
    381e:	df 92       	push	r13
    3820:	ef 92       	push	r14
    3822:	ff 92       	push	r15
    3824:	0f 93       	push	r16
    3826:	1f 93       	push	r17
    3828:	cf 93       	push	r28
    382a:	df 93       	push	r29
    382c:	cd b7       	in	r28, 0x3d	; 61
    382e:	de b7       	in	r29, 0x3e	; 62
    3830:	ca 1b       	sub	r28, r26
    3832:	db 0b       	sbc	r29, r27
    3834:	0f b6       	in	r0, 0x3f	; 63
    3836:	f8 94       	cli
    3838:	de bf       	out	0x3e, r29	; 62
    383a:	0f be       	out	0x3f, r0	; 63
    383c:	cd bf       	out	0x3d, r28	; 61
    383e:	09 94       	ijmp

00003840 <__epilogue_restores__>:
    3840:	2a 88       	ldd	r2, Y+18	; 0x12
    3842:	39 88       	ldd	r3, Y+17	; 0x11
    3844:	48 88       	ldd	r4, Y+16	; 0x10
    3846:	5f 84       	ldd	r5, Y+15	; 0x0f
    3848:	6e 84       	ldd	r6, Y+14	; 0x0e
    384a:	7d 84       	ldd	r7, Y+13	; 0x0d
    384c:	8c 84       	ldd	r8, Y+12	; 0x0c
    384e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3850:	aa 84       	ldd	r10, Y+10	; 0x0a
    3852:	b9 84       	ldd	r11, Y+9	; 0x09
    3854:	c8 84       	ldd	r12, Y+8	; 0x08
    3856:	df 80       	ldd	r13, Y+7	; 0x07
    3858:	ee 80       	ldd	r14, Y+6	; 0x06
    385a:	fd 80       	ldd	r15, Y+5	; 0x05
    385c:	0c 81       	ldd	r16, Y+4	; 0x04
    385e:	1b 81       	ldd	r17, Y+3	; 0x03
    3860:	aa 81       	ldd	r26, Y+2	; 0x02
    3862:	b9 81       	ldd	r27, Y+1	; 0x01
    3864:	ce 0f       	add	r28, r30
    3866:	d1 1d       	adc	r29, r1
    3868:	0f b6       	in	r0, 0x3f	; 63
    386a:	f8 94       	cli
    386c:	de bf       	out	0x3e, r29	; 62
    386e:	0f be       	out	0x3f, r0	; 63
    3870:	cd bf       	out	0x3d, r28	; 61
    3872:	ed 01       	movw	r28, r26
    3874:	08 95       	ret

00003876 <itoa>:
    3876:	fb 01       	movw	r30, r22
    3878:	9f 01       	movw	r18, r30
    387a:	e8 94       	clt
    387c:	42 30       	cpi	r20, 0x02	; 2
    387e:	c4 f0       	brlt	.+48     	; 0x38b0 <itoa+0x3a>
    3880:	45 32       	cpi	r20, 0x25	; 37
    3882:	b4 f4       	brge	.+44     	; 0x38b0 <itoa+0x3a>
    3884:	4a 30       	cpi	r20, 0x0A	; 10
    3886:	29 f4       	brne	.+10     	; 0x3892 <itoa+0x1c>
    3888:	97 fb       	bst	r25, 7
    388a:	1e f4       	brtc	.+6      	; 0x3892 <itoa+0x1c>
    388c:	90 95       	com	r25
    388e:	81 95       	neg	r24
    3890:	9f 4f       	sbci	r25, 0xFF	; 255
    3892:	64 2f       	mov	r22, r20
    3894:	77 27       	eor	r23, r23
    3896:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__udivmodhi4>
    389a:	80 5d       	subi	r24, 0xD0	; 208
    389c:	8a 33       	cpi	r24, 0x3A	; 58
    389e:	0c f0       	brlt	.+2      	; 0x38a2 <itoa+0x2c>
    38a0:	89 5d       	subi	r24, 0xD9	; 217
    38a2:	81 93       	st	Z+, r24
    38a4:	cb 01       	movw	r24, r22
    38a6:	00 97       	sbiw	r24, 0x00	; 0
    38a8:	a1 f7       	brne	.-24     	; 0x3892 <itoa+0x1c>
    38aa:	16 f4       	brtc	.+4      	; 0x38b0 <itoa+0x3a>
    38ac:	5d e2       	ldi	r21, 0x2D	; 45
    38ae:	51 93       	st	Z+, r21
    38b0:	10 82       	st	Z, r1
    38b2:	c9 01       	movw	r24, r18
    38b4:	0c 94 5c 1c 	jmp	0x38b8	; 0x38b8 <strrev>

000038b8 <strrev>:
    38b8:	dc 01       	movw	r26, r24
    38ba:	fc 01       	movw	r30, r24
    38bc:	67 2f       	mov	r22, r23
    38be:	71 91       	ld	r23, Z+
    38c0:	77 23       	and	r23, r23
    38c2:	e1 f7       	brne	.-8      	; 0x38bc <strrev+0x4>
    38c4:	32 97       	sbiw	r30, 0x02	; 2
    38c6:	04 c0       	rjmp	.+8      	; 0x38d0 <strrev+0x18>
    38c8:	7c 91       	ld	r23, X
    38ca:	6d 93       	st	X+, r22
    38cc:	70 83       	st	Z, r23
    38ce:	62 91       	ld	r22, -Z
    38d0:	ae 17       	cp	r26, r30
    38d2:	bf 07       	cpc	r27, r31
    38d4:	c8 f3       	brcs	.-14     	; 0x38c8 <strrev+0x10>
    38d6:	08 95       	ret

000038d8 <__udivmodhi4>:
    38d8:	aa 1b       	sub	r26, r26
    38da:	bb 1b       	sub	r27, r27
    38dc:	51 e1       	ldi	r21, 0x11	; 17
    38de:	07 c0       	rjmp	.+14     	; 0x38ee <__udivmodhi4_ep>

000038e0 <__udivmodhi4_loop>:
    38e0:	aa 1f       	adc	r26, r26
    38e2:	bb 1f       	adc	r27, r27
    38e4:	a6 17       	cp	r26, r22
    38e6:	b7 07       	cpc	r27, r23
    38e8:	10 f0       	brcs	.+4      	; 0x38ee <__udivmodhi4_ep>
    38ea:	a6 1b       	sub	r26, r22
    38ec:	b7 0b       	sbc	r27, r23

000038ee <__udivmodhi4_ep>:
    38ee:	88 1f       	adc	r24, r24
    38f0:	99 1f       	adc	r25, r25
    38f2:	5a 95       	dec	r21
    38f4:	a9 f7       	brne	.-22     	; 0x38e0 <__udivmodhi4_loop>
    38f6:	80 95       	com	r24
    38f8:	90 95       	com	r25
    38fa:	bc 01       	movw	r22, r24
    38fc:	cd 01       	movw	r24, r26
    38fe:	08 95       	ret

00003900 <_exit>:
    3900:	f8 94       	cli

00003902 <__stop_program>:
    3902:	ff cf       	rjmp	.-2      	; 0x3902 <__stop_program>
